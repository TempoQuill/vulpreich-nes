	                            ; -----------------------------------------
	                            .include "config.asm"
	                            .ignorenl
	                            ; try to build an NSF file
	                            ; NSF_SFX = 1
	                            ; NSF_FILE = 1
	                            .endinl	                            
	                            ; Add macros
	                            .include "src/macros.asm"
	                            .include "src/macros/audio.asm"
	                            MACRO musicPointerOffset label, offset
	                            	.db (label - MusicPointerOffset + offset)
	                            ENDM
	                            
	                            MACRO musicPart label
	                            	.db (label - MusicPartPointers)
	                            ENDM
	                            
	                            MACRO musicHeaderPointer label
	                            	.db (label - MusicHeaders)
	                            ENDM
	                            
	                            ;
	                            ; MusicHeader macro, to replace this:
	                            ;	.db NoteLengthTable_Death
	                            ;	.dw MusicDataXXX
	                            ;	.db MusicDataXXX_Triangle - MusicDataXXX
	                            ;	.db MusicDataXXX_Square1 - MusicDataXXX
	                            ;	.db MusicDataXXX_Noise - MusicDataXXX
	                            ;	; no noise channel, using $00 from below
	                            ;
	                            ; Setting "noise" or "dpcm" to -1 will suppress output of $00 for music headers
	                            ; "reuse" the note length from the following header to save bytes.
	                            ;
	                            MACRO musicHeader noteLengthLabel, square2, triangle, square1, noise, dpcm
	                            	.db noteLengthLabel
	                            	.dw square2
	                            	.db (triangle - square1)
	                            	.db (square1 - square2)
	                            
	                            	IF noise > 0
	                            		.db (noise - triangle)
	                            	ENDIF
	                            	IF dpcm > 0
	                            		.db (dpcm - noise)
	                            	ENDIF
	                            ENDM
	                            
	                            ; define a ROM Bank
	                            MACRO audio_bank num
	                            	.db $80 | num
	                            ENDM
	                            
	                            ; zNoiseDrumSFX macros
	                            MACRO noise_envelope rampflag, volumeramp
	                            	IF rampflag < 1
	                            		.db $40 + volumeramp
	                            	ELSE
	                            		.db (rampflag << 4) + volumeramp
	                            	ENDIF
	                            ENDM
	                            
	                            MACRO noise_adjust length, rampflag, volumeramp
	                            	IF rampflag < 1
	                            		.db $40 + volumeramp
	                            	ELSE
	                            		.db (rampflag << 4) + volumeramp
	                            	ENDIF
	                            	REPT length
	                            		.db $7e
	                            	ENDR
	                            ENDM
	                            
	                            MACRO noise_note length, period, division
	                            	.db (period << 7) + division
	                            	IF length > 1
	                            		REPT length - 1
	                            			.db $7e
	                            		ENDR
	                            	ENDIF
	                            ENDM
	                            
	                            MACRO noise_ret
	                            	.db 0
	                            ENDM
	                            
	                            MACRO note_type ins, length
	                            i = (ins - 1) << 4
	                            	.db $80 + i + length
	                            ENDM
	                            
	                            MACRO note pitch, oct
	                            o = (oct - 1) * $18
	                            	.db pitch + o
	                            ENDM
	                            
	                            MACRO rest
	                            	.db $7E
	                            ENDM
	                            
	                            MACRO sound_ret
	                            	.db $00
	                            ENDM
	                            
	                            MACRO toggle_sweep
	                            	.db $00
	                            ENDM
	                            
	                            MACRO sound_loop
	                            	.db $00
	                            ENDM
	                            
	                            MACRO drum_note id
	                            	.db id * 2
	                            ENDM
	                            
	                            MACRO drum_rest
	                            	.db $01
	                            ENDM
	                            
	                            MACRO smp_note id
	                            	.db id * 2
	                            ENDM
	                            .include "src/macros/code.asm"
	                            MACRO dba bank, label
	                            	.db bank, <label, >label
	                            ENDM
	                            
	                            ; push x
	                            MACRO PHX
	                            	TXA
	                            	PHA
	                            ENDM
	                            
	                            ; push y
	                            MACRO PHY
	                            	TYA
	                            	PHA
	                            ENDM
	                            
	                            ; pull x
	                            MACRO PLX
	                            	PLA
	                            	TAX
	                            ENDM
	                            
	                            ; pull y
	                            MACRO PLY
	                            	PLA
	                            	TAY
	                            ENDM
	                            
	                            ; test single bit
	                            MACRO TSB bit
	                            	AND #1 << bit
	                            ENDM
	                            
	                            ; set single bit
	                            MACRO SSB bit
	                            	ORA #1 << bit
	                            ENDM
	                            
	                            ; reset single bit
	                            MACRO RSB bit
	                            	AND #$ff ^ (1 << bit)
	                            ENDM
	                            
	                            ; flip signle bit
	                            MACRO FSB bit
	                            	EOR #1 << bit
	                            ENDM
	                            
	                            ; jump subroutine home
	                            ; access different memory than currently available
	                            ; only used in Home ROM
	                            MACRO JSH bank, memory
	                            	LDA #>memory
	                            	JSR GetWindowIndex
	                            	LDA #bank
	                            	STA MMC5_PRGBankSwitch2, X
	                            	STA zCurrentWindow, X
	                            	JSR memory
	                            ENDM
	                            
	                            ; jump home
	                            MACRO JPH bank, memory
	                            	LDA #>memory
	                            	JSR GetWindowIndex
	                            	LDA #bank
	                            	STA zWindow1, X
	                            	STA zCurrentWindow, X
	                            	JSR UpdatePRG
	                            	JMP memory
	                            ENDM
	                            
	                            ; jump subroutine far
	                            ; unlike JSH and JPH, JSF and JPF are used in active windows
	                            ; therefore we need an auxiliary sub in Home ROM to access the code for us
	                            MACRO JSF bank, memory
	                            	LDA #bank
	                            	LDX #<memory
	                            	LDY #>memory
	                            	JSR FarCallJump
	                            ENDM
	                            
	                            ; jump far
	                            MACRO JPF bank, memory
	                            	LDA #bank
	                            	LDX #<memory
	                            	LDY #>memory
	                            	JMP FarCallJump
	                            ENDM
	                            
	                            ; low to high nybble
	                            MACRO LTH register
	                            	ASL register
	                            	ASL register
	                            	ASL register
	                            	ASL register
	                            ENDM
	                            
	                            ; high to low nybble
	                            MACRO HTL register
	                            	LSR register
	                            	LSR register
	                            	LSR register
	                            	LSR register
	                            ENDM
	                            
	                            ; complement
	                            MACRO CPL mem
	                            	LDA mem
	                            	EOR #$ff
	                            	STA mem
	                            ENDM
	                            
	                            ; sign byte
	                            MACRO SIB mem
	                            	LDA mem
	                            	EOR #$ff
	                            	ADC #1
	                            	STA mem
	                            ENDM
	                            
	                            ; sign carry byte
	                            MACRO SCB mem
	                            	LDA mem
	                            	EOR #$ff
	                            	ADC #0
	                            	STA mem
	                            ENDM
	                            
	                            ; sign word
	                            MACRO SIW mem
	                            	LDA mem + 1
	                            	EOR #$ff
	                            	STA mem + 1
	                            	LDA mem
	                            	EOR #$ff
	                            	ADC #1
	                            	STA mem
	                            ENDM
	                            
	                            ; sign carry word
	                            MACRO SCW mem
	                            	LDA mem + 1
	                            	EOR #$ff
	                            	STA mem + 1
	                            	LDA mem
	                            	EOR #$ff
	                            	ADC #0
	                            	STA mem
	                            ENDM
	                            
	                            ; load + decrement
	                            MACRO LDD mem
	                            	LDA mem
	                            	DEC mem
	                            ENDM
	                            
	                            ; load + increment
	                            MACRO LDI mem
	                            	LDA mem
	                            	INC mem
	                            ENDM
	                            
	                            ; store + decrement
	                            MACRO STD mem
	                            	STA mem
	                            	DEC mem
	                            ENDM
	                            
	                            ; store + increment
	                            MACRO STI mem
	                            	STA mem
	                            	INC mem
	                            ENDM
	                            
	                            ; test all bits
	                            MACRO TAB
	                            	AND #$ff
	                            ENDM
	                            
	                            ; flip all bits
	                            MACRO FAB
	                            	EOR #$ff
	                            ENDM
	                            .include "src/macros/gfx.asm"	                            MACRO text address, text
	                            	.dh address
	                            	.dl address
	                            	.db +end - +start
	                            +start
	                            	.db text
	                            +end
	                            ENDM
	                            
	                            MACRO text_end
	                            	.db text_end_cmd
	                            ENDM
	                            
	                            MACRO next text
	                            	.db text_next_cmd, text
	                            ENDM
	                            
	                            MACRO para text
	                            	.db text_para_cmd, text
	                            ENDM
	                            
	                            MACRO line text
	                            	.db text_line_cmd, text
	                            ENDM
	                            
	                            MACRO cont text
	                            	.db text_cont_cmd, text
	                            ENDM
	                            
	                            MACRO done
	                            	.db text_done_cmd
	                            ENDM
	                            
	                            ; -----------------------------------------
	                            ; Add definitions
	                            .include "src/def.asm"
	                            .include "src/def/hardware.asm"
	                            .enum $0000
00000                           MMC5 = $05
00000                           
00000                           MMC5_VMirror = %01000100
00000                           MMC5_HMirror = %01010000
00000                           
00000                           CHR_A12_INVERSION = $80
00000                           
00000                           ; enum PPUControl (bitfield) (width 1 byte)
00000                           PPUCtrl_BaseAddress = $03
00000                           PPUCtrl_Base2000 = $00
00000                           PPUCtrl_Base2400 = $01
00000                           PPUCtrl_Base2800 = $02
00000                           PPUCtrl_Base2C00 = $03
00000                           PPUCtrl_WriteHorizontal = $00
00000                           PPUCtrl_WriteVertical = $04
00000                           PPUCtrl_Sprite0000 = $00
00000                           PPUCtrl_Sprite1000 = $08
00000                           PPUCtrl_Background0000 = $00
00000                           PPUCtrl_Background1000 = $10
00000                           PPUCtrl_SpriteSize8x8 = $00
00000                           PPUCtrl_SpriteSize8x16 = $20
00000                           PPUCtrl_NMIDisabled = $00
00000                           PPUCtrl_NMIEnabled = $80
00000                           
00000                           PPUStatus_VBlankHit = $80
00000                           
00000                           BATTERY_RAM      = 2
00000                           IGNORE_MIRRORING = 8
00000                           
00000                           NES_2_0 = 8
00000                           
00000                           ; reference: NTSC NES runs at 1,789,773 Hz
00000                           ; each frame contains 29,780 cycles
00000                           ; therefore NTSC NES runs at 60,099.832 mHz
00000                           ;            PAL NES runs at 1,662,607 Hz
00000                           ; each frame contains 33,248 cycles
00000                           ; therefore PAL NES runs at 50,006.226 mHz
00000                           
00000                           ; you can do more with PAL NES due to the lower framerate having more cycles than NTSC
00000                           ; in theory porting to NTSC would cause lag.
00000                           
00000                           ;
00000                           ; PPU registers
00000                           ; $2000-$2007
00000                           ;
00000                           
00000                           PPUCTRL = $2000   ; control
00000                           PPUMASK = $2001   ; mask
00000                           PPUSTATUS = $2002 ; status
00000                           OAMADDR = $2003   ; oam location
00000                           OAMDATA = $2004   ; current byte
00000                           PPUSCROLL = $2005 ; scroll position
00000                           PPUADDR = $2006   ; ppu location
00000                           PPUDATA = $2007   ; current byte
00000                           
00000                           ;
00000                           ; APU registers and joypad registers
00000                           ;  $4000-$4015         $4016-$4017
00000                           ; APU Features
00000                           ; volume (with barebones sweep functions) (pulses, noise)
00000                           ; 11-bit pitch (pulses, hill)
00000                           ; some features run at 240 Hz rather than the standard 60, marked by *
00000                           ;
00000                           
00000                           SQ1_ENV = $4000   ; 0-3: volume/sweep speed* 4:   volume sweep Flag 5:   counter flag 6-7: cycle id
00000                           SQ1_SWEEP = $4001 ; 0-2: shift multiplier    3:   direction         4-6: period       7:   power flag
00000                           SQ1_LO = $4002    ; 0-7: pitch
00000                           SQ1_HI = $4003    ; 0-2: pitch               3-7: length
00000                           
00000                           SQ2_ENV = $4004
00000                           SQ2_SWEEP = $4005
00000                           SQ2_LO = $4006
00000                           SQ2_HI = $4007
00000                           
00000                           ; $4009 isn't functional
00000                           TRI_LINEAR = $4008 ; 0-6: linear load* 7:   linear flag
00000                           TRI_LO = $400a     ; 0-7: pitch
00000                           TRI_HI = $400b     ; 0-2: pitch        3-7: length load
00000                           
00000                           ; $400d isn't functional
00000                           NOISE_ENV = $400c ; 0-3: volume/sweep speed* 4: volume sweep Flag 5: counter flag
00000                           NOISE_LO = $400e  ; 0-3: pitch               7: period loop flag
00000                           NOISE_HI = $400f  ; 3-7: length load
00000                           
00000                           ; there are a few hardware bugs with the DPCM to beware of
00000                           ; firstly, sample playback can clobber JOY1 with forged inputs, most NES title work around this
00000                           ; secondly, writes to SND_CHN may replay the sample currently playing, a retrigger if you will
00000                           ; thirdly, a byte gets added to the total size of the currently playing sample
00000                           ;	so a sample with a size of $20 reads $201 bytes of data
00000                           DPCM_ENV = $4010    ; 0-3: pitch 6: loop flag 7: IRQ flag
00000                           DPCM_DELTA = $4011  ; 0-6: delta counter
00000                           DPCM_OFFSET = $4012 ; 0-7: (offset - $c000) / $40
00000                           DPCM_SIZE = $4013   ; 0-7: (size - 1) / $10
00000                           
00000                           OAM_DMA = $4014   ; CPU memory page $XX00 - $XXFF
00000                           
00000                           SND_CHN = $4015   ; master APU register: each bit is the corresponding channel power flag, 5-7 are not used
00000                           
00000                           JOY1 = $4016
00000                           JOY2 = $4017
00000                           
00000                           ;
00000                           ; MMC5 registers
00000                           ; $5000-$5015
00000                           ;
00000                           
00000                           MMC5_PULSE1_VOL = $5000
00000                           MMC5_PULSE1_LO = $5002
00000                           MMC5_PULSE1_HI = $5003
00000                           
00000                           MMC5_PULSE2_VOL = $5004
00000                           MMC5_PULSE2_LO = $5006
00000                           MMC5_PULSE2_HI = $5007
00000                           
00000                           MMC5_PCM_MODE_IRQ = $5010
00000                           MMC5_RAW_PCM = $5011
00000                           
00000                           MMC5_SND_CHN = $5015 ; master expansion sound register: only uses bits 0, 1, and 5 if at all
00000                           
00000                           ;
00000                           ; MMC5 bank switching
00000                           ;
00000                           MMC5_PRGMode = $5100
00000                           MMC5_CHRMode = $5101
00000                           MMC5_PRGRAMProtect1 = $5102
00000                           MMC5_PRGRAMProtect2 = $5103
00000                           MMC5_ExtendedRAMMode = $5104
00000                           MMC5_NametableMapping = $5105
00000                           MMC5_FillModeTile = $5106
00000                           MMC5_FillModeColor = $5107
00000                           MMC5_PRGBankSwitch1 = $5113 ; 6000 - 7fff
00000                           MMC5_PRGBankSwitch2 = $5114 ; 8000 - 9fff
00000                           MMC5_PRGBankSwitch3 = $5115 ; a000 - bfff
00000                           MMC5_PRGBankSwitch4 = $5116 ; c000 - dfff
00000                           MMC5_PRGBankSwitch5 = $5117 ; e000 - ffff
00000                           MMC5_CHRBankSwitch1 = $5120  ; 0000 - 03ff
00000                           MMC5_CHRBankSwitch2 = $5121  ; 0400 - 07ff
00000                           MMC5_CHRBankSwitch3 = $5122  ; 0800 - 0bff
00000                           MMC5_CHRBankSwitch4 = $5123  ; 0c00 - 0fff
00000                           MMC5_CHRBankSwitch5 = $5124  ; 1000 - 13ff
00000                           MMC5_CHRBankSwitch6 = $5125  ; 1400 - 17ff
00000                           MMC5_CHRBankSwitch7 = $5126  ; 1800 - 1bff
00000                           MMC5_CHRBankSwitch8 = $5127  ; 1c00 - 1fff
00000                           MMC5_CHRBankSwitch9 = $5128  ; 0000 - 03ff, 1000 - 13ff
00000                           MMC5_CHRBankSwitch10 = $5129 ; 0400 - 07ff, 1400 - 17ff
00000                           MMC5_CHRBankSwitch11 = $512a ; 0800 - 0bff, 1800 - 1bff
00000                           MMC5_CHRBankSwitch12 = $512b ; 0c00 - 0fff, 1c00 - 1fff
00000                           MMC5_CHRBankSwitchUpper = $5130
00000                           
00000                           MMC5_VSplitMode = $5200
00000                           MMC5_VSplitScroll = $5201
00000                           MMC5_VSplitBlank = $5202
00000                           MMC5_IRQScanlineCompare = $5203
00000                           MMC5_IRQStatus = $5204
00000                           MMC5_Multiplier1 = $5205
00000                           MMC5_Multiplier2 = $5206
00000                           
00000                           MMC5_ExpansionRAMStart = $5c00
00000                           MMC5_ExpansionRAMEnd = $5fff
00000                           
00000                           NSF_PRGBank0 = $5ff8
00000                           NSF_PRGBank1 = $5ff9
00000                           NSF_PRGBank2 = $5ffa
00000                           NSF_PRGBank3 = $5ffb
00000                           NSF_PRGBank4 = $5ffc
00000                           NSF_PRGBank5 = $5ffd
00000                           NSF_PRGBank6 = $5ffe
00000                           NSF_PRGBank7 = $5fff
00000                           
00000                           NMI_NORMAL = 0
00000                           NMI_SOLID = 1
00000                           NMI_SOUND = 2
00000                           NMI_LIQUID = 3
00000                           NMI_GAS = 4
00000                           NMI_PLASMA = 5
00000                           .ende	                            .include "src/def/ppu.asm"
	                            .enum $0000
00000                           ; y = x * 32 (horizontal tile count)
00000                           TEXT_COORD_1 = $342 ; (2, 26)
00000                           TEXT_COORD_2 = $382 ; (2, 28)
00000                           TEXT_BOX_WIDTH = $1c
00000                           
00000                           ; enum ScreenUpdateBuffer
00000                           ScreenUpdateBuffer_RAM_301 = $00
00000                           ScreenUpdateBuffer_EpisodeSelect = $01
00000                           ScreenUpdateBuffer_PublicDomainLayout = $02
00000                           ScreenUpdateBuffer_TitleScreen = $03
00000                           ScreenUpdateBuffer_Credits = $04
00000                           
00000                           PAL_FADE_DIR_F = 6
00000                           PAL_FADE_F = 7
00000                           
00000                           GFX_ATTRIBUTE_SIZE = $40
00000                           NAMETABLE_ATTRIBUTE_0 = $23c0
00000                           NAMETABLE_ATTRIBUTE_1 = $27c0
00000                           NAMETABLE_ATTRIBUTE_2 = $2bc0
00000                           NAMETABLE_ATTRIBUTE_3 = $2fc0
00000                           
00000                           NAMETABLE_MAP_0 = $2000
00000                           NAMETABLE_MAP_1 = $2400
00000                           NAMETABLE_MAP_2 = $2800
00000                           NAMETABLE_MAP_3 = $2c00
00000                           NAMETABLE_AREA = $400
00000                           NUM_BG_PALETTES = $4
00000                           PALETTE_RAM = $3f00
00000                           PALETTE_RAM_SPAN = $20
00000                           
00000                           COLOR_INDEX = $3f
00000                           
00000                           PALETTE_FADE_SPEED_MASK = $f
00000                           PALETTE_FADE_PLACEMENT_MASK = %00000011
00000                           
00000                           text_end_cmd  = $00
00000                           text_next_cmd = $81
00000                           text_para_cmd = $82
00000                           text_line_cmd = $83
00000                           text_cont_cmd = $84
00000                           text_done_cmd = $85
00000                           
00000                           ; 0: $2000 1: $2400 2: $2800 3: $2c00
00000                           NAMETABLE_BASE_MASK = $3
00000                           
00000                           PPU_VRAM_INC          = $04 ; 2 ; 0: horizontal 1: vertical
00000                           PPU_OBJECT_TABLE      = $08 ; 3 ; 0: $0000      1: $1000
00000                           PPU_BACKGROUND_TABLE  = $10 ; 4 ; 0: $0000      1: $1000
00000                           PPU_OBJECT_RESOLUTION = $20 ; 5 ; 0: 8x8        1: 8x16
00000                           PPU_MS_SELECT         = $40 ; 6 ; 0: read       1: output
00000                           PPU_NMI               = $80 ; 7 ; 0: off        1: on
00000                           
00000                           PPU_GREYSCALE    = $01
00000                           PPU_BG_MASKLIFT  = $02
00000                           PPU_OBJ_MASKLIFT = $04
00000                           PPU_BG           = $08
00000                           PPU_OBJ          = $10
00000                           PPU_RED          = $20
00000                           PPU_GREEN        = $40
00000                           PPU_BLUE         = $80
00000                           
00000                           .ende	                            .include "src/def/names.asm"
	                            .enum $0000
00000                           ITEM_NAMES:
00000                           	.dsb 1
00001                           CHR_FULL_NAMES
00001                           	.dsb 1
00002                           CHR_NAMES
00002                           	.dsb 1
00003                           LOC_NAMES
00003                           	.dsb 1
00004                           EPISODE_NAMES
00004                           	.dsb 1
00005                           
00005                           ; name lengths
00005                           ITEM_NAME_LENGTH = 13
00005                           CHR_FULL_NAME_LENGTH = 15
00005                           CHR_NAME_LENGTH = 6
00005                           LOC_NAME_LENGTH = 15
00005                           .ende
	                            
	                            .enum $0000
00000                           ITEM_NONE:
00000                           	.dsb 1
00001                           ITEM_DEBIT_CARD:
00001                           	.dsb 1
00002                           ITEM_TREAT:
00002                           	.dsb 1
00003                           ITEM_BANK_LETTER:
00003                           	.dsb 1
00004                           ITEM_PACK:
00004                           	.dsb 1
00005                           .ende
	                            
	                            .enum $0000
00000                           CHARACTER_NONE:
00000                           	.dsb 1
00001                           CHARACTER_IGGY:
00001                           	.dsb 1
00002                           CHARACTER_JUNE:
00002                           	.dsb 1
00003                           CHARACTER_OTIS:
00003                           	.dsb 1
00004                           CHARACTER_PHIL:
00004                           	.dsb 1
00005                           CHARACTER_DILL:
00005                           	.dsb 1
00006                           CHARACTER_LILA:
00006                           	.dsb 1
00007                           CHARACTER_GARY:
00007                           	.dsb 1
00008                           CHARACTER_SID:
00008                           	.dsb 1
00009                           CHARACTER_09:
00009                           	.dsb 1
0000A                           CHARACTER_0A:
0000A                           	.dsb 1
0000B                           CHARACTER_0B:
0000B                           	.dsb 1
0000C                           CHARACTER_ALEX:
0000C                           	.dsb 1
0000D                           CHARACTER_0D:
0000D                           	.dsb 1
0000E                           CHARACTER_0E:
0000E                           	.dsb 1
0000F                           CHARACTER_0F:
0000F                           	.dsb 1
00010                           
00010                           .ende	                            .include "src/def/prg.asm"
	                            IFNDEF NSF_FILE
	                            	.enum $0080
00080                           PRG_Start0:
00080                           	.dsb 1
00081                           PRG_Start1:
00081                           	.dsb 1
00082                           PRG_Start2:
00082                           	.dsb 1
00083                           ELSE
00083                           	.enum $0000
00083                           ENDIF
00083                           PRG_Audio:
00083                           	.dsb 1
00084                           PRG_Music0:
00084                           	.dsb 1
00085                           	.dsb 1
00086                           IFNDEF NSF_FILE
00086                           PRG_GFXEngine:
00086                           	.dsb 1
00087                           PRG_Names0:
00087                           	.dsb 1
00088                           	.dsb $68
000F0                           ENDIF
000F0                           PRG_DPCM0:
000F0                           	.dsb 1
000F1                           PRG_DPCM1:
000F1                           	.dsb 1
000F2                           PRG_DPCM2:
000F2                           	.dsb 1
000F3                           PRG_DPCM3:
000F3                           	.dsb 1
000F4                           PRG_DPCM4:
000F4                           	.dsb 1
000F5                           PRG_DPCM5:
000F5                           	.dsb 1
000F6                           PRG_DPCM6:
000F6                           	.dsb 1
000F7                           PRG_DPCM7:
000F7                           	.dsb 1
000F8                           PRG_DPCM8:
000F8                           	.dsb 1
000F9                           PRG_DPCM9:
000F9                           	.dsb 1
000FA                           PRG_DPCM10:
000FA                           	.dsb 1
000FB                           PRG_DPCM11:
000FB                           	.dsb 1
000FC                           PRG_DPCM12:
000FC                           	.dsb 1
000FD                           PRG_DPCM13:
000FD                           	.dsb 1
000FE                           PRG_DPCM14:
000FE                           	.dsb 1
000FF                           PRG_Home:
000FF                           
000FF                           
000FF                           PROGRAM_ROM_F = 7
000FF                           .ende
	                            
	                            .enum $0000
00000                           RAM_Scratch = $00
00000                           RAM_PrimaryPlayFile = $01
00000                           RAM_BackupPlayFile = $02
00000                           
00000                           SAVE_CHECK_VALUE_1 = 99
00000                           SAVE_CHECK_VALUE_2 = 127
00000                           
00000                           WINDOW_MASK = $6000
00000                           WINDOW_SIZE = $2000
00000                           NUM_FLEXIBLE_PRG = 2
00000                           
00000                           .ende	                            .include "src/def/chr.asm"
	                            .enum $0000
00000                           CHR_TitleBG:
00000                           	.dsb 1
00001                           CHR_TitleOBJ:
00001                           	.dsb 1
00002                           .ende	                            .include "src/def/sound.asm"
	                            .enum $0000
00000                           C_:
00000                           	.dsb 2
00002                           C#:
00002                           	.dsb 2
00004                           D_:
00004                           	.dsb 2
00006                           D#:
00006                           	.dsb 2
00008                           E_:
00008                           	.dsb 2
0000A                           F_:
0000A                           	.dsb 2
0000C                           F#:
0000C                           	.dsb 2
0000E                           G_:
0000E                           	.dsb 2
00010                           G#:
00010                           	.dsb 2
00012                           A_:
00012                           	.dsb 2
00014                           A#:
00014                           	.dsb 2
00016                           B_:
00016                           	.dsb 2
00018                           .ende
	                            .enum $0001
00001                           PM_Cs1:
00001                           	.dsb 1
00002                           PM_D1:
00002                           	.dsb 1
00003                           PM_Ds1:
00003                           	.dsb 1
00004                           PM_E1:
00004                           	.dsb 1
00005                           PM_F1:
00005                           	.dsb 1
00006                           PM_Fs1:
00006                           	.dsb 1
00007                           PM_G1:
00007                           	.dsb 1
00008                           PM_Gs1:
00008                           	.dsb 1
00009                           PM_A1:
00009                           	.dsb 1
0000A                           PM_As1:
0000A                           	.dsb 1
0000B                           PM_B1:
0000B                           	.dsb 1
0000C                           PM_C2:
0000C                           	.dsb 1
0000D                           PM_Cs2:
0000D                           	.dsb 1
0000E                           PM_D2:
0000E                           	.dsb 1
0000F                           PM_Ds2:
0000F                           	.dsb 1
00010                           PM_E2:
00010                           	.dsb 1
00011                           PM_F2:
00011                           	.dsb 1
00012                           PM_Fs2:
00012                           	.dsb 1
00013                           PM_G2:
00013                           	.dsb 1
00014                           PM_Gs2:
00014                           	.dsb 1
00015                           PM_A2:
00015                           	.dsb 1
00016                           PM_As2:
00016                           	.dsb 1
00017                           PM_B2:
00017                           	.dsb 1
00018                           Maj_Slide:
00018                           	.dsb 1
00019                           Maj_Cs2:
00019                           	.dsb 1
0001A                           Maj_D2:
0001A                           	.dsb 1
0001B                           Maj_Ds2:
0001B                           	.dsb 1
0001C                           Maj_E2:
0001C                           	.dsb 1
0001D                           Maj_F2:
0001D                           	.dsb 1
0001E                           Maj_Fs2:
0001E                           	.dsb 1
0001F                           Maj_G2:
0001F                           	.dsb 1
00020                           Maj_Gs2:
00020                           	.dsb 1
00021                           Maj_A2:
00021                           	.dsb 1
00022                           Maj_As2:
00022                           	.dsb 1
00023                           Maj_B2:
00023                           	.dsb 1
00024                           Maj_C3:
00024                           	.dsb 1
00025                           Maj_Cs3:
00025                           	.dsb 1
00026                           PC_G:
00026                           	.dsb 1
00027                           PC_Gs:
00027                           	.dsb 1
00028                           PC_A:
00028                           	.dsb 1
00029                           PC_As:
00029                           	.dsb 1
0002A                           PC_B:
0002A                           	.dsb 1
0002B                           PC_C:
0002B                           	.dsb 1
0002C                           PC_Cs:
0002C                           	.dsb 1
0002D                           PC_D:
0002D                           	.dsb 1
0002E                           PC_Ds:
0002E                           	.dsb 1
0002F                           PC_E:
0002F                           	.dsb 1
00030                           P_Ds4:
00030                           	.dsb 1
00031                           P_As4_G5:
00031                           	.dsb 1
00032                           P_C5__Gs5:
00032                           	.dsb 1
00033                           P_D5__As5:
00033                           	.dsb 1
00034                           P_Gs4:
00034                           	.dsb 1
00035                           P_As3:
00035                           	.dsb 1
00036                           P_G4__Ds5:
00036                           	.dsb 1
00037                           P_F4:
00037                           	.dsb 1
00038                           P_C4:
00038                           	.dsb 1
00039                           P_D4__As4:
00039                           	.dsb 1
0003A                           P_F5__As4G5:
0003A                           	.dsb 1
0003B                           PC_Slide:
0003B                           .ende	                            .include "src/def/sfx.asm"
	                            .enum $0001
00001                           P_Hat:
00001                           SFX_EXCLAMATION_1: ; $01
00001                           	.dsb 1
00002                           P_Crash:
00002                           SFX_EXCLAMATION_2: ; $02
00002                           	.dsb 1
00003                           P_QHat:
00003                           SFX_EXCLAMATION_3: ; $03
00003                           	.dsb 1
00004                           P_OHat:
00004                           SFX_CURSOR_1: ; $04
00004                           	.dsb 1
00005                           P_DHat:
00005                           SFX_CURSOR_2: ; $05
00005                           	.dsb 1
00006                           P_DClap:
00006                           SFX_CURSOR_3: ; $06
00006                           	.dsb 1
00007                           P_Snare:
00007                           SFX_SELECT_1: ; $07
00007                           	.dsb 1
00008                           P_Kick:
00008                           SFX_SELECT_2: ; $08
00008                           	.dsb 1
00009                           SFX_SELECT_3: ; $09
00009                           	.dsb 1
0000A                           SFX_IGGY_IDLE: ; $0a
0000A                           	.dsb 1
0000B                           SFX_JUNE_IDLE: ; $0b
0000B                           	.dsb 1
0000C                           SFX_OTIS_IDLE: ; $0c
0000C                           	.dsb 1
0000D                           SFX_IGGY_ANGRY: ; $0d
0000D                           	.dsb 1
0000E                           SFX_JUNE_ANGRY: ; $0e
0000E                           	.dsb 1
0000F                           SFX_OTIS_ANGRY: ; $0f
0000F                           	.dsb 1
00010                           SFX_IGGY_CURIOUS: ; $10
00010                           	.dsb 1
00011                           SFX_JUNE_CURIOUS: ; $11
00011                           	.dsb 1
00012                           SFX_OTIS_CURIOUS: ; $12
00012                           	.dsb 1
00013                           SFX_IGGY_TALKING: ; $13
00013                           	.dsb 1
00014                           SFX_JUNE_TALKING: ; $14
00014                           	.dsb 1
00015                           SFX_OTIS_TALKING: ; $15
00015                           	.dsb 1
00016                           SFX_IGGY_BUMMED: ; $16
00016                           	.dsb 1
00017                           SFX_JUNE_BUMMED: ; $17
00017                           	.dsb 1
00018                           SFX_OTIS_BUMMED: ; $18
00018                           	.dsb 1
00019                           NOISE_SFX:
00019                           P_Click:
00019                           SFX_DOOR_CLICK: ; $19
00019                           	.dsb 1
0001A                           P_Claves:
0001A                           SFX_DOOR_SHUT: ; $1a
0001A                           	.dsb 1
0001B                           P_Conga:
0001B                           SFX_DOOR_SLAM: ; $1b
0001B                           	.dsb 1
0001C                           SFX_SINK: ; $1c
0001C                           	.dsb 1
0001D                           SFX_OBJECTIVE_COMPLETE: ; $1d
0001D                           .ende	                            .include "src/def/music.asm"
	                            .enum $0001
00001                           MUSIC_TITLE: ; $01
00001                           	.dsb 1
00002                           MUSIC_JOURNEY: ; $02
00002                           	.dsb 1
00003                           MUSIC_HOF_SCENE_2: ; $03
00003                           	.dsb 1
00004                           NUM_MUSIC_TRACKS:
00004                           
00004                           MUSIC_NONE = $ff
00004                           .ende	                            .include "src/def/gameplay.asm"	                            .enum $0000
00000                           TITLESCREENOPTION_MAIN_MENU:
00000                           	.dsb 1
00001                           TITLESCREENOPTION_DELETE_SAVE_FILE:
00001                           	.dsb 1
00002                           TITLESCREENOPTION_RESTART:
00002                           	.dsb 1
00003                           
00003                           NUM_TITLESCREENOPTION:
00003                           
00003                           A_BUTTON = 7
00003                           B_BUTTON = 6
00003                           SELECT_BUTTON = 5
00003                           START_BUTTON = 4
00003                           UP_BUTTON = 3
00003                           DOWN_BUTTON = 2
00003                           LEFT_BUTTON = 1
00003                           RIGHT_BUTTON = 0
00003                           .ende	                            
	                            .include "header.asm"
	                            IFNDEF NSF_FILE
	                            ; vulpreich header specs
	                            ; MAP: MMC5
	                            ; PRG: 1024K
	                            ; CHR: 1024K
	                            ; RAM: 128K + 2K internal + 1K Chip
	                            ; TOTAL: 2179K
	  4E 45 53 1A               	.db "NES", $1a ; NES + end of file command
	  40                        	.db $40 ; 1 megabyte of PRG data
	  80                        	.db $80 ; 1 megabyte of CHR data
	  5A                        	.db (MMC5 & $0f) * 16 | IGNORE_MIRRORING | BATTERY_RAM
	  08                        	.db (MMC5 & $f0)      | NES_2_0
	  00 00                     	.db 0, 0 ; unused
	  BB                        	.db $bb ; 128 kilobytes of PRG RAM
	  00                        	.db 0
	  00                        	.db 0 ; NTSC
	  00 00 00                  	.db 0, 0, 0 ; unused
	                            ELSE
	                            	.db "NESM", $1a ; handshake
	                            	.db $1 ; version
	                            	IFDEF NSF_SFX
	                            		.db $1d ; sfx
	                            	ELSE
	                            		.db $2 ; songs
	                            	ENDIF
	                            	.db $1 ; starting song
	                            	.dw LOAD
	                            	.dw INIT
	                            	.dw PLAY
	                            	.db "VULPREICH"
	                            	.dsb 23, 0
	                            	.db "TEMPO QUILL"
	                            	.dsb 21, 0
	                            	.db "2022 Free to use when sales end"
	                            	.db 0
	                            	.dw $411a ; NTSC
	                            	.db PRG_Audio, PRG_Audio + 1, PRG_Music0, PRG_Music0 + 1, PRG_DPCM0, PRG_DPCM0 + 1, PRG_Home, PRG_Home + 1
	                            	.dw $4e20 ; PAL, unused
	                            	.db 0 ; this is an NTSC file
	                            	.db 0 ; no extra chip (North American settings)
	                            	.dsb 4, 0 ; proceeding data is program data
	                            
	                            ENDIF	                            
	                            ; -----------------------------------------
	                            ; Add RAM definitions
	                            .enum $0000
00000                           .include "src/ram/internal.asm"
00000                           ; section: AUDIO RAM (zero page)
00000                           zCurrentMusicPointer:
00000                           	.dsb 2 ; 0000
00002                           zNextPitch:
00002                           	.dsb 2
00004                           zNoiseIndexPointer:
00004                           	.dsb 2 ; 0004
00006                           zNoiseSFXOffset:
00006                           	.dsb 1
00007                           zMusicPulse1NoteLengthFraction:
00007                           	.dsb 1
00008                           zMusicPulse2NoteLengthFraction:
00008                           	.dsb 1 ; 0008
00009                           zMusicHillNoteLengthFraction:
00009                           	.dsb 1
0000A                           zMusicNoiseNoteLengthFraction:
0000A                           	.dsb 1
0000B                           zMusicDPCMNoteLengthFraction:
0000B                           	.dsb 1
0000C                           zHillIns:
0000C                           	.dsb 1 ; 000c
0000D                           zPulse2Ins:
0000D                           	.dsb 1
0000E                           zPulse1Ins:
0000E                           	.dsb 1
0000F                           zMusicStack:
0000F                           	.dsb 1
00010                           zOctave:
00010                           	.dsb 1 ; 0010
00011                           zMusicChannelCount:
00011                           	.dsb 1
00012                           zDPCMNoteRatioLength:
00012                           	.dsb 1
00013                           iCurrentMusic:
00013                           	.dsb 1
00014                           zCurrentDrum:
00014                           	.dsb 1 ; 0014
00015                           zCurrentDPCMSFX:
00015                           	.dsb 1
00016                           zCurrentNoiseSFX:
00016                           	.dsb 1
00017                           	.dsb 1
00018                           zMusicQueue:
00018                           	.dsb 1 ; 0018
00019                           zDPCMSFX:
00019                           	.dsb 1
0001A                           zNoiseDrumSFX:
0001A                           	.dsb 1
0001B                           	.dsb 1
0001C                           	.dsb 1 ; 001c
0001D                           	.dsb 1
0001E                           	.dsb 1
0001F                           	.dsb 1
00020                           zMusicBank:
00020                           	.dsb 1 ; 0020
00021                           zSweep:
00021                           	.dsb 1
00022                           zTempo:
00022                           	.dsb 1
00023                           ; section: Hardware Assistive RAM
00023                           ; backup registers, banks, addresses, and buffers
00023                           zNMITimer:
00023                           	.dsb 1
00024                           zCHRWindow0:
00024                           	.dsb 1 ; 0024
00025                           zCHRWindow1:
00025                           	.dsb 1
00026                           zBackupA:
00026                           	.dsb 1
00027                           zBackupX:
00027                           	.dsb 1
00028                           zBackupY:
00028                           	.dsb 1 ; 0028
00029                           zTableOffset:
00029                           	.dsb 2
0002B                           zRAMBank: ; MMC5 backups, and b/c this is ZP, this is optimal speed
0002B                           	.dsb 1
0002C                           ; despite 4 switchable banks, only two real windows are needed
0002C                           ; zWindow1 - 8000-9fff, zWindow2 - a000-bfff
0002C                           ; c000-dfff is the DPCM area, and e000-fff9 is home ROM
0002C                           zWindow1:
0002C                           	.dsb 1 ; 002c
0002D                           zWindow2:
0002D                           	.dsb 1
0002E                           zCurrentWindow:
0002E                           	.dsb 2
00030                           zBackupWindow:
00030                           	.dsb 2 ; 0030
00032                           zPPUDataBufferPointer:
00032                           	.dsb 2
00034                           	.dsb 2 ; 0034
00036                           	.dsb 2
00038                           
00038                           zAuxAddresses: ; back up 4 at a time
00038                           ; 0: audio
00038                           ; 1: updates / text
00038                           ; 2: vblank
00038                           ; 3: everything else
00038                           	.dsb 2 ; 0038
0003A                           	.dsb 2
0003C                           	.dsb 2
0003E                           	.dsb 2
00040                           zFactorBuffer:
00040                           	.dsb 4 ; 0040
00044                           zDividerBuffer:
00044                           	.dsb 4 ; 0044
00048                           zAddendBuffer:
00048                           	.dsb 4 ; 0048
0004C                           zDifferentialBuffer:
0004C                           	.dsb 4 ; 004c
00050                           zInputBottleNeck:
00050                           	.dsb 2 ; 0050
00052                           zInputCurrentState:
00052                           	.dsb 2
00054                           zPPUCtrlMirror:
00054                           	.dsb 1 ; 0054
00055                           zPPUMaskMirror:
00055                           	.dsb 1
00056                           zPPUStatusMirror:
00056                           	.dsb 1
00057                           zPPUScrollXMirror:
00057                           	.dsb 1
00058                           zPPUScrollYMirror:
00058                           	.dsb 1 ; 0058
00059                           zStringXOffset:
00059                           	.dsb 1
0005A                           zPalPointer:
0005A                           	.dsb 2
0005C                           zPalFade:
0005C                           	.dsb 1 ; 005c
0005D                           zPalFadeOffset:
0005D                           	.dsb 1
0005E                           zPalFadeSpeed:
0005E                           	.dsb 1
0005F                           zPalFadePlacement:
0005F                           	.dsb 1
00060                           ; section: miscellaneous
00060                           zTitleScreenOption:
00060                           	.dsb 1 ; 0060
00061                           zTitleScreenSelectedOption:
00061                           	.dsb 1
00062                           zCurrentTextByte:
00062                           	.dsb 1
00063                           zTextBank:
00063                           	.dsb 1
00064                           zCurrentTextAddress:
00064                           	.dsb 2 ; 0064
00066                           	.dsb 2
00068                           	.dsb 2 ; 0068
0006A                           	.dsb 2
0006C                           	.dsb 2 ; 006c
0006E                           	.dsb 2
00070                           	.dsb 2 ; 0070
00072                           	.dsb 2
00074                           	.dsb 2 ; 0074
00076                           zJumpTableIndex:
00076                           	.dsb 1
00077                           	.dsb 1
00078                           zTitleScreenTimer:
00078                           	.dsb 2 ; 0078
0007A                           zSaveFileExists:
0007A                           	.dsb 1
0007B                           	.dsb 1
0007C                           	.dsb 1 ; 007c
0007D                           	.dsb 1
0007E                           	.dsb 1
0007F                           	.dsb 1
00080                           	.dsb 2 ; 0080
00082                           	.dsb 2
00084                           	.dsb 4 ; 0084
00088                           	.dsb 4 ; 0088
0008C                           	.dsb 4 ; 008c
00090                           	.dsb 4 ; 0090
00094                           	.dsb 4 ; 0094
00098                           	.dsb 4 ; 0098
0009C                           	.dsb 4 ; 009c
000A0                           	.dsb 4 ; 00a0
000A4                           	.dsb 4 ; 00a4
000A8                           	.dsb 4 ; 00a8
000AC                           	.dsb 4 ; 00ac
000B0                           	.dsb 48 ; 00b0
000E0                           zPals:
000E0                           	.dsb 32 ; 00e0
00100                           
00100                           ; section: STACK
00100                           iStack:
00100                           iStackBottom:
00100                           	.dsb $ff
001FF                           iStackTop:
001FF                           	.dsb 1
00200                           
00200                           ; section: AUDIO RAM (channels) 0200 - 04bf
00200                           iMusicPulse2BigPointer:
00200                           	.dsb 2 ; 0200
00202                           iMusicPulse1BigPointer:
00202                           	.dsb 2
00204                           iMusicHillBigPointer:
00204                           	.dsb 2 ; 0204
00206                           iMusicNoiseBigPointer:
00206                           	.dsb 2
00208                           iMusicDPCMBigPointer:
00208                           	.dsb 2 ; 0208
0020A                           iMusicPulse2NoteSubFrames:
0020A                           	.dsb 1
0020B                           iMusicPulse1NoteSubFrames:
0020B                           	.dsb 1
0020C                           iMusicHillNoteSubFrames:
0020C                           	.dsb 1 ; 020c
0020D                           iMusicNoiseNoteSubFrames:
0020D                           	.dsb 1
0020E                           iMusicDPCMNoteSubFrames:
0020E                           	.dsb 1
0020F                           iCurrentMusicOffset:
0020F                           	.dsb 1
00210                           iPulse2NoteLength:
00210                           	.dsb 1 ; 0210
00211                           iPulse1NoteLength:
00211                           	.dsb 1
00212                           iHillNoteLength:
00212                           	.dsb 1
00213                           iNoiseNoteLength:
00213                           	.dsb 1
00214                           iDPCMNoteLength:
00214                           	.dsb 1 ; 0214
00215                           iMusicStartPoint:
00215                           	.dsb 1
00216                           iMusicEndPoint:
00216                           	.dsb 1
00217                           iMusicLoopPoint:
00217                           	.dsb 1
00218                           iCurrentPulse2Offset:
00218                           	.dsb 1 ; 0218
00219                           iCurrentPulse1Offset:
00219                           	.dsb 1
0021A                           iCurrentHillOffset:
0021A                           	.dsb 1
0021B                           iCurrentNoiseOffset:
0021B                           	.dsb 1
0021C                           iCurrentDPCMOffset:
0021C                           	.dsb 1 ; 021c
0021D                           iMusicPulse2NoteLength:
0021D                           	.dsb 1
0021E                           iMusicPulse1NoteLength:
0021E                           	.dsb 1
0021F                           iMusicHillNoteLength:
0021F                           	.dsb 1
00220                           iMusicNoiseNoteLength:
00220                           	.dsb 1 ; 0220
00221                           iMusicDPCMNoteLength:
00221                           	.dsb 1
00222                           iMusicPulse2InstrumentOffset:
00222                           	.dsb 1
00223                           iMusicPulse1InstrumentOffset:
00223                           	.dsb 1
00224                           	.dsb 1 ; 0224
00225                           	.dsb 1
00226                           	.dsb 1
00227                           	.dsb 1
00228                           	.dsb 1 ; 0228
00229                           	.dsb 1
0022A                           	.dsb 1
0022B                           	.dsb 1
0022C                           	.dsb 1 ; 022c
0022D                           	.dsb 1
0022E                           	.dsb 1
0022F                           	.dsb 1
00230                           	.dsb 16
00240                           	.dsb 16 ; 0240
00250                           	.dsb 32
00270                           	.dsb 32
00290                           	.dsb 32
002B0                           	.dsb 16
002C0                           	.dsb 16 ; 02c0
002D0                           	.dsb 16
002E0                           	.dsb 16
002F0                           	.dsb 32
00310                           	.dsb 16
00320                           	.dsb 16
00330                           	.dsb 16
00340                           	.dsb 32 ; 0340
00360                           	.dsb 16
00370                           	.dsb 16
00380                           	.dsb 32 ; 0380
003A0                           	.dsb 16
003B0                           	.dsb 16
003C0                           	.dsb 16 ; 03c0
003D0                           	.dsb 16
003E0                           	.dsb 16
003F0                           	.dsb 32
00410                           	.dsb 16
00420                           	.dsb 16
00430                           	.dsb 16
00440                           	.dsb 16 ; 0440
00450                           	.dsb 32
00470                           	.dsb 16
00480                           	.dsb 16 ; 0480
00490                           	.dsb 16
004A0                           	.dsb 16
004B0                           	.dsb 16
004C0                           ; section: groups
004C0                           	.dsb 16 ; 04c0
004D0                           iCurrentPals:
004D0                           	.dsb 16 ; 04d0
004E0                           iNSFBanks:
004E0                           	.dsb 8 ; 04e0
004E8                           	.dsb $18 ; 04e8
00500                           	.dsb $40 ; 0500
00540                           	.dsb $40 ; 0540
00580                           	.dsb $40 ; 0580
005C0                           	.dsb $40 ; 05c0
00600                           iStringBuffer:
00600                           	.dsb $100 ; 0600
00700                           iVirtualOAM:
00700                           	.dsb $100 ; 0700 - 07ff
00800                           .ende
	                            
	                            .enum MMC5_ExpansionRAMStart
05C00                           .include "src/ram/chip.asm"
05C00                           cCardBCDBalance:
05C00                           	.dsb 4 ; 5c00
05C04                           cCurrentBCDPrice:
05C04                           	.dsb 4 ; 5c04
05C08                           	.dsb 2 ; 5c08
05C0A                           cObjectIndex:
05C0A                           	.dsb 1
05C0B                           cObjectType:
05C0B                           	.dsb 1
05C0C                           cNamePointer:
05C0C                           ; bank, lo, high
05C0C                           	.dsb 3 ; 5c0c
05C0F                           cCurrentIndex:
05C0F                           	.dsb 1
05C10                           cCurrentRAMAddress:
05C10                           	.dsb 2 ; 5c10
05C12                           cCurrentROMBank:
05C12                           	.dsb 1
05C13                           cNameLength:
05C13                           	.dsb 1
05C14                           	.dsb $29c
05EB0                           cWindowStackPointer:
05EB0                           	.dsb 2 ; 5eb0
05EB2                           	.dsb 14
05EC0                           c2DMenuCursorInitY:
05EC0                           	.dsb 16 ; 5ec0
05ED0                           cMenuData:
05ED0                           cMenuDataFlags:
05ED0                           	.dsb 16 ; 5ed0
05EE0                           cMenuHeader:
05EE0                           	.dsb 16 ; 5ee0
05EF0                           cMenuHeaderEnd:
05EF0                           	.dsb 16 ; 5ef0
05F00                           	.dsb $80 ; 5f00
05F80                           cPPUIndex:
05F80                           	.dsb 1
05F81                           cPPUBuffer:
05F81                           	.dsb $7f ; 5f80
06000                           .ende
	                            
	                            .enum $6000
06000                           .include "src/ram/cart.asm"
06000                           .base $6000
06000                           ; this game has 128K of PRG-RAM, the maximum the MMC5 can hold.
06000                           ; RAM_Scratch
06000                           	.dsb $1800
07800                           sWindowStackBottom:
07800                           sWindowStack:
07800                           	.dsb $7ff
07FFF                           sWindowStackTop:
07FFF                           	.dsb 1
08000                           ; RAM_PrimaryPlayFile
08000                           .base $6000
06000                           sPlayerData:
06000                           sCheckValue1:
06000                           	.dsb 1 ; 6000
06001                           sCheckValue2:
06001                           	.dsb 1
06002                           sEpisodeEvents:
06002                           	.dsb $1a
0601C                           	.dsb $1fe4
08000                           ; RAM_BackupPlayFile
08000                           .base $6000
06000                           sBackupPlayerData:
06000                           sBackupCheckValue1:
06000                           	.dsb 1 ; 6000
06001                           sBackupCheckValue2:
06001                           	.dsb 1
06002                           sBackupEpisodeEvents:
06002                           	.dsb $1a
0601C                           	.dsb $1fe4
08000                           	.dsb (13 * $2000)22000                           .ende
	                            
	                            ; add each of the banks
	                            ; VulpReich is built with the MMC5 in mind
	                            ; it maxes out all of the possible specs with this mapper.
	                            ; 8000-dfff - general purpose ROM
	                            ; 8000-9fff - switchable window lower
	                            ; a000-bfff - switchable window upper
	                            ; c000-dfff - always DPCM data
	                            ; e000-fff9 - home base, here lies only the most essential
	                            ;             instruction data (mapper data, math, NMI, interfaces, etc.)
	                            
	                            IFNDEF NSF_FILE
	                            	; bank 00-02 starter banks
	                            	.base $8000
08000                           	.include "src/start.asm"
08000                           .include "src/engine/init.asm"
08000                           TryLoadSaveData:
08000 A9 00                     	LDA #0
08002 85 7A                     	STA zSaveFileExists
08004 20 1A 80                  	JSR CheckPrimarySaveFile
08007 F0 01                     	BEQ @backup
08009 60                        	RTS
0800A                           
0800A                           @backup:
0800A 20 32 80                  	JSR CheckBackupSaveFile
0800D A5 7A                     	LDA zSaveFileExists
0800F F0 08                     	BEQ @corrupt
08011 A9 02                     	LDA #RAM_BackupPlayFile
08013 85 2B                     	STA zRAMBank
08015 8D 13 51                  	STA MMC5_PRGBankSwitch1
08018 60                        	RTS
08019                           
08019                           @corrupt:
08019 60                        	RTS
0801A                           
0801A                           CheckPrimarySaveFile:
0801A A9 01                     	LDA #RAM_PrimaryPlayFile
0801C 85 2B                     	STA zRAMBank
0801E 8D 13 51                  	STA MMC5_PRGBankSwitch1
08021 A9 63                     	LDA #SAVE_CHECK_VALUE_1
08023 CD 00 60                  	CMP sCheckValue1
08026 D0 09                     	BNE @nope
08028 A9 7F                     	LDA #SAVE_CHECK_VALUE_2
0802A CD 01 60                  	CMP sCheckValue2
0802D D0 02                     	BNE @nope
0802F E6 7A                     	INC zSaveFileExists
08031                           @nope:
08031 60                        	RTS
08032                           
08032                           CheckBackupSaveFile:
08032 A9 02                     	LDA #RAM_BackupPlayFile
08034 85 2B                     	STA zRAMBank
08036 8D 13 51                  	STA MMC5_PRGBankSwitch1
08039 A9 63                     	LDA #SAVE_CHECK_VALUE_1
0803B CD 00 60                  	CMP sBackupCheckValue1
0803E D0 09                     	BNE @nope
08040 A9 7F                     	LDA #SAVE_CHECK_VALUE_2
08042 CD 01 60                  	CMP sBackupCheckValue2
08045 D0 02                     	BNE @nope
08047 E6 7A                     	INC zSaveFileExists
08049                           @nope:
08049 60                        	RTS
0804A                           
0804A                           GameInit:
0804A 20 00 E0                  	JSR ClearWindowData
0804D 20 00 80                  	JSR TryLoadSaveData
08050 4C 63 80                  	JMP IntroSequence
08053                           
08053                           IntroPals:
08053 0F 00 10 30 0F 01 21 31.. .incbin "src/raw-data/title.pal"
08063                           
08063                           IntroSequence:
08063 20 A1 80                  	JSR InspiredScreen
08066 20 0A 81                  	JSR TitleScreen
08069 A9 1E                     	LDA #PPU_OBJ | PPU_BG | PPU_OBJ_MASKLIFT | PPU_BG_MASKLIFT
0806B 8D 01 20                  	STA PPUMASK
0806E 85 55                     	STA zPPUMaskMirror
08070 A9 01                     	LDA #1
08072 20 EF E0                  	JSR DelayFrame_s_
08075                           @Loop:
08075 20 7D 81                  	JSR RunTitleScreen
08078 B0 FB                     	BCS @Loop
0807A A5 54                     	LDA zPPUCtrlMirror
0807C 29 DF                     	AND #$ff ^ PPU_OBJECT_RESOLUTION ; 8x8
0807E 85 54                     	STA zPPUCtrlMirror
08080 8D 00 20                  	STA PPUCTRL
08083 A5 60                     	LDA zTitleScreenOption
08085 C9 03                     	CMP #NUM_TITLESCREENOPTION
08087 90 02                     	BCC @Begin
08089 A9 00                     	LDA #TITLESCREENOPTION_MAIN_MENU
0808B                           @Begin:
0808B 0A                        	ASL A
0808C A8                        	TAY
0808D B9 9B 80                  	LDA @DW, Y
08090 85 3E                     	STA zAuxAddresses + 6
08092 C8                        	INY
08093 B9 9B 80                  	LDA @DW, Y
08096 85 3F                     	STA zAuxAddresses + 7
08098 6C 3E 00                  	JMP (zAuxAddresses + 6)
0809B                           
0809B                           @DW
0809B 63 80                     	.dw IntroSequence
0809D 63 80                     	.dw IntroSequence
0809F 63 80                     	.dw IntroSequence
080A1                           
080A1                           InspiredScreen:
080A1                           	; we're initializing the PPU
080A1                           	; turn off NMI
080A1 A5 54                     	LDA zPPUCtrlMirror
080A3 29 7F                     	AND #$ff ^ PPU_NMI
080A5 85 54                     	STA zPPUCtrlMirror
080A7 8D 00 20                  	STA PPUCTRL
080AA                           
080AA 20 0C E2                  	JSR InitNameTable
080AD 20 FA E1                  	JSR InitPals
080B0                           
080B0 20 B1 E0                  	JSR HideSprites
080B3                           
080B3 AD 02 20                  	LDA PPUSTATUS
080B6                           
080B6 A9 3F                     	LDA #$3F
080B8 8D 06 20                  	STA PPUADDR
080BB A9 00                     	LDA #0
080BD 8D 06 20                  	STA PPUADDR
080C0                           
080C0                           	; store the palette data
080C0 A2 0F                     	LDX #15
080C2 86 5C                     	STX zPalFade
080C4 86 5E                     	STX zPalFadeSpeed
080C6                           @PalLoop:
080C6 BD 53 80                  	LDA IntroPals, X
080C9 9D D0 04                  	STA iCurrentPals, X
080CC CA                        	DEX
080CD D0 F7                     	BNE @PalLoop
080CF                           
080CF A9 81                     	LDA #<cPPUBuffer
080D1 85 32                     	STA zPPUDataBufferPointer
080D3 A9 5F                     	LDA #>cPPUBuffer
080D5 85 33                     	STA zPPUDataBufferPointer + 1
080D7                           
080D7                           	; we can enable graphical updates now
080D7 A5 54                     	LDA zPPUCtrlMirror
080D9 09 80                     	ORA #PPU_NMI
080DB 85 54                     	STA zPPUCtrlMirror
080DD 8D 00 20                  	STA PPUCTRL
080E0                           
080E0 A9 01                     	LDA #1
080E2 20 EF E0                  	JSR DelayFrame_s_
080E5                           
080E5 A9 B2                     	LDA #<BeginningText
080E7 85 32                     	STA zPPUDataBufferPointer
080E9 A9 83                     	LDA #>BeginningText
080EB 85 33                     	STA zPPUDataBufferPointer + 1
080ED                           
080ED                           	; sure, we can get the game to show our stuff now
080ED A9 1E                     	LDA #PPU_OBJ | PPU_BG | PPU_OBJ_MASKLIFT | PPU_BG_MASKLIFT
080EF 8D 01 20                  	STA PPUMASK
080F2 85 55                     	STA zPPUMaskMirror
080F4                           	; fade in palettes
080F4 A5 E0                     	LDA zPals
080F6                           	SSB PAL_FADE_F
080F6 09 80                     	ORA #1 << PAL_FADE_F
080F8 85 E0                     	STA zPals
080FA                           	SSB PAL_FADE_DIR_F ; wait $cf frames (3.45 seconds)
080FA 09 40                     	ORA #1 << PAL_FADE_DIR_F
080FC 20 EF E0                  	JSR DelayFrame_s_
080FF                           	; fade out palettes
080FF A5 E0                     	LDA zPals
08101 09 C0                     	ORA #1 << PAL_FADE_F | 1 << PAL_FADE_DIR_F
08103 85 E0                     	STA zPals
08105                           	RSB PAL_FADE_DIR_F ; wait $8f frames (2.38 seconds)
08105 29 BF                     	AND #$ff ^ (1 << PAL_FADE_DIR_F)
08107 4C EF E0                  	JMP DelayFrame_s_
0810A                           
0810A                           TitleScreen:
0810A A9 01                     	LDA #1
0810C 20 EF E0                  	JSR DelayFrame_s_
0810F                           	; disable NMI for now
0810F A5 54                     	LDA zPPUCtrlMirror
08111 29 7F                     	AND #$ff ^ PPU_NMI
08113 85 54                     	STA zPPUCtrlMirror
08115 8D 00 20                  	STA PPUCTRL
08118                           	; no NMI, nothing to show
08118 A9 00                     	LDA #0
0811A 8D 01 20                  	STA PPUMASK
0811D 85 55                     	STA zPPUMaskMirror
0811F                           	; clear nametable and palettes
0811F 20 0C E2                  	JSR InitNameTable
08122 20 FA E1                  	JSR InitPals
08125                           
08125 AD 02 20                  	LDA PPUSTATUS
08128                           
08128 A9 3F                     	LDA #$3F
0812A A2 00                     	LDX #0
0812C 8D 06 20                  	STA PPUADDR
0812F 8E 06 20                  	STX PPUADDR
08132                           
08132                           	; set fade speed
08132 E8                        	INX
08133 86 5C                     	STX zPalFade
08135 86 5E                     	STX zPalFadeSpeed
08137                           
08137 A2 0F                     	LDX #15
08139                           @PalLoop:
08139 BD 53 80                  	LDA IntroPals, X
0813C 9D D0 04                  	STA iCurrentPals, X
0813F CA                        	DEX
08140 10 F7                     	BPL @PalLoop
08142                           	; set up nametable and text
08142 A9 81                     	LDA #<cPPUBuffer
08144 85 32                     	STA zPPUDataBufferPointer
08146 A9 5F                     	LDA #>cPPUBuffer
08148 85 33                     	STA zPPUDataBufferPointer + 1
0814A                           
0814A                           	; we can enable graphical updates now
0814A A5 54                     	LDA zPPUCtrlMirror
0814C 09 80                     	ORA #PPU_NMI
0814E 85 54                     	STA zPPUCtrlMirror
08150 8D 00 20                  	STA PPUCTRL
08153                           
08153 A9 01                     	LDA #1
08155 20 EF E0                  	JSR DelayFrame_s_
08158                           
08158 A9 4E                     	LDA #<TitleScreenLayout
0815A 85 32                     	STA zPPUDataBufferPointer
0815C A9 82                     	LDA #>TitleScreenLayout
0815E 85 32                     	STA zPPUDataBufferPointer
08160                           
08160 A9 01                     	LDA #1
08162 20 EF E0                  	JSR DelayFrame_s_
08165                           	; music 1
08165 A0 01                     	LDY #MUSIC_TITLE
08167 84 18                     	STY zMusicQueue
08169                           
08169                           	; sure, we can get the game to show our stuff now
08169 A9 1E                     	LDA #PPU_OBJ | PPU_BG | PPU_OBJ_MASKLIFT | PPU_BG_MASKLIFT
0816B 8D 01 20                  	STA PPUMASK
0816E 85 55                     	STA zPPUMaskMirror
08170                           
08170                           	; fade in
08170 A5 E0                     	LDA zPals
08172 29 3F                     	AND #COLOR_INDEX
08174                           	SSB PAL_FADE_F
08174 09 80                     	ORA #1 << PAL_FADE_F
08176 85 E0                     	STA zPals
08178 A9 06                     	LDA #6
0817A 20 EF E0                  	JSR DelayFrame_s_
0817D                           
0817D                           RunTitleScreen:
0817D A5 76                     	LDA zJumpTableIndex
0817F 30 10                     	BMI @Done
08181 0A                        	ASL A
08182 A8                        	TAY
08183 B9 93 81                  	LDA @DW, Y
08186 85 3A                     	STA zAuxAddresses + 2
08188 C8                        	INY
08189 B9 93 81                  	LDA @DW, Y
0818C 85 3B                     	STA zAuxAddresses + 3
0818E 6C 3A 00                  	JMP (zAuxAddresses + 2)
08191                           @Done:
08191 38                        	SEC
08192 60                        	RTS
08193                           
08193                           @DW:
08193 99 81                     	.dw TitleScreenTimer
08195 A5 81                     	.dw TitleScreenMain
08197 22 82                     	.dw TitleScreenEnd
08199                           
08199                           TitleScreenTimer:
08199                           	; next scene
08199 E6 76                     	INC zJumpTableIndex
0819B                           	; set timer for $1000 frames (about 1:08)
0819B A9 00                     	LDA #0
0819D 85 78                     	STA zTitleScreenTimer
0819F A9 10                     	LDA #$10
081A1 85 79                     	STA zTitleScreenTimer + 1
081A3 38                        	SEC
081A4 60                        	RTS
081A5                           
081A5                           TitleScreenMain:
081A5                           	; has our timer concluded?
081A5 A5 78                     	LDA zTitleScreenTimer
081A7 05 79                     	ORA zTitleScreenTimer + 1
081A9 F0 22                     	BEQ @End
081AB                           	; it's still a non-zero
081AB A5 78                     	LDA zTitleScreenTimer
081AD D0 02                     	BNE @Skip
081AF C6 79                     	DEC zTitleScreenTimer + 1
081B1                           @Skip:
081B1 C6 78                     	DEC zTitleScreenTimer
081B3                           	; check for controller 1 input
081B3 20 34 82                  	JSR Intro_CheckInput
081B6 90 0E                     	BCC @Quit
081B8 B9 D3 81                  	LDA @DW, Y
081BB C8                        	INY
081BC 85 3E                     	STA zAuxAddresses + 6
081BE B9 D3 81                  	LDA @DW, Y
081C1 85 3F                     	STA zAuxAddresses + 7
081C3 6C 3E 00                  	JMP (zAuxAddresses + 6)
081C6                           @Quit:
081C6 A9 01                     	LDA #1
081C8 20 EF E0                  	JSR DelayFrame_s_
081CB 38                        	SEC
081CC 60                        	RTS
081CD                           
081CD                           @End:
081CD E6 76                     	INC zJumpTableIndex
081CF E6 78                     	INC zTitleScreenTimer
081D1 18                        	CLC
081D2 60                        	RTS
081D3                           
081D3                           @DW:
081D3 D9 81                     	.dw @Press_A_Start
081D5 07 82                     	.dw @Press_B
081D7 1B 82                     	.dw @Press_Up_Down
081D9                           
081D9                           @Press_A_Start:
081D9 A5 50                     	LDA zInputBottleNeck
081DB                           	TSB START_BUTTON
081DB 29 10                     	AND #1 << START_BUTTON
081DD D0 1C                     	BNE @CheckSelect
081DF                           @Normal:
081DF A9 00                     	LDA #TITLESCREENOPTION_MAIN_MENU
081E1 85 60                     	STA zTitleScreenOption
081E3 20 C2 E0                  	JSR ClearOAM
081E6                           	; music 0
081E6 A0 FF                     	LDY #MUSIC_NONE
081E8 84 18                     	STY zMusicQueue
081EA                           	; sfx 6
081EA A0 07                     	LDY #SFX_SELECT_1
081EC 20 4C E3                  	JSR PlaySFX
081EF                           	; fade out palettes
081EF A5 E0                     	LDA zPals
081F1 09 C0                     	ORA #1 << PAL_FADE_F | 1 << PAL_FADE_DIR_F
081F3 85 E0                     	STA zPals
081F5                           	RSB PAL_FADE_DIR_F ; wait $8f frames (2.38 seconds)
081F5 29 BF                     	AND #$ff ^ (1 << PAL_FADE_DIR_F)
081F7 18                        	CLC
081F8 4C EF E0                  	JMP DelayFrame_s_
081FB                           
081FB                           @CheckSelect:
081FB A5 50                     	LDA zInputBottleNeck
081FD 29 20                     	AND #1 << SELECT_BUTTON
081FF F0 DE                     	BEQ @Normal
08201 A9 01                     	LDA #TITLESCREENOPTION_DELETE_SAVE_FILE
08203 85 60                     	STA zTitleScreenOption
08205 18                        	CLC
08206 60                        	RTS
08207                           
08207                           @Press_B:
08207                           	; music 0
08207 A0 FF                     	LDY #MUSIC_NONE
08209 84 18                     	STY zMusicQueue
0820B 20 C2 E0                  	JSR ClearOAM
0820E A5 E0                     	LDA zPals
08210 09 C0                     	ORA #1 << PAL_FADE_F | 1 << PAL_FADE_DIR_F
08212 85 E0                     	STA zPals
08214                           	RSB PAL_FADE_DIR_F ; wait $8f frames (2.38 seconds)
08214 29 BF                     	AND #$ff ^ (1 << PAL_FADE_DIR_F)
08216 20 EF E0                  	JSR DelayFrame_s_
08219 18                        	CLC
0821A 60                        	RTS
0821B                           
0821B                           @Press_Up_Down:
0821B A0 04                     	LDY #SFX_CURSOR_1
0821D 20 4C E3                  	JSR PlaySFX
08220 18                        	CLC
08221 60                        	RTS
08222                           
08222                           TitleScreenEnd:
08222                           ; Wait until the music is queued
08222 E6 78                     	INC zTitleScreenTimer
08224 F0 02                     	BEQ @Continue
08226 18                        	CLC
08227 60                        	RTS
08228                           
08228                           @Continue:
08228 A9 02                     	LDA #TITLESCREENOPTION_RESTART
0822A 85 61                     	STA zTitleScreenSelectedOption
0822C                           	; return to the inspired screen
0822C A5 76                     	LDA zJumpTableIndex
0822E                           	SSB 7
0822E 09 80                     	ORA #1 << 7
08230 85 76                     	STA zJumpTableIndex
08232 18                        	CLC
08233 60                        	RTS
08234                           
08234                           Intro_CheckInput:
08234                           ; c = necesary input (a, b, start, up, down)
08234                           ; y = pointer offset (0 for a/start, 2 for b, 4 for up/down)
08234 A0 00                     	LDY #0
08236 A5 50                     	LDA zInputBottleNeck
08238 0A                        	ASL A
08239 B0 12                     	BCS @A_Start
0823B 0A                        	ASL A
0823C B0 0D                     	BCS @B
0823E 0A                        	ASL A
0823F 0A                        	ASL A
08240 B0 0B                     	BCS @A_Start
08242 0A                        	ASL A
08243 B0 04                     	BCS @Up_Down
08245 0A                        	ASL A
08246 B0 01                     	BCS @Up_Down
08248 60                        	RTS
08249                           @Up_Down:
08249 C8                        	INY
0824A C8                        	INY
0824B                           @B:
0824B C8                        	INY
0824C C8                        	INY
0824D                           @A_Start:
0824D 60                        	RTS
0824E                           .include "src/data/opening.asm"0824E                           TitleScreenLayout:
0824E 20 00 05                  	.db $20, $00, $05
08251 7D 7E 00 80 81            	.db $7d, $7e, $00, $80, $81
08256 20 09 01                  	.db $20, $09, $01
08259 82                        	.db $82
0825A 20 0E 04                  	.db $20, $0e, $04
0825D 83 84 85 86               	.db $83, $84, $85, $86
08261 20 1C 01                  	.db $20, $1c, $01
08264 87                        	.db $87
08265 20 20 0A                  	.db $20, $20, $0a
08268 88 89 00 8A 8B 00 00 00.. 	.db $88, $89, $00, $8a, $8b, $00, $00, $00, $8c, $8d
08272 20 2E 04                  	.db $20, $2e, $04
08275 8E 8F 90 91               	.db $8e, $8f, $90, $91
08279 20 3C 01                  	.db $20, $3c, $01
0827C 92                        	.db $92
0827D 20 40 0A                  	.db $20, $40, $0a
08280 93 94 95 96 97 00 00 00.. 	.db $93, $94, $95, $96, $97, $00, $00, $00, $98, $99
0828A 20 4E 04                  	.db $20, $4e, $04
0828D 8E 9A 9B 9C               	.db $8e, $9a, $9b, $9c
08291 20 56 01                  	.db $20, $56, $01
08294 9D                        	.db $9d
08295 20 5C 01                  	.db $20, $5c, $01
08298 92                        	.db $92
08299 20 60 20                  	.db $20, $60, $20
0829C 9E 9F A0 A1 A2 00 00 00.. 	.db $9e, $9f, $a0, $a1, $a2, $00, $00, $00, $a3, $a4, $a5, $a6, $a7, $00, $8e, $a8
082AC A9 AA 00 AB AC AD AE AF.. 	.db $a9, $aa, $00, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b2
082BC 20 80 20                  	.db $20, $80, $20
082BF B7 B8 B9 BA BB BC BD BE.. 	.db $b7, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $a4, $c0, $c1, $c2, $c3, $c4, $c5
082CF C6 00 C7 C8 C9 CA CB CC.. 	.db $c6, $00, $c7, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d0, $d1, $d2, $d3, $d4
082DF 20 A0 20                  	.db $20, $a0, $20
082E2 D5 D6 D7 D8 D9 DA DB DC.. 	.db $d5, $d6, $d7, $d8, $d9, $da, $db, $dc, $dd, $de, $df, $e0, $e1, $e2, $e3, $e4
082F2 E5 E6 E7 E8 E9 EA EB EC.. 	.db $e5, $e6, $e7, $e8, $e9, $ea, $eb, $ec, $ed, $00, $ee, $ef, $f0, $00, $f1, $f2
08302 20 C1 1F                  	.db $20, $c1, $1f
08305 F3 F4 F5 F6 F7 F8 00 F9.. 	.db $f3, $f4, $f5, $f6, $f7, $f8, $00, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $01, $02
08315 03 04 05 06 07 08 00 09.. 	.db $03, $04, $05, $06, $07, $08, $00, $09, $0a, $0b, $00, $0c, $00, $0d, $0e
08324 20 E1 0E                  	.db $20, $e1, $0e
08327 0F 10 00 00 11 00 12 13.. 	.db $0f, $10, $00, $00, $11, $00, $12, $13, $14, $15, $16, $00, $17, $18
08335 21 07 04                  	.db $21, $07, $04
08338 19 1A 1B 1C               	.db $19, $1a, $1b, $1c
0833C                           
0833C 23 D1 06                  	.db $23, $d1, $06
0833F C0 F0 F0 F0 F0 30         	.db $c0, $f0, $f0, $f0, $f0, $30
08345                           
08345 23 F1 05                  	.db $23, $f1, $05
08348 80 A0 A0 A0 A0            	.db $80, $a0, $a0, $a0, $a0
0834D                           
0834D 23 F8 48 05               	.db $23, $f8, $48, $05
08351                           
08351                           	text $2146, "_starring Iggy Reich"
08351 21                        	.dh $2146
08352 46                        	.dl $2146
08353 14                        	.db +end - +start
08354                           +start
08354 5F 73 74 61 72 72 69 6E.. 	.db "_starring Iggy Reich"
08368                           +end
08368                           
08368                           	text $22ad, "Begin"
08368 22                        	.dh $22ad
08369 AD                        	.dl $22ad
0836A 05                        	.db +end - +start
0836B                           +start
0836B 42 65 67 69 6E            	.db "Begin"
08370                           +end
08370                           	text $22ec, "Options"
08370 22                        	.dh $22ec
08371 EC                        	.dl $22ec
08372 07                        	.db +end - +start
08373                           +start
08373 4F 70 74 69 6F 6E 73      	.db "Options"
0837A                           +end
0837A                           
0837A                           	text $2347, "@2024 Tempo Quill"
0837A 23                        	.dh $2347
0837B 47                        	.dl $2347
0837C 11                        	.db +end - +start
0837D                           +start
0837D 40 32 30 32 34 20 54 65.. 	.db "@2024 Tempo Quill"
0838E                           +end
0838E                           	text $2380, "free to air when sales terminate"
0838E 23                        	.dh $2380
0838F 80                        	.dl $2380
08390 20                        	.db +end - +start
08391                           +start
08391 66 72 65 65 20 74 6F 20.. 	.db "free to air when sales terminate"
083B1                           +end
083B1                           	text_end
083B1 00                        	.db text_end_cmd
083B2                           
083B2                           BeginningText:
083B2                           	text $2142, "_inspired by Doug Tennapel&"
083B2 21                        	.dh $2142
083B3 42                        	.dl $2142
083B4 1B                        	.db +end - +start
083B5                           +start
083B5 5F 69 6E 73 70 69 72 65.. 	.db "_inspired by Doug Tennapel&"
083D0                           +end
083D0                           	text $218b, "CATSCRATCH_"
083D0 21                        	.dh $218b
083D1 8B                        	.dl $218b
083D2 0B                        	.db +end - +start
083D3                           +start
083D3 43 41 54 53 43 52 41 54.. 	.db "CATSCRATCH_"
083DE                           +end
083DE                           	text_end
083DE 00                        	.db text_end_cmd
083DF                           
083DF 00 00 00 00 00 00 00 00.. 	.pad $c000, $00
0C000 00 00 00 00 00 00 00 00.. 	.pad $e000, $00 ; needs to be blank
0E000                           ELSE
0E000                           	.include "src/home/nsf.asm"
0E000                           ENDIF
0E000                           
0E000                           ; bank 03 - sound engine
0E000                           .base $8000
08000                           .include "src/sound.asm"
08000                           .include "src/sound/engine.asm"
08000                           ;
08000                           ; The entire sound engine, entry is located in HomeROM
08000                           ;
08000                           StartProcessingSoundQueue:
08000 A9 FF                     	LDA #$FF
08002 8D 17 40                  	STA JOY2
08005                           
08005 20 17 80                  	JSR ProcessNoiseQueue
08008 20 8E 80                  	JSR ProcessDPCMQueue
0800B 20 DA 80                  	JSR ProcessMusicQueue
0800E                           
0800E                           	; Reset queues
0800E A9 00                     	LDA #$00
08010 85 1A                     	STA zNoiseDrumSFX
08012 85 19                     	STA zDPCMSFX
08014 85 18                     	STA zMusicQueue
08016 60                        	RTS
08017                           
08017                           ;
08017                           ; Noise Channel SFX / Percussion Queue
08017                           ;
08017                           ProcessNoiseQueue:
08017 A5 1A                     	LDA zNoiseDrumSFX
08019 F0 06                     	BEQ ProcessNoiseQueue_None
0801B                           
0801B A2 00                     	LDX #0
0801D 86 06                     	STX zNoiseSFXOffset
0801F F0 09                     	BEQ ProcessNoiseQueue_Part2
08021                           
08021                           ProcessNoiseQueue_None:
08021 A6 16                     	LDX zCurrentNoiseSFX
08023 D0 23                     	BNE ProcessNoiseQueue_Part3
08025 A6 14                     	LDX zCurrentDrum
08027 D0 1F                     	BNE ProcessNoiseQueue_Part3
08029 60                        	RTS
0802A                           
0802A                           ProcessNoiseQueue_Part2:
0802A                           	; start a new sound effect
0802A C9 19                     	CMP #NOISE_SFX
0802C B0 08                     	BCS ProcessNoiseQueue_NotPercussion
0802E                           
0802E 85 14                     	STA zCurrentDrum
08030 A0 00                     	LDY #0
08032 84 16                     	STY zCurrentNoiseSFX
08034 90 06                     	BCC ProcessNoiseQueue_PointerOffset
08036                           
08036                           ProcessNoiseQueue_NotPercussion:
08036 85 16                     	STA zCurrentNoiseSFX
08038 A0 00                     	LDY #0
0803A 84 14                     	STY zCurrentDrum
0803C                           
0803C                           ProcessNoiseQueue_PointerOffset:
0803C A8                        	TAY
0803D 88                        	DEY
0803E                           	; load pointer for us to access
0803E B9 60 87                  	LDA NoiseSFXPointersLo, Y
08041 85 04                     	STA zNoiseIndexPointer
08043 B9 7D 87                  	LDA NoiseSFXPointersHi, Y
08046 85 05                     	STA zNoiseIndexPointer + 1
08048                           
08048                           ProcessNoiseQueue_Part3:
08048                           	; load offset and increment it
08048 A4 06                     	LDY zNoiseSFXOffset
0804A E6 06                     	INC zNoiseSFXOffset
0804C                           	; examine data
0804C B1 04                     	LDA (zNoiseIndexPointer), Y
0804E                           	; 00 = ret
0804E F0 0A                     	BEQ ProcessNoiseQueue_Done
08050                           	; 7e = rest
08050 C9 7E                     	CMP #$7e
08052 F0 39                     	BEQ ProcessNoiseQueue_Exit
08054                           	; 10-7f = patch
08054 29 70                     	AND #$70
08056 D0 16                     	BNE ProcessNoiseQueue_Patch
08058                           	; 00-0f / 80-8f = note
08058 F0 1D                     	BEQ ProcessNoiseQueue_Note
0805A                           
0805A                           ProcessNoiseQueue_Done:
0805A                           	; if it was $00, we're at the end of the data for this sound effect
0805A A2 90                     	LDX #$90
0805C 8E 0C 40                  	STX NOISE_ENV
0805F A2 18                     	LDX #$18
08061 8E 0F 40                  	STX NOISE_HI
08064 A2 00                     	LDX #$00
08066 8E 0E 40                  	STX NOISE_LO
08069 86 16                     	STX zCurrentNoiseSFX
0806B 86 14                     	STX zCurrentDrum
0806D 60                        	RTS
0806E                           
0806E                           ProcessNoiseQueue_Patch:
0806E                           	; apply patch
0806E B1 04                     	LDA (zNoiseIndexPointer), Y
08070 8D 0C 40                  	STA NOISE_ENV
08073 A4 06                     	LDY zNoiseSFXOffset
08075 E6 06                     	INC zNoiseSFXOffset
08077                           
08077                           ProcessNoiseQueue_Note:
08077                           	; apply note
08077 B1 04                     	LDA (zNoiseIndexPointer), Y
08079 C9 7E                     	CMP #$7E
0807B F0 10                     	BEQ ProcessNoiseQueue_Exit
0807D 8D 0E 40                  	STA NOISE_LO
08080 A9 08                     	LDA #$08
08082 8D 0F 40                  	STA NOISE_HI
08085 AD 15 40                  	LDA SND_CHN
08088 09 0F                     	ORA #$0F
0808A 8D 15 40                  	STA SND_CHN
0808D                           
0808D                           ProcessNoiseQueue_Exit:
0808D 60                        	RTS
0808E                           
0808E                           ;
0808E                           ; DPCM Channel SFX / Percussion Queue
0808E                           ;
0808E                           ProcessDPCMQueue:
0808E A5 19                     	LDA zDPCMSFX
08090 D0 1B                     	BNE ProcessDPCMQueue_Part2
08092                           
08092 A5 15                     	LDA zCurrentDPCMSFX
08094 D0 06                     	BNE ProcessDPCMQueue_SoundCheck
08096                           
08096 AD 1C 02                  	LDA iCurrentDPCMOffset
08099 F0 08                     	BEQ ProcessDPCMQueue_None
0809B 60                        	RTS
0809C                           
0809C                           ProcessDPCMQueue_SoundCheck:
0809C AD 15 40                  	LDA SND_CHN
0809F 29 10                     	AND #$10
080A1 D0 09                     	BNE ProcessDPCMQueue_Exit
080A3                           
080A3                           ProcessDPCMQueue_None:
080A3 A9 00                     	LDA #$00
080A5 85 15                     	STA zCurrentDPCMSFX
080A7 A9 0F                     	LDA #%00001111
080A9 8D 15 40                  	STA SND_CHN
080AC                           
080AC                           ProcessDPCMQueue_Exit:
080AC 60                        	RTS
080AD                           
080AD                           ProcessDPCMQueue_Part2:
080AD 85 15                     	STA zCurrentDPCMSFX
080AF A8                        	TAY
080B0 88                        	DEY
080B1                           
080B1 B9 D3 88                  	LDA DMCBankTable, Y
080B4                           IFNDEF NSF_FILE
080B4 8D 16 51                  	STA MMC5_PRGBankSwitch4
080B7                           ELSE
080B7                           	ASL A
080B7                           	STA NSF_PRGBank4
080B7                           	ORA #1
080B7                           	STA NSF_PRGBank5
080B7                           ENDIF
080B7                           
080B7 B9 F0 88                  	LDA DMCPitchTable, Y
080BA 8D 10 40                  	STA DPCM_ENV
080BD                           
080BD B9 99 88                  	LDA DMCStartTable, Y
080C0 8D 12 40                  	STA DPCM_OFFSET
080C3 B9 B6 88                  	LDA DMCLengthTable, Y
080C6 8D 13 40                  	STA DPCM_SIZE
080C9 A9 0F                     	LDA #%00001111
080CB 8D 15 40                  	STA SND_CHN
080CE A9 1F                     	LDA #%00011111
080D0 8D 15 40                  	STA SND_CHN
080D3 60                        	RTS
080D4                           
080D4                           ProcessMusicQueue_ThenReadNoteData:
080D4 4C F0 81                  	JMP ProcessMusicQueue_ReadNoteData
080D7                           
080D7                           ProcessMusicQueue_StopMusic:
080D7 4C 21 82                  	JMP StopMusic
080DA                           
080DA                           ProcessMusicQueue:
080DA                           	; start by checking for no music
080DA A4 18                     	LDY zMusicQueue
080DC 98                        	TYA
080DD C8                        	INY
080DE F0 F7                     	BEQ ProcessMusicQueue_StopMusic
080E0                           
080E0                           	; if zMusicQueue != 0, branch
080E0 A5 18                     	LDA zMusicQueue
080E2 D0 05                     	BNE ProcessMusicQueue_MusicQueue1
080E4                           
080E4                           	; if any music is playing, read note data
080E4                           	; else return
080E4 A5 13                     	LDA iCurrentMusic
080E6 D0 EC                     	BNE ProcessMusicQueue_ThenReadNoteData
080E8 60                        	RTS
080E9                           
080E9                           ProcessMusicQueue_MusicQueue1:
080E9                           	; zMusicQueue != 0, initialize
080E9 A5 13                     	LDA iCurrentMusic
080EB 85 0F                     	STA zMusicStack
080ED 20 21 82                  	JSR StopMusic
080F0 A4 18                     	LDY zMusicQueue
080F2 84 13                     	STY iCurrentMusic
080F4 B9 B2 86                  	LDA MusicStackPermission, Y
080F7 D0 04                     	BNE ProcessMusicQueue_ReadFirstPointer
080F9                           
080F9 A9 FF                     	LDA #MUSIC_NONE
080FB 85 0F                     	STA zMusicStack
080FD                           
080FD                           ProcessMusicQueue_ReadFirstPointer:
080FD 88                        	DEY
080FE B9 B0 86                  	LDA SongBanks, Y
08101                           IFNDEF NSF_FILE
08101 85 20                     	STA zMusicBank
08103 8D 15 51                  	STA MMC5_PRGBankSwitch3
08106                           ELSE
08106                           	JSR SetMusicBank
08106                           ENDIF
08106                           	; store the amount of channels
08106 B9 5D 87                  	LDA MusicChannelStack, Y
08109 85 11                     	STA zMusicChannelCount
0810B                           	; starting point
0810B B9 00 A2                  	LDA MusicPointersFirstPart, Y
0810E 8D 15 02                  	STA iMusicStartPoint
08111                           	; ending point
08111 B9 40 A2                  	LDA MusicPointersEndPart, Y
08114 18                        	CLC
08115 69 02                     	ADC #$02
08117 8D 16 02                  	STA iMusicEndPoint
0811A                           	; loop point
0811A B9 20 A2                  	LDA MusicPointersLoopPart, Y
0811D 8D 17 02                  	STA iMusicLoopPoint
08120                           	; store the beginning offset
08120 AD 15 02                  	LDA iMusicStartPoint
08123                           
08123                           ProcessMusicQueue_SetCurrentPart:
08123 8D 0F 02                  	STA iCurrentMusicOffset
08126                           
08126                           ProcessMusicQueue_SetNextPart:
08126                           	; Y = music offset + 1, check if we reached the end
08126 EE 0F 02                  	INC iCurrentMusicOffset
08129 AC 0F 02                  	LDY iCurrentMusicOffset
0812C CC 16 02                  	CPY iMusicEndPoint
0812F D0 08                     	BNE ProcessMusicQueue_ReadHeader
08131                           
08131                           	; reset offset to loop point if we reached the end
08131 AD 17 02                  	LDA iMusicLoopPoint
08134 D0 ED                     	BNE ProcessMusicQueue_SetCurrentPart
08136                           
08136                           	; we're here if there's no loop, stop the music
08136 4C 21 82                  	JMP StopMusic
08139                           
08139                           ProcessMusicQueue_ReadHeader:
08139                           	; nab offset, X = channel amount 3-5
08139 A6 11                     	LDX zMusicChannelCount
0813B B9 FF 9F                  	LDA MusicPartPointers - 1, Y
0813E A8                        	TAY
0813F                           	; header data
0813F                           	; byte 1 - base note length
0813F B9 00 A1                  	LDA MusicHeaders, Y
08142 85 22                     	STA zTempo
08144                           	; byte 2-3 - music pointer, pulse 2
08144 B9 01 A1                  	LDA MusicHeaders + 1, Y
08147 85 00                     	STA zCurrentMusicPointer
08149 8D 01 02                  	STA iMusicPulse2BigPointer + 1
0814C B9 02 A1                  	LDA MusicHeaders + 2, Y
0814F 85 01                     	STA zCurrentMusicPointer + 1
08151 8D 00 02                  	STA iMusicPulse2BigPointer
08154 CA                        	DEX
08155                           	; byte 5 - pulse 1 offset
08155 B9 04 A1                  	LDA MusicHeaders + 4, Y
08158 18                        	CLC
08159 6D 01 02                  	ADC iMusicPulse2BigPointer + 1
0815C 8D 03 02                  	STA iMusicPulse1BigPointer + 1
0815F A9 00                     	LDA #0
08161 6D 00 02                  	ADC iMusicPulse2BigPointer
08164 8D 02 02                  	STA iMusicPulse1BigPointer
08167 CA                        	DEX
08168                           	; byte 4 - hill offset
08168 B9 03 A1                  	LDA MusicHeaders + 3, Y
0816B 18                        	CLC
0816C 6D 03 02                  	ADC iMusicPulse1BigPointer + 1
0816F 8D 05 02                  	STA iMusicHillBigPointer + 1
08172 A9 00                     	LDA #0
08174 6D 02 02                  	ADC iMusicPulse1BigPointer
08177 8D 04 02                  	STA iMusicHillBigPointer
0817A CA                        	DEX
0817B D0 10                     	BNE ProcessMusicQueue_ReadHeaderNoise
0817D                           
0817D A9 00                     	LDA #0
0817F 8D 07 02                  	STA iMusicNoiseBigPointer + 1
08182 8D 06 02                  	STA iMusicNoiseBigPointer
08185 8D 09 02                  	STA iMusicDPCMBigPointer + 1
08188 8D 08 02                  	STA iMusicDPCMBigPointer
0818B F0 31                     	BEQ ProcessMusicQueue_DefaultNotelength
0818D                           
0818D                           ProcessMusicQueue_ReadHeaderNoise:
0818D                           	; byte 6 - noise offset
0818D B9 05 A1                  	LDA MusicHeaders + 5, Y
08190 18                        	CLC
08191 6D 05 02                  	ADC iMusicHillBigPointer + 1
08194 8D 07 02                  	STA iMusicNoiseBigPointer + 1
08197 A9 00                     	LDA #0
08199 6D 04 02                  	ADC iMusicHillBigPointer
0819C 8D 06 02                  	STA iMusicNoiseBigPointer
0819F CA                        	DEX
081A0 D0 0A                     	BNE ProcessMusicQueue_ReadHeaderDPCM
081A2                           
081A2 A9 00                     	LDA #0
081A4 8D 09 02                  	STA iMusicDPCMBigPointer + 1
081A7 8D 08 02                  	STA iMusicDPCMBigPointer
081AA F0 12                     	BEQ ProcessMusicQueue_DefaultNotelength
081AC                           
081AC                           ProcessMusicQueue_ReadHeaderDPCM:
081AC                           	; byte 7 - DPCM
081AC B9 06 A1                  	LDA MusicHeaders + 6, Y
081AF 18                        	CLC
081B0 6D 07 02                  	ADC iMusicNoiseBigPointer + 1
081B3 8D 09 02                  	STA iMusicDPCMBigPointer + 1
081B6 A9 00                     	LDA #0
081B8 6D 06 02                  	ADC iMusicNoiseBigPointer
081BB 8D 08 02                  	STA iMusicDPCMBigPointer
081BE                           
081BE                           ProcessMusicQueue_DefaultNotelength:
081BE A9 01                     	LDA #$01
081C0 8D 1D 02                  	STA iMusicPulse2NoteLength
081C3 8D 1E 02                  	STA iMusicPulse1NoteLength
081C6 8D 1F 02                  	STA iMusicHillNoteLength
081C9 8D 20 02                  	STA iMusicNoiseNoteLength
081CC 8D 21 02                  	STA iMusicDPCMNoteLength
081CF 85 12                     	STA zDPCMNoteRatioLength
081D1                           
081D1                           	; initialize offsets / fractions
081D1 A9 00                     	LDA #$00
081D3 85 14                     	STA zCurrentDrum
081D5 8D 18 02                  	STA iCurrentPulse2Offset
081D8 8D 1A 02                  	STA iCurrentHillOffset
081DB 8D 19 02                  	STA iCurrentPulse1Offset
081DE 8D 1B 02                  	STA iCurrentNoiseOffset
081E1 8D 1C 02                  	STA iCurrentDPCMOffset
081E4 85 08                     	STA zMusicPulse2NoteLengthFraction
081E6 85 07                     	STA zMusicPulse1NoteLengthFraction
081E8 85 09                     	STA zMusicHillNoteLengthFraction
081EA 85 0A                     	STA zMusicNoiseNoteLengthFraction
081EC 85 0B                     	STA zMusicDPCMNoteLengthFraction
081EE 85 21                     	STA zSweep
081F0                           
081F0                           ProcessMusicQueue_ReadNoteData:
081F0                           	; check note length
081F0                           	; if 0, start a new note
081F0                           	; else, skip to updating
081F0 CE 1D 02                  	DEC iMusicPulse2NoteLength
081F3 F0 03                     	BEQ ProcessMusicQueue_Square2EndOfNote
081F5 4C A6 82                  	JMP ProcessMusicQueue_Square2SustainNote
081F8                           
081F8                           ProcessMusicQueue_Square2EndOfNote:
081F8 AD 00 02                  	LDA iMusicPulse2BigPointer
081FB 85 01                     	STA zCurrentMusicPointer + 1
081FD AD 01 02                  	LDA iMusicPulse2BigPointer + 1
08200 85 00                     	STA zCurrentMusicPointer
08202                           	; new note, read next byte
08202 AC 18 02                  	LDY iCurrentPulse2Offset
08205 EE 18 02                  	INC iCurrentPulse2Offset
08208 B1 00                     	LDA (zCurrentMusicPointer), Y
0820A                           	; 0 = ret
0820A                           	; + = note
0820A                           	; - = instrument / note length
0820A F0 05                     	BEQ ProcessMusicQueue_EndOfSegment
0820C                           
0820C 30 5A                     	BMI ProcessMusicQueue_Square2Patch
0820E 4C 7F 82                  	JMP ProcessMusicQueue_Square2Note
08211                           
08211                           ProcessMusicQueue_EndOfSegment:
08211                           ; 0 = ret
08211                           	; check which song's playing
08211                           	; iCurrentMusic always loops
08211 A4 13                     	LDY iCurrentMusic
08213 B9 B2 86                  	LDA MusicStackPermission, Y
08216 F0 4D                     	BEQ ProcessMusicQueue_ThenSetNextPart
08218                           
08218                           	; non-zero value, song meets permission, replay last song
08218 A5 0F                     	LDA zMusicStack
0821A F0 05                     	BEQ StopMusic
0821C                           
0821C                           	; zMusicStack != 0
0821C 85 18                     	STA zMusicQueue
0821E 4C E9 80                  	JMP ProcessMusicQueue_MusicQueue1
08221                           
08221                           StopMusic:
08221                           ; ways to access this routine:
08221                           ;	zMusicStack = 0, fallthrough
08221                           ;	iCurrentMusic does not meet logic when fanfare ends
08221                           ;	Reaching the end-offset without a loop
08221                           ;	zMusicQueue is $80
08221                           ;	initializing the sound engine for a new song
08221 A9 10                     	LDA #$10
08223 8D 00 40                  	STA SQ1_ENV
08226 A9 00                     	LDA #$00
08228 85 13                     	STA iCurrentMusic
0822A 8D 03 40                  	STA SQ1_HI
0822D 8D 02 40                  	STA SQ1_LO
08230 8D 01 40                  	STA SQ1_SWEEP
08233                           
08233 A9 10                     	LDA #$10
08235 8D 04 40                  	STA SQ2_ENV
08238 A9 00                     	LDA #$00
0823A 8D 07 40                  	STA SQ2_HI
0823D 8D 06 40                  	STA SQ2_LO
08240 8D 05 40                  	STA SQ2_SWEEP
08243                           
08243 8D 08 40                  	STA TRI_LINEAR
08246 8D 0B 40                  	STA TRI_HI
08249 8D 0A 40                  	STA TRI_LO
0824C                           
0824C                           ClearChannelNoise:
0824C A5 16                     	LDA zCurrentNoiseSFX
0824E D0 0D                     	BNE ClearChannelDPCM
08250 85 14                     	STA zCurrentDrum
08252 8D 0F 40                  	STA NOISE_HI
08255 8D 0E 40                  	STA NOISE_LO
08258 A9 10                     	LDA #$10
0825A 8D 0C 40                  	STA NOISE_ENV
0825D                           
0825D                           ClearChannelDPCM:
0825D A5 15                     	LDA zCurrentDPCMSFX
0825F D0 03                     	BNE ClearChannelDone
08261 4C B6 84                  	JMP ProcessMusicQueue_DPCMDisable
08264                           
08264                           ClearChannelDone:
08264 60                        	RTS
08265                           
08265                           ProcessMusicQueue_ThenSetNextPart:
08265                           ; any song able to move their pointer offset
08265 4C 26 81                  	JMP ProcessMusicQueue_SetNextPart
08268                           
08268                           ProcessMusicQueue_Square2Patch:
08268                           ; - = instrument / note length
08268                           	; instrument
08268 AA                        	TAX
08269 29 F0                     	AND #$F0
0826B 85 0D                     	STA zPulse2Ins
0826D                           	; note length
0826D 8A                        	TXA
0826E 20 CD 85                  	JSR ProcessMusicQueue_PatchNoteLength
08271                           
08271 8D 10 02                  	STA iPulse2NoteLength
08274 8C 0A 02                  	STY iMusicPulse2NoteSubFrames
08277                           
08277                           	; next byte, allows higher notes
08277 AC 18 02                  	LDY iCurrentPulse2Offset
0827A EE 18 02                  	INC iCurrentPulse2Offset
0827D B1 00                     	LDA (zCurrentMusicPointer), Y
0827F                           
0827F                           ProcessMusicQueue_Square2Note:
0827F                           ; + = note
0827F                           
0827F                           	; We're clear! Play the note!
0827F A2 04                     	LDX #$04
08281 20 6B 86                  	JSR PlayNote
08284 A8                        	TAY
08285 F0 06                     	BEQ ProcessMusicQueue_Square2UpdateNoteOffset
08287                           
08287 AD 10 02                  	LDA iPulse2NoteLength
0828A 20 E3 85                  	JSR SetInstrumentStartOffset
0828D                           
0828D                           ProcessMusicQueue_Square2UpdateNoteOffset:
0828D                           	; set instruemnt offset, init sweep/gain
0828D 8D 22 02                  	STA iMusicPulse2InstrumentOffset
08290                           
08290                           ; Sets volume/sweep on Square 2 channel
08290                           ;
08290                           ; Input
08290                           ;   X = duty/volume/envelope
08290                           ;   Y = sweep
08290 8E 04 40                  	STX SQ2_ENV
08293 8C 05 40                  	STY SQ2_SWEEP
08296                           	; set note length
08296 AD 0A 02                  	LDA iMusicPulse2NoteSubFrames
08299 18                        	CLC
0829A 65 08                     	ADC zMusicPulse2NoteLengthFraction
0829C 85 08                     	STA zMusicPulse2NoteLengthFraction
0829E AD 10 02                  	LDA iPulse2NoteLength
082A1 69 00                     	ADC #0
082A3 8D 1D 02                  	STA iMusicPulse2NoteLength
082A6                           
082A6                           ProcessMusicQueue_Square2SustainNote:
082A6                           	; note update
082A6                           
082A6                           ProcessMusicQueue_LoadSquare2InstrumentOffset:
082A6                           	; load isntrument offset
082A6 AC 22 02                  	LDY iMusicPulse2InstrumentOffset
082A9 F0 03                     	BEQ ProcessMusicQueue_LoadSquare2Instrument
082AB                           
082AB CE 22 02                  	DEC iMusicPulse2InstrumentOffset
082AE                           
082AE                           ProcessMusicQueue_LoadSquare2Instrument:
082AE                           	; load instrument no.
082AE AD 10 02                  	LDA iPulse2NoteLength
082B1 A6 0D                     	LDX zPulse2Ins
082B3 20 F2 85                  	JSR LoadSquareInstrumentDVE
082B6                           
082B6                           	; update
082B6 8D 04 40                  	STA SQ2_ENV
082B9 A2 7F                     	LDX #$7F
082BB 8E 05 40                  	STX SQ2_SWEEP
082BE                           
082BE                           ProcessMusicQueue_Square1:
082BE                           ; if note length != 0, sustain note
082BE CE 1E 02                  	DEC iMusicPulse1NoteLength
082C1 D0 62                     	BNE ProcessMusicQueue_Square1SustainNote
082C3                           
082C3                           ; else we start here instead
082C3                           ; load byte offset / data
082C3 AD 02 02                  	LDA iMusicPulse1BigPointer
082C6 85 01                     	STA zCurrentMusicPointer + 1
082C8 AD 03 02                  	LDA iMusicPulse1BigPointer + 1
082CB 85 00                     	STA zCurrentMusicPointer
082CD                           ProcessMusicQueue_Square1Patch:
082CD                           	; 0 - set sweep to $94
082CD                           	; - - instrument / note length
082CD                           	; + - note
082CD AC 19 02                  	LDY iCurrentPulse1Offset
082D0 EE 19 02                  	INC iCurrentPulse1Offset
082D3 B1 00                     	LDA (zCurrentMusicPointer), Y
082D5 10 17                     	BPL ProcessMusicQueue_Square1AfterPatch
082D7                           
082D7                           	; - - instrument / note length
082D7                           	; instrument
082D7 AA                        	TAX
082D8 29 F0                     	AND #$F0
082DA 85 0E                     	STA zPulse1Ins
082DC                           	; note length
082DC 8A                        	TXA
082DD 20 CD 85                  	JSR ProcessMusicQueue_PatchNoteLength
082E0                           
082E0 8D 11 02                  	STA iPulse1NoteLength
082E3 8C 0B 02                  	STY iMusicPulse1NoteSubFrames
082E6                           
082E6                           	; next byte, allows higher notes
082E6 AC 19 02                  	LDY iCurrentPulse1Offset
082E9 EE 19 02                  	INC iCurrentPulse1Offset
082EC B1 00                     	LDA (zCurrentMusicPointer), Y
082EE                           
082EE                           ProcessMusicQueue_Square1AfterPatch:
082EE                           ; + = note
082EE A8                        	TAY
082EF D0 10                     	BNE ProcessMusicQueue_Square1Note
082F1                           
082F1 A5 21                     	LDA zSweep
082F3 F0 06                     	BEQ ProcessMusicQueue_HandleSweep
082F5                           
082F5 A9 00                     	LDA #0
082F7 85 21                     	STA zSweep
082F9 F0 D2                     	BEQ ProcessMusicQueue_Square1Patch
082FB                           
082FB                           ProcessMusicQueue_HandleSweep:
082FB                           	; 0 - set sweep to $8C
082FB A9 89                     	LDA #$89
082FD 85 21                     	STA zSweep
082FF D0 CC                     	BNE ProcessMusicQueue_Square1Patch
08301                           
08301                           ProcessMusicQueue_Square1Note:
08301                           	; We're clear! Play the note!
08301 20 69 86                  	JSR PlaySquare1Note
08304                           
08304 F0 06                     	BEQ ProcessMusicQueue_Square1UpdateNoteOffset
08306 AD 11 02                  	LDA iPulse1NoteLength
08309 20 E3 85                  	JSR SetInstrumentStartOffset
0830C                           
0830C                           ProcessMusicQueue_Square1UpdateNoteOffset:
0830C                           	; set instruemnt offset, init sweep/gain
0830C 8D 23 02                  	STA iMusicPulse1InstrumentOffset
0830F                           ; Sets volume/sweep on Square 1 channel
0830F                           ; Input
0830F                           ;   X = duty/volume/envelope
0830F                           ;   Y = sweep
0830F 8C 01 40                  	STY SQ1_SWEEP
08312 8E 00 40                  	STX SQ1_ENV
08315                           	; set note length
08315 AD 0B 02                  	LDA iMusicPulse1NoteSubFrames
08318 18                        	CLC
08319 65 07                     	ADC zMusicPulse1NoteLengthFraction
0831B 85 07                     	STA zMusicPulse1NoteLengthFraction
0831D AD 11 02                  	LDA iPulse1NoteLength
08320 69 00                     	ADC #0
08322 8D 1E 02                  	STA iMusicPulse1NoteLength
08325                           
08325                           ProcessMusicQueue_Square1SustainNote:
08325                           	; note update
08325                           	; load isntrument offset
08325 AC 23 02                  	LDY iMusicPulse1InstrumentOffset
08328 F0 03                     	BEQ ProcessMusicQueue_Square1AfterDecrementInstrumentOffset
0832A                           
0832A CE 23 02                  	DEC iMusicPulse1InstrumentOffset
0832D                           
0832D                           ProcessMusicQueue_Square1AfterDecrementInstrumentOffset:
0832D                           	; load instrument no.
0832D AD 11 02                  	LDA iPulse1NoteLength
08330 A6 0E                     	LDX zPulse1Ins
08332 20 F2 85                  	JSR LoadSquareInstrumentDVE
08335                           
08335                           	; update
08335 8D 00 40                  	STA SQ1_ENV
08338 A5 21                     	LDA zSweep
0833A D0 02                     	BNE ProcessMusicQueue_Square1Sweep
0833C                           
0833C A9 7F                     	LDA #$7F
0833E                           
0833E                           ProcessMusicQueue_Square1Sweep:
0833E 8D 01 40                  	STA SQ1_SWEEP
08341                           
08341                           ProcessMusicQueue_Triangle:
08341                           	; if offset = 0, skip to next channel
08341                           
08341 AD 04 02                  	LDA iMusicHillBigPointer
08344 0D 05 02                  	ORA iMusicHillBigPointer + 1
08347 D0 03                     	BNE ProcessMusicQueue_TriangleStart
08349 4C C4 83                  	JMP ProcessMusicQueue_Noise
0834C                           
0834C                           ProcessMusicQueue_TriangleStart:
0834C AD 04 02                  	LDA iMusicHillBigPointer
0834F 85 01                     	STA zCurrentMusicPointer + 1
08351 AD 05 02                  	LDA iMusicHillBigPointer + 1
08354 85 00                     	STA zCurrentMusicPointer
08356                           
08356                           	; if note length doesn't reach 0, skip to next channel
08356 CE 1F 02                  	DEC iMusicHillNoteLength
08359 F0 03                     	BEQ ProcessMusicQueue_TriangleByte
0835B 4C C4 83                  	JMP ProcessMusicQueue_Noise
0835E                           
0835E                           ProcessMusicQueue_TriangleByte:
0835E                           	; next byte
0835E                           	; 0 = loop
0835E                           	; + = note length
0835E                           	; - = note
0835E AC 1A 02                  	LDY iCurrentHillOffset
08361 EE 1A 02                  	INC iCurrentHillOffset
08364 B1 00                     	LDA (zCurrentMusicPointer), Y
08366 F0 56                     	BEQ ProcessMusicQueue_TriangleLoopSegment
08368                           
08368 10 1E                     	BPL ProcessMusicQueue_TriangleNote
0836A                           
0836A                           	; - = note length
0836A                           	; instrument
0836A AA                        	TAX
0836B 29 F0                     	AND #$F0
0836D 85 0C                     	STA zHillIns
0836F                           
0836F                           ProcessMusicQueue_TriangleNoteLength:
0836F                           	; note length
0836F 8A                        	TXA
08370 20 CD 85                  	JSR ProcessMusicQueue_PatchNoteLength
08373                           
08373 8D 12 02                  	STA iHillNoteLength
08376 8C 0C 02                  	STY iMusicHillNoteSubFrames
08379 A9 1F                     	LDA #$1F
0837B 8D 08 40                  	STA TRI_LINEAR
0837E                           
0837E                           	; next byte is treated like a note, or mute
0837E AC 1A 02                  	LDY iCurrentHillOffset
08381 EE 1A 02                  	INC iCurrentHillOffset
08384 B1 00                     	LDA (zCurrentMusicPointer), Y
08386 F0 30                     	BEQ ProcessMusicQueue_TriangleSetLength
08388                           
08388                           ProcessMusicQueue_TriangleNote:
08388                           	; - = note
08388 A2 08                     	LDX #$08
0838A 20 6B 86                  	JSR PlayNote
0838D                           	; iMusicHillNoteLength:
0838D AD 0C 02                  	LDA iMusicHillNoteSubFrames
08390 18                        	CLC
08391 65 09                     	ADC zMusicHillNoteLengthFraction
08393 85 09                     	STA zMusicHillNoteLengthFraction
08395 AD 12 02                  	LDA iHillNoteLength
08398 69 00                     	ADC #0
0839A 8D 1F 02                  	STA iMusicHillNoteLength
0839D 30 17                     	BMI ProcessMusicQueue_TriangleMax
0839F                           
0839F A8                        	TAY
083A0 C0 38                     	CPY #$38
083A2 B0 12                     	BCS ProcessMusicQueue_TriangleMax
083A4                           
083A4 A5 0C                     	LDA zHillIns
083A6 C9 F0                     	CMP #$F0
083A8 B0 0C                     	BCS ProcessMusicQueue_TriangleMax
083AA C9 B0                     	CMP #$B0
083AC B9 EB 86                  	LDA Triangle15Outta16Lengths, Y
083AF 90 07                     	BCC ProcessMusicQueue_TriangleSetLength
083B1 B9 24 87                  	LDA Triangle4Outta7Lengths, Y
083B4 B0 02                     	BCS ProcessMusicQueue_TriangleSetLength
083B6                           
083B6                           ProcessMusicQueue_TriangleMax:
083B6 A9 7F                     	LDA #$7F
083B8                           
083B8                           ProcessMusicQueue_TriangleSetLength:
083B8 8D 08 40                  	STA TRI_LINEAR
083BB 4C C4 83                  	JMP ProcessMusicQueue_Noise
083BE                           
083BE                           ProcessMusicQueue_TriangleLoopSegment:
083BE 8D 1A 02                  	STA iCurrentHillOffset
083C1 4C 5E 83                  	JMP ProcessMusicQueue_TriangleByte
083C4                           
083C4                           ProcessMusicQueue_Noise:
083C4                           	; if offset = 0, skip to next channel
083C4 AD 06 02                  	LDA iMusicNoiseBigPointer
083C7 F0 47                     	BEQ ProcessMusicQueue_ThenNoiseEnd
083C9 85 01                     	STA zCurrentMusicPointer + 1
083CB AD 07 02                  	LDA iMusicNoiseBigPointer + 1
083CE 85 00                     	STA zCurrentMusicPointer
083D0                           
083D0                           	; if note length doesn't reach 0, skip to next channel
083D0 CE 20 02                  	DEC iMusicNoiseNoteLength
083D3 D0 3B                     	BNE ProcessMusicQueue_ThenNoiseEnd
083D5                           
083D5                           ProcessMusicQueue_NoiseByte:
083D5                           ; next byte
083D5                           	; 0 = loop
083D5                           	; - = note length
083D5                           	; + = note
083D5 AC 1B 02                  	LDY iCurrentNoiseOffset
083D8 EE 1B 02                  	INC iCurrentNoiseOffset
083DB B1 00                     	LDA (zCurrentMusicPointer), Y
083DD F0 34                     	BEQ ProcessMusicQueue_NoiseLoopSegment
083DF                           
083DF 10 13                     	BPL ProcessMusicQueue_NoiseNote
083E1                           
083E1                           	; - = note length
083E1 20 CD 85                  	JSR ProcessMusicQueue_PatchNoteLength
083E4                           
083E4 8D 13 02                  	STA iNoiseNoteLength
083E7 8C 0D 02                  	STY iMusicNoiseNoteSubFrames
083EA                           	; next byte - later entries allowed
083EA AC 1B 02                  	LDY iCurrentNoiseOffset
083ED EE 1B 02                  	INC iCurrentNoiseOffset
083F0 B1 00                     	LDA (zCurrentMusicPointer), Y
083F2 F0 1F                     	BEQ ProcessMusicQueue_NoiseLoopSegment
083F4                           
083F4                           ProcessMusicQueue_NoiseNote:
083F4                           ; + = note
083F4                           ; NOTE - only $02-$10 are valid
083F4                           ; $32 - $38 are treated as sound effects
083F4                           ; $01 is a rest note
083F4 A4 16                     	LDY zCurrentNoiseSFX
083F6 D0 08                     	BNE ProcessMusicQueue_NoiseLengthCarry
083F8 4A                        	LSR A
083F9 F0 05                     	BEQ ProcessMusicQueue_NoiseLengthCarry
083FB                           
083FB 85 1A                     	STA zNoiseDrumSFX
083FD 20 17 80                  	JSR ProcessNoiseQueue
08400                           
08400                           ProcessMusicQueue_NoiseLengthCarry:
08400 AD 0D 02                  	LDA iMusicNoiseNoteSubFrames
08403 18                        	CLC
08404 65 0A                     	ADC zMusicNoiseNoteLengthFraction
08406 85 0A                     	STA zMusicNoiseNoteLengthFraction
08408 AD 13 02                  	LDA iNoiseNoteLength
0840B 69 00                     	ADC #0
0840D 8D 20 02                  	STA iMusicNoiseNoteLength
08410                           
08410                           ProcessMusicQueue_ThenNoiseEnd:
08410 4C 19 84                  	JMP ProcessMusicQueue_DPCM
08413                           
08413                           ProcessMusicQueue_NoiseLoopSegment:
08413                           ; 0 = loop
08413 8D 1B 02                  	STA iCurrentNoiseOffset
08416 4C D5 83                  	JMP ProcessMusicQueue_NoiseByte
08419                           
08419                           ProcessMusicQueue_DPCM:
08419                           	; if offset = 0, end
08419 AD 08 02                  	LDA iMusicDPCMBigPointer
0841C D0 03                     	BNE ProcessMusicQueue_DPCMlength
0841E 4C B2 84                  	JMP ProcessMusicQueue_DPCMEnd
08421                           
08421                           ProcessMusicQueue_DPCMlength:
08421 85 01                     	STA zCurrentMusicPointer + 1
08423 AD 09 02                  	LDA iMusicDPCMBigPointer + 1
08426 85 00                     	STA zCurrentMusicPointer
08428                           	; if note length reaches 0, read sample music data
08428 CE 21 02                  	DEC iMusicDPCMNoteLength
0842B F0 1D                     	BEQ ProcessMusicQueue_DPCMByte
0842D                           	; note cuts off in advance
0842D A5 12                     	LDA zDPCMNoteRatioLength
0842F F0 18                     	BEQ ProcessMusicQueue_DPCMExit11
08431 C6 12                     	DEC zDPCMNoteRatioLength
08433 D0 14                     	BNE ProcessMusicQueue_DPCMExit11
08435                           
08435                           	; if note length ratio remains non-zero, check for sound effects
08435 A5 15                     	LDA zCurrentDPCMSFX
08437 D0 10                     	BNE ProcessMusicQueue_DPCMExit11
08439                           	; Disable - no sound effects playing
08439 A2 0F                     	LDX #%00001111
0843B 8E 15 40                  	STX SND_CHN
0843E A2 00                     	LDX #0
08440 8E 10 40                  	STX DPCM_ENV
08443 8E 12 40                  	STX DPCM_OFFSET
08446 8E 13 40                  	STX DPCM_SIZE
08449                           ProcessMusicQueue_DPCMExit11:
08449 60                        	RTS
0844A                           
0844A                           ProcessMusicQueue_DPCMByte:
0844A                           ; next byte
0844A                           	; 0 = loop
0844A                           	; - = note length
0844A                           	; + = note
0844A AC 1C 02                  	LDY iCurrentDPCMOffset
0844D EE 1C 02                  	INC iCurrentDPCMOffset
08450 B1 00                     	LDA (zCurrentMusicPointer), Y
08452 D0 03                     	BNE ProcessMusicQueue_DPCMNotLoop
08454 4C C7 84                  	JMP ProcessMusicQueue_DPCMLoopSegment
08457                           
08457                           ProcessMusicQueue_DPCMNotLoop:
08457 10 13                     	BPL ProcessMusicQueue_DPCMNote
08459                           
08459                           	; - = note length
08459 20 CD 85                  	JSR ProcessMusicQueue_PatchNoteLength
0845C                           
0845C                           	; next byte - later entries allowed
0845C 8D 14 02                  	STA iDPCMNoteLength
0845F 8C 0E 02                  	STY iMusicDPCMNoteSubFrames
08462                           
08462 AC 1C 02                  	LDY iCurrentDPCMOffset
08465 EE 1C 02                  	INC iCurrentDPCMOffset
08468 B1 00                     	LDA (zCurrentMusicPointer), Y
0846A F0 5B                     	BEQ ProcessMusicQueue_DPCMLoopSegment
0846C                           
0846C                           ProcessMusicQueue_DPCMNote:
0846C                           ; check for sound effects before playing a note
0846C A6 15                     	LDX zCurrentDPCMSFX
0846E D0 24                     	BNE ProcessMusicQueue_DPCMSFXExit
08470                           
08470 4A                        	LSR A
08471 A8                        	TAY
08472                           	; get octave bank
08472 B9 8D 85                  	LDA DPCMSampleBanks, Y
08475                           IFNDEF NSF_FILE
08475 8D 16 51                  	STA MMC5_PRGBankSwitch4
08478                           ELSE
08478                           	ASL A
08478                           	STA NSF_PRGBank4
08478                           	ORA #1
08478                           	STA NSF_PRGBank5
08478                           ENDIF
08478                           	; pitch
08478 B9 CD 84                  	LDA DMCSamplePitchTable, Y
0847B 8D 10 40                  	STA DPCM_ENV
0847E                           	; address
0847E B9 0D 85                  	LDA DMCSamplePointers, Y
08481 8D 12 40                  	STA DPCM_OFFSET
08484                           	; length
08484 B9 4D 85                  	LDA DMCSampleLengths, Y
08487 8D 13 40                  	STA DPCM_SIZE
0848A                           
0848A                           	; mixer
0848A A2 0F                     	LDX #%00001111
0848C 8E 15 40                  	STX SND_CHN
0848F A9 1F                     	LDA #%00011111
08491 8D 15 40                  	STA SND_CHN
08494                           
08494                           ProcessMusicQueue_DPCMSFXExit:
08494 AD 0E 02                  	LDA iMusicDPCMNoteSubFrames
08497 18                        	CLC
08498 65 0B                     	ADC zMusicDPCMNoteLengthFraction
0849A 85 0B                     	STA zMusicDPCMNoteLengthFraction
0849C AD 14 02                  	LDA iDPCMNoteLength
0849F 69 00                     	ADC #0
084A1 8D 21 02                  	STA iMusicDPCMNoteLength
084A4 A2 F0                     	LDX #$F0 ; pitch lasts 15 / 16 frames rounded down
084A6 8D 05 52                  	STA MMC5_Multiplier1
084A9 8E 06 52                  	STX MMC5_Multiplier2
084AC AD 06 52                  	LDA MMC5_Multiplier2
084AF 85 12                     	STA zDPCMNoteRatioLength
084B1 60                        	RTS
084B2                           
084B2                           ProcessMusicQueue_DPCMEnd:
084B2                           	; check for sound effects before disabling
084B2 A2 15                     	LDX #zCurrentDPCMSFX
084B4 D0 10                     	BNE ProcessMusicQueue_DPCMExit2
084B6                           
084B6                           ProcessMusicQueue_DPCMDisable:
084B6                           	; Disable
084B6 A2 0F                     	LDX #%00001111
084B8 8E 15 40                  	STX SND_CHN
084BB A2 00                     	LDX #0
084BD 8E 10 40                  	STX DPCM_ENV
084C0 8E 12 40                  	STX DPCM_OFFSET
084C3 8E 13 40                  	STX DPCM_SIZE
084C6                           ProcessMusicQueue_DPCMExit2:
084C6 60                        	RTS
084C7                           
084C7                           ProcessMusicQueue_DPCMLoopSegment:
084C7                           	; 0 = Loop
084C7 8D 1C 02                  	STA iCurrentDPCMOffset
084CA 4C 4A 84                  	JMP ProcessMusicQueue_DPCMByte
084CD                           
084CD                           
084CD                           ; DPCM sawtooth configuration data
084CD                           .include "src/sound/dpcm-table-data.asm"
084CD                           DMCSamplePitchTable:
084CD                           ;           C    C#   D    D#   E    F    F#   G    G#   A    A#   B
084CD 00 0B 0B 0B 0B 0B 0B 0B.. 	.db $00, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0e, $0e, $0e, $0e
084D9 0E 0F 0F 0F 0F 0F 0F 0F.. 	.db $0e, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f
084E5 0F 0F 0F 0F 0F 0F 0F 0F.. 	.db $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f
084F1 0F 0F 0E 0E 0E 0E 0E 0F.. 	.db $0f, $0f, $0e, $0e, $0e, $0e, $0e, $0f, $0f, $0f, $0f, $0f
084FD 0F 0F 0F 0F 0F 0E 0F 0F.. 	.db $0f, $0f, $0f, $0f, $0f, $0e, $0f, $0f, $0e, $0e, $0f, $0f
08509 00 00 00 00               	.db $00, $00, $00, $00
0850D                           
0850D                           DMCSamplePointers:
0850D                           ;           C    C#   D    D#   E    F    F#   G    G#   A    A#   B
0850D 7F 6A 46 00 6D 14 6F 46.. 	.db $7f, $6a, $46, $00, $6d, $14, $6f, $46, $3b, $67, $18, $6a
08519 46 3B 67 18 6A 46 00 6D.. 	.db $46, $3b, $67, $18, $6a, $46, $00, $6d, $14, $6f, $46, $71
08525 5B 40 00 2B 39 00 24 00.. 	.db $5b, $40, $00, $2b, $39, $00, $24, $00, $53, $63, $20, $55
08531 00 2F 00 40 00 00 00 00.. 	.db $00, $2f, $00, $40, $00, $00, $00, $00, $40, $00, $00, $00
0853D 26 00 21 42 36 26 5F 6F.. 	.db $26, $00, $21, $42, $36, $26, $5f, $6f, $6f, $5f, $46, $3d
08549 7F 7F 7F 7F               	.db $7f, $7f, $7f, $7f
0854D                           
0854D                           DMCSampleLengths:
0854D                           ;           C    C#   D    D#   E    F    F#   G    G#   A    A#   B
0854D 00 57 52 4E 49 45 41 3E.. 	.db $00, $57, $52, $4e, $49, $45, $41, $3e, $67, $62, $5c, $57
08559 52 67 62 5C 57 52 4E 49.. 	.db $52, $67, $62, $5c, $57, $52, $4e, $49, $45, $41, $3e, $3a
08565 4F B3 A9 9F 96 8E 86 7F.. 	.db $4f, $b3, $a9, $9f, $96, $8e, $86, $7f, $77, $71, $6a, $65
08571 5F 5A FF FF FF F1 E3 FF.. 	.db $5f, $5a, $ff, $ff, $ff, $f1, $e3, $ff, $ff, $ff, $f1, $e3
0857D 40 81 81 81 40 40 82 40.. 	.db $40, $81, $81, $81, $40, $40, $82, $40, $40, $82, $82, $b2
08589 00 00 00 00               	.db $00, $00, $00, $00
0858D                           
0858D                           DPCMSampleBanks:
0858D                           ;           C    C#   D    D#   E    F    F#   G    G#   A    A#   B
0858D FE F7 FD FE F6 FE FC FE.. 	.db $fe, $f7, $fd, $fe, $f6, $fe, $fc, $fe, $fc, $fa, $fd, $f7
08599 FD FC FA FD F7 FD FE F6.. 	.db $fd, $fc, $fa, $fd, $f7, $fd, $fe, $f6, $fe, $fc, $fe, $f9
085A5 FD F6 F9 F9 F8 FA FA FC.. 	.db $fd, $f6, $f9, $f9, $f8, $fa, $fa, $fc, $f9, $fb, $fc, $fc
085B1 FD FD F5 F5 F6 F7 F8 F5.. 	.db $fd, $fd, $f5, $f5, $f6, $f7, $f8, $f5, $f5, $f6, $f7, $f8
085BD FE FB FB FB FE FE F8 FD.. 	.db $fe, $fb, $fb, $fb, $fe, $fe, $f8, $fd, $fd, $f8, $fa, $f7
085C9 FE FE FE FE               	.db $fe, $fe, $fe, $fe
085CD                           
085CD                           ; Input
085CD                           ;   A = full patch byte
085CD                           ; Output
085CD                           ;   A = new note length
085CD                           ProcessMusicQueue_PatchNoteLength:
085CD 29 0F                     	AND #$0F
085CF A8                        	TAY
085D0 B9 C1 A4                  	LDA NoteLengthMultipliers, Y
085D3 A4 22                     	LDY zTempo
085D5 8C 05 52                  	STY MMC5_Multiplier1
085D8 8D 06 52                  	STA MMC5_Multiplier2
085DB AD 05 52                  	LDA MMC5_Multiplier1
085DE A8                        	TAY
085DF AD 06 52                  	LDA MMC5_Multiplier2
085E2 60                        	RTS
085E3                           
085E3                           ; Input
085E3                           ;   A = note start length, >= $13 for table A, < $13 for instrument table B
085E3                           ; Ouput
085E3                           ;   A = starting instrument offset ($16 for short, $3F for long)
085E3                           ;   X = duty/volume/envelope ($82)
085E3                           ;   Y = sweep ($7F)
085E3                           ;
085E3                           SetInstrumentStartOffset:
085E3 C9 13                     	CMP #$13
085E5 90 04                     	BCC SetInstrumentStartOffset_Short
085E7 A9 3F                     	LDA #$3F
085E9 D0 02                     	BNE SetInstrumentStartOffset_Exit
085EB                           SetInstrumentStartOffset_Short:
085EB A9 16                     	LDA #$16
085ED                           SetInstrumentStartOffset_Exit:
085ED A2 82                     	LDX #$82
085EF A0 7F                     	LDY #$7F
085F1 60                        	RTS
085F2                           
085F2                           ;
085F2                           ; Loads instrument data for a square channel
085F2                           ;
085F2                           ; Each instrument has two lookup tables based on the note length.
085F2                           ;
085F2                           ; Input
085F2                           ;   A = note length, >= $13 for table A, < $13 for instrument table B
085F2                           ;   X = instrument patch
085F2                           ;   Y = instrument offset
085F2                           ; Output
085F2                           ;   A = duty/volume/envelope
085F2                           ;
085F2                           LoadSquareInstrumentDVE:
085F2 E0 90                     	CPX #$90
085F4 F0 25                     	BEQ LoadSquareInstrumentDVE_90_E0
085F6                           
085F6 E0 E0                     	CPX #$E0
085F8 F0 21                     	BEQ LoadSquareInstrumentDVE_90_E0
085FA                           
085FA E0 A0                     	CPX #$A0
085FC F0 2A                     	BEQ LoadSquareInstrumentDVE_A0
085FE                           
085FE E0 B0                     	CPX #$B0
08600 F0 33                     	BEQ LoadSquareInstrumentDVE_B0
08602                           
08602 E0 C0                     	CPX #$C0
08604 F0 3C                     	BEQ LoadSquareInstrumentDVE_C0
08606                           
08606 E0 D0                     	CPX #$D0
08608 F0 52                     	BEQ LoadSquareInstrumentDVE_D0
0860A                           
0860A E0 F0                     	CPX #$F0
0860C F0 41                     	BEQ LoadSquareInstrumentDVE_F0
0860E                           
0860E                           LoadSquareInstrumentDVE_80:
0860E C9 13                     	CMP #$13
08610 90 05                     	BCC LoadSquareInstrumentDVE_80_Short
08612 B9 60 A2                  	LDA InstrumentDVE_80, Y
08615 D0 03                     	BNE LoadSquareInstrumentDVE_80_Exit
08617                           LoadSquareInstrumentDVE_80_Short:
08617 B9 A0 A2                  	LDA InstrumentDVE_80_Short, Y
0861A                           LoadSquareInstrumentDVE_80_Exit:
0861A 60                        	RTS
0861B                           
0861B                           LoadSquareInstrumentDVE_90_E0:
0861B C9 13                     	CMP #$13
0861D 90 05                     	BCC LoadSquareInstrumentDVE_90_E0_Short
0861F B9 B7 A2                  	LDA InstrumentDVE_90_E0, Y
08622 D0 03                     	BNE LoadSquareInstrumentDVE_90_E0_Exit
08624                           LoadSquareInstrumentDVE_90_E0_Short:
08624 B9 F7 A2                  	LDA InstrumentDVE_90_E0_Short, Y
08627                           LoadSquareInstrumentDVE_90_E0_Exit:
08627 60                        	RTS
08628                           
08628                           LoadSquareInstrumentDVE_A0:
08628 C9 13                     	CMP #$13
0862A 90 05                     	BCC LoadSquareInstrumentDVE_A0_Short
0862C B9 0E A3                  	LDA InstrumentDVE_A0, Y
0862F D0 03                     	BNE LoadSquareInstrumentDVE_A0_Exit
08631                           LoadSquareInstrumentDVE_A0_Short:
08631 B9 4E A3                  	LDA InstrumentDVE_A0_Short, Y
08634                           LoadSquareInstrumentDVE_A0_Exit:
08634 60                        	RTS
08635                           
08635                           LoadSquareInstrumentDVE_B0:
08635 C9 13                     	CMP #$13
08637 90 05                     	BCC LoadSquareInstrumentDVE_B0_Short
08639 B9 65 A3                  	LDA InstrumentDVE_B0, Y
0863C D0 03                     	BNE LoadSquareInstrumentDVE_B0_Exit
0863E                           LoadSquareInstrumentDVE_B0_Short:
0863E B9 A5 A3                  	LDA InstrumentDVE_B0_Short, Y
08641                           LoadSquareInstrumentDVE_B0_Exit:
08641 60                        	RTS
08642                           
08642                           LoadSquareInstrumentDVE_C0:
08642 C9 13                     	CMP #$13
08644 90 05                     	BCC LoadSquareInstrumentDVE_C0_Short
08646 B9 BC A3                  	LDA InstrumentDVE_C0, Y
08649 D0 03                     	BNE LoadSquareInstrumentDVE_C0_Exit
0864B                           LoadSquareInstrumentDVE_C0_Short:
0864B B9 FC A3                  	LDA InstrumentDVE_C0_Short, Y
0864E                           LoadSquareInstrumentDVE_C0_Exit:
0864E 60                        	RTS
0864F                           
0864F                           LoadSquareInstrumentDVE_F0:
0864F C9 13                     	CMP #$13
08651 90 05                     	BCC LoadSquareInstrumentDVE_F0_Short
08653 B9 6A A4                  	LDA InstrumentDVE_F0, Y
08656 D0 03                     	BNE LoadSquareInstrumentDVE_F0_Exit
08658                           LoadSquareInstrumentDVE_F0_Short:
08658 B9 AA A4                  	LDA InstrumentDVE_F0_Short, Y
0865B                           LoadSquareInstrumentDVE_F0_Exit:
0865B 60                        	RTS
0865C                           
0865C                           LoadSquareInstrumentDVE_D0:
0865C C9 13                     	CMP #$13
0865E 90 05                     	BCC LoadSquareInstrumentDVE_D0_Short
08660 B9 13 A4                  	LDA InstrumentDVE_D0, Y
08663 D0 03                     	BNE LoadSquareInstrumentDVE_D0_Exit
08665                           LoadSquareInstrumentDVE_D0_Short:
08665 B9 53 A4                  	LDA InstrumentDVE_D0_Short, Y
08668                           LoadSquareInstrumentDVE_D0_Exit:
08668 60                        	RTS
08669                           
08669                           ; Play a note on the Square 1 channel
08669                           ;
08669                           ; Input
08669                           ;   A = note
08669                           PlaySquare1Note:
08669 A2 00                     	LDX #0
0866B                           
0866B                           ; Plays a note
0866B                           ;
0866B                           ; Input
0866B                           ;   A = note
0866B                           ;   X = channel
0866B                           ;       $00: square 1
0866B                           ;       $04: square 2
0866B                           ;       $08: triangle
0866B                           ;       $0C: noise
0866B                           ; Output
0866B                           ;   A = $00 for rest, hi frequency otherwise
0866B                           PlayNote:
0866B C9 7E                     	CMP #$7E
0866D D0 0E                     	BNE PlayNote_NotRest
0866F                           
0866F E0 08                     	CPX #$08
08671 A9 00                     	LDA #$00
08673 B0 02                     	BCS PlayNote_TriangleRest
08675                           
08675 A9 10                     	LDA #$10
08677                           
08677                           PlayNote_TriangleRest:
08677 9D 00 40                  	STA SQ1_ENV, X
0867A A9 00                     	LDA #$00
0867C 60                        	RTS
0867D                           
0867D                           PlayNote_NotRest:
0867D A0 01                     	LDY #$01
0867F 84 10                     	STY zOctave
08681 A8                        	TAY
08682 30 07                     	BMI PlayNote_LoadFrequencyData
08684                           
08684 38                        	SEC
08685                           
08685                           PlayNote_IncrementOctave:
08685 E6 10                     	INC zOctave
08687 E9 18                     	SBC #$18
08689 B0 FA                     	BCS PlayNote_IncrementOctave
0868B                           
0868B                           PlayNote_LoadFrequencyData:
0868B 18                        	CLC
0868C 69 18                     	ADC #$18
0868E A8                        	TAY
0868F B9 D3 86                  	LDA NoteFrequencyData, Y
08692 85 02                     	STA zNextPitch
08694 B9 D4 86                  	LDA NoteFrequencyData + 1, Y
08697 85 03                     	STA zNextPitch + 1
08699                           
08699                           PlayNote_FrequencyOctaveLoop:
08699 46 03                     	LSR zNextPitch + 1
0869B 66 02                     	ROR zNextPitch
0869D C6 10                     	DEC zOctave
0869F D0 F8                     	BNE PlayNote_FrequencyOctaveLoop
086A1                           
086A1                           	; tweak the frequency
086A1 C6 02                     	DEC zNextPitch
086A3                           
086A3                           PlayNote_SetFrequency:
086A3 A5 02                     	LDA zNextPitch
086A5 9D 02 40                  	STA SQ1_LO, X
086A8 A5 03                     	LDA zNextPitch + 1
086AA 09 08                     	ORA #$08
086AC 9D 03 40                  	STA SQ1_HI, X
086AF 60                        	RTS
086B0                           
086B0                           SongBanks:
086B0                           	audio_bank PRG_Music0
086B0 84                        	.db $80 | PRG_Music0
086B1                           	audio_bank PRG_Music0
086B1 84                        	.db $80 | PRG_Music0
086B2                           
086B2                           MusicStackPermission:
086B2 FF                        	.db $FF
086B3 00                        	.db $00
086B4 00                        	.db $00
086B5                           
086B5                           ;
086B5                           ; -------------------------------------------------------------------------
086B5                           ; Various bits of the music engine have been extracted into separate files;
086B5                           ; see the individual files for details on the formats within
086B5                           ;
086B5                           
086B5                           ; Determine which spot in Zero-Page to write to
086B5                           .include "src/sound/sfx-queues.asm"
086B5                           SoundEffectDestinations:
086B5 19                        	.db zDPCMSFX
086B6 19                        	.db zDPCMSFX
086B7 19                        	.db zDPCMSFX
086B8 19                        	.db zDPCMSFX
086B9 19                        	.db zDPCMSFX
086BA 19                        	.db zDPCMSFX
086BB 19                        	.db zDPCMSFX
086BC 19                        	.db zDPCMSFX
086BD 19                        	.db zDPCMSFX
086BE 19                        	.db zDPCMSFX
086BF 19                        	.db zDPCMSFX
086C0 19                        	.db zDPCMSFX
086C1 19                        	.db zDPCMSFX
086C2 19                        	.db zDPCMSFX
086C3 19                        	.db zDPCMSFX
086C4 19                        	.db zDPCMSFX
086C5 19                        	.db zDPCMSFX
086C6 19                        	.db zDPCMSFX
086C7 19                        	.db zDPCMSFX
086C8 19                        	.db zDPCMSFX
086C9 19                        	.db zDPCMSFX
086CA 19                        	.db zDPCMSFX
086CB 19                        	.db zDPCMSFX
086CC 19                        	.db zDPCMSFX
086CD 1A                        	.db zNoiseDrumSFX
086CE 1A                        	.db zNoiseDrumSFX
086CF 1A                        	.db zNoiseDrumSFX
086D0 1A                        	.db zNoiseDrumSFX
086D1 1A                        	.db zNoiseDrumSFX
086D2 1B                        	.db zNoiseDrumSFX + 1086D3                           
086D3                           ; Frequency table for notes; standard between various Mario games
086D3                           .include "src/sound/notes.asm"
086D3                           NoteFrequencyData:
086D3 B8 1A                     	.dw $1AB8 ; C
086D5 38 19                     	.dw $1938 ; C# / Db
086D7 CC 17                     	.dw $17CC ; D
086D9 78 16                     	.dw $1678 ; D# / Eb
086DB 34 15                     	.dw $1534 ; E
086DD 04 14                     	.dw $1404 ; F
086DF E4 12                     	.dw $12E4 ; F# / Gb
086E1 D4 11                     	.dw $11D4 ; G
086E3 D4 10                     	.dw $10D4 ; G# / Ab
086E5 E0 0F                     	.dw $0FE0 ; A
086E7 FC 0E                     	.dw $0EFC ; A# / Bb
086E9 24 0E                     	.dw $0E24 ; B
086EB                           
086EB                           ; Base note lengths and TRI_LINEAR parameters
086EB                           .include "src/sound/note-lengths.asm"
086EB                           ;
086EB                           ; Note Lengths
086EB                           ; ============
086EB                           ;
086EB                           ; These are lookup tables used to determine note lengths (in ticks).
086EB                           ;
086EB                           ; There are a few weird values floating around, but it's generally broken into
086EB                           ; groups of 13 note lengths that correspond to a tempo as follows:
086EB                           ;
086EB                           ; $x0: 1/16 note
086EB                           ; $x1: 1/32 note
086EB                           ; $x2: 1/4 note triplet
086EB                           ; $x3: ?
086EB                           ; $x4: 1/8 note
086EB                           ; $x5: dotted 1/8 note
086EB                           ; $x6: 1/2 note triplet
086EB                           ; $x7: ?
086EB                           ; $x8: 1/4 note
086EB                           ; $x9: dotted 1/4 note
086EB                           ; $xA: 1/2 note
086EB                           ; $xB: dotted 1/2 note
086EB                           ; $xC: whole note
086EB                           ;
086EB                           
086EB                           NLT_Title = $64
086EB                           NLT_Journy = $50
086EB                           NLT_HOFScene3 = $a0
086EB                           NLT_ObjComplete = $47
086EB                           
086EB                           ;
086EB                           ; Triangle Linearity Indeces
086EB                           ; ==========================
086EB                           ;
086EB                           ; The triangle channel goes by two linearity ratios that both max out at $7F
086EB                           ;
086EB                           ; $80 / $A0 - 15/16 RATIO
086EB                           ; The more common of the two, particularly useful for prevalant bass and leads
086EB                           ;
086EB                           ; $B0-$F0 - 4/7 RATIO
086EB                           ; Used for staccato, used by the Wart and title themes
086EB                           ;
086EB                           
086EB                           Triangle15Outta16Lengths:
086EB 00                        	.db $00
086EC 03 07 0B 0F 12 16 1A 1E   	.db $03, $07, $0B, $0F, $12, $16, $1A, $1E
086F4 21 25 29 2D 30 34 38 3C   	.db $21, $25, $29, $2D, $30, $34, $38, $3C
086FC 3F 43 47 4B 4E 52 56 5A   	.db $3F, $43, $47, $4B, $4E, $52, $56, $5A
08704 5D 61 65 69 6C 70 74 78   	.db $5D, $61, $65, $69, $6C, $70, $74, $78
0870C 7B 7F 7F 7F 7F 7F 7F 7F   	.db $7B, $7F, $7F, $7F, $7F, $7F, $7F, $7F
08714 7F 7F 7F 7F 7F 7F 7F 7F   	.db $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
0871C 7F 7F 7F 7F 7F 7F 7F 7F   	.db $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
08724                           
08724                           Triangle4Outta7Lengths:
08724 00                        	.db $00
08725 02 04 06 09 0B 0D 10 12   	.db $02, $04, $06, $09, $0B, $0D, $10, $12
0872D 14 16 19 1B 1D 20 22 24   	.db $14, $16, $19, $1B, $1D, $20, $22, $24
08735 26 29 2B 2D 30 32 34 36   	.db $26, $29, $2B, $2D, $30, $32, $34, $36
0873D 39 3B 3D 40 42 44 46 49   	.db $39, $3B, $3D, $40, $42, $44, $46, $49
08745 4B 4D 50 52 54 56 59 5B   	.db $4B, $4D, $50, $52, $54, $56, $59, $5B
0874D 5D 60 62 64 66 69 6B 6D   	.db $5D, $60, $62, $64, $66, $69, $6B, $6D
08755 70 72 74 76 79 7B 7D 7F   	.db $70, $72, $74, $76, $79, $7B, $7D, $7F0875D                           
0875D                           ; Channels active in the music (usually all 5)
0875D                           .include "src/sound/music-channel-count.asm"
0875D                           ;
0875D                           ; Channel stacks
0875D                           ; This data is used to determine how many bytes to use in the headers.
0875D                           ; $03 -> 5 Bytes -> Pulses + Hill only
0875D                           ; $05 -> 7 Bytes -> All five channels
0875D                           ;
0875D                           MusicChannelStack:
0875D 05                        	.db $05 ; title
0875E 05                        	.db $05 ; hof scene 3
0875F 05                        	.db $05 ; journey
08760                           
08760                           ; noise sound effect pointers, contains some percussion
08760                           .include "src/sound/noise-sfx-pointers.asm"
08760                           NoiseSFXPointersLo:
08760 9A                        	.dl NoiseSFX_Hihat
08761 A4                        	.dl NoiseSFX_Crash
08762 C7                        	.dl NoiseSFX_QuietHihat
08763 CE                        	.dl NoiseSFX_HihatOpen
08764 F1                        	.dl NoiseSFX_DryHihat
08765 F5                        	.dl NoiseSFX_DoubleClap
08766 18                        	.dl NoiseSFX_Snare
08767 29                        	.dl NoiseSFX_Kick
08768 98                        	.dl NoiseSFX_None
08769 98                        	.dl NoiseSFX_None
0876A 98                        	.dl NoiseSFX_None
0876B 98                        	.dl NoiseSFX_None
0876C 98                        	.dl NoiseSFX_None
0876D 98                        	.dl NoiseSFX_None
0876E 98                        	.dl NoiseSFX_None
0876F 98                        	.dl NoiseSFX_None
08770 98                        	.dl NoiseSFX_None
08771 98                        	.dl NoiseSFX_None
08772 98                        	.dl NoiseSFX_None
08773 98                        	.dl NoiseSFX_None
08774 98                        	.dl NoiseSFX_None
08775 98                        	.dl NoiseSFX_None
08776 98                        	.dl NoiseSFX_None
08777 98                        	.dl NoiseSFX_None
08778 31                        	.dl NoiseSFX_DoorClick
08779 3E                        	.dl NoiseSFX_DoorClose
0877A 4D                        	.dl NoiseSFX_DoorSlam
0877B 8F                        	.dl NoiseSFX_Sink
0877C 98                        	.dl NoiseSFX_None
0877D                           
0877D                           NoiseSFXPointersHi:
0877D 87                        	.dh NoiseSFX_Hihat
0877E 87                        	.dh NoiseSFX_Crash
0877F 87                        	.dh NoiseSFX_QuietHihat
08780 87                        	.dh NoiseSFX_HihatOpen
08781 87                        	.dh NoiseSFX_DryHihat
08782 87                        	.dh NoiseSFX_DoubleClap
08783 88                        	.dh NoiseSFX_Snare
08784 88                        	.dh NoiseSFX_Kick
08785 88                        	.dh NoiseSFX_None
08786 88                        	.dh NoiseSFX_None
08787 88                        	.dh NoiseSFX_None
08788 88                        	.dh NoiseSFX_None
08789 88                        	.dh NoiseSFX_None
0878A 88                        	.dh NoiseSFX_None
0878B 88                        	.dh NoiseSFX_None
0878C 88                        	.dh NoiseSFX_None
0878D 88                        	.dh NoiseSFX_None
0878E 88                        	.dh NoiseSFX_None
0878F 88                        	.dh NoiseSFX_None
08790 88                        	.dh NoiseSFX_None
08791 88                        	.dh NoiseSFX_None
08792 88                        	.dh NoiseSFX_None
08793 88                        	.dh NoiseSFX_None
08794 88                        	.dh NoiseSFX_None
08795 88                        	.dh NoiseSFX_DoorClick
08796 88                        	.dh NoiseSFX_DoorClose
08797 88                        	.dh NoiseSFX_DoorSlam
08798 88                        	.dh NoiseSFX_Sink
08799 88                        	.dh NoiseSFX_None
0879A                           
0879A                           .include "src/sound/noise-sfx.asm"
0879A                           NoiseSFX_Hihat:
0879A                           	noise_envelope 1, 8
0879A                           	IF 1 < 1
0879A                           		.db $40 + 8
0879A                           	ELSE
0879A 18                        		.db (1 << 4) + 8
0879B                           	ENDIF
0879B                           	noise_note 2, 0, 3
0879B 03                        	.db (0 << 7) + 3
0879C                           	IF 2 > 1
0879C                           		REPT 2 - 1
0879C                           			.db $7e
0879C                           		ENDR
0879C 7E                        			.db $7e
0879D                           	ENDIF
0879D                           	noise_envelope 1, 3
0879D                           	IF 1 < 1
0879D                           		.db $40 + 3
0879D                           	ELSE
0879D 13                        		.db (1 << 4) + 3
0879E                           	ENDIF
0879E                           	noise_note 2, 0, 2
0879E 02                        	.db (0 << 7) + 2
0879F                           	IF 2 > 1
0879F                           		REPT 2 - 1
0879F                           			.db $7e
0879F                           		ENDR
0879F 7E                        			.db $7e
087A0                           	ENDIF
087A0                           	noise_envelope 1, 1
087A0                           	IF 1 < 1
087A0                           		.db $40 + 1
087A0                           	ELSE
087A0 11                        		.db (1 << 4) + 1
087A1                           	ENDIF
087A1                           	noise_note 2, 0, 1
087A1 01                        	.db (0 << 7) + 1
087A2                           	IF 2 > 1
087A2                           		REPT 2 - 1
087A2                           			.db $7e
087A2                           		ENDR
087A2 7E                        			.db $7e
087A3                           	ENDIF
087A3                           	noise_ret
087A3 00                        	.db 0
087A4                           
087A4                           NoiseSFX_Crash:
087A4                           	noise_envelope 0, 0
087A4                           	IF 0 < 1
087A4 40                        		.db $40 + 0
087A5                           	ELSE
087A5                           		.db (0 << 4) + 0
087A5                           	ENDIF
087A5                           	noise_note 2, 0, 7
087A5 07                        	.db (0 << 7) + 7
087A6                           	IF 2 > 1
087A6                           		REPT 2 - 1
087A6                           			.db $7e
087A6                           		ENDR
087A6 7E                        			.db $7e
087A7                           	ENDIF
087A7                           	noise_adjust 2, 1, 8
087A7                           	IF 1 < 1
087A7                           		.db $40 + 8
087A7                           	ELSE
087A7 18                        		.db (1 << 4) + 8
087A8                           	ENDIF
087A8                           	REPT 2
087A8                           		.db $7e
087A8                           	ENDR
087A8 7E                        		.db $7e
087A9 7E                        		.db $7e
087AA                           	noise_adjust 2, 1, 9
087AA                           	IF 1 < 1
087AA                           		.db $40 + 9
087AA                           	ELSE
087AA 19                        		.db (1 << 4) + 9
087AB                           	ENDIF
087AB                           	REPT 2
087AB                           		.db $7e
087AB                           	ENDR
087AB 7E                        		.db $7e
087AC 7E                        		.db $7e
087AD                           	noise_adjust 2, 1, 7
087AD                           	IF 1 < 1
087AD                           		.db $40 + 7
087AD                           	ELSE
087AD 17                        		.db (1 << 4) + 7
087AE                           	ENDIF
087AE                           	REPT 2
087AE                           		.db $7e
087AE                           	ENDR
087AE 7E                        		.db $7e
087AF 7E                        		.db $7e
087B0                           	noise_adjust 2, 1, 6
087B0                           	IF 1 < 1
087B0                           		.db $40 + 6
087B0                           	ELSE
087B0 16                        		.db (1 << 4) + 6
087B1                           	ENDIF
087B1                           	REPT 2
087B1                           		.db $7e
087B1                           	ENDR
087B1 7E                        		.db $7e
087B2 7E                        		.db $7e
087B3                           	noise_adjust 2, 1, 5
087B3                           	IF 1 < 1
087B3                           		.db $40 + 5
087B3                           	ELSE
087B3 15                        		.db (1 << 4) + 5
087B4                           	ENDIF
087B4                           	REPT 2
087B4                           		.db $7e
087B4                           	ENDR
087B4 7E                        		.db $7e
087B5 7E                        		.db $7e
087B6                           	noise_adjust 2, 1, 4
087B6                           	IF 1 < 1
087B6                           		.db $40 + 4
087B6                           	ELSE
087B6 14                        		.db (1 << 4) + 4
087B7                           	ENDIF
087B7                           	REPT 2
087B7                           		.db $7e
087B7                           	ENDR
087B7 7E                        		.db $7e
087B8 7E                        		.db $7e
087B9                           	noise_adjust 2, 1, 3
087B9                           	IF 1 < 1
087B9                           		.db $40 + 3
087B9                           	ELSE
087B9 13                        		.db (1 << 4) + 3
087BA                           	ENDIF
087BA                           	REPT 2
087BA                           		.db $7e
087BA                           	ENDR
087BA 7E                        		.db $7e
087BB 7E                        		.db $7e
087BC                           	noise_adjust 2, 1, 2
087BC                           	IF 1 < 1
087BC                           		.db $40 + 2
087BC                           	ELSE
087BC 12                        		.db (1 << 4) + 2
087BD                           	ENDIF
087BD                           	REPT 2
087BD                           		.db $7e
087BD                           	ENDR
087BD 7E                        		.db $7e
087BE 7E                        		.db $7e
087BF                           	noise_adjust 6, 1, 1
087BF                           	IF 1 < 1
087BF                           		.db $40 + 1
087BF                           	ELSE
087BF 11                        		.db (1 << 4) + 1
087C0                           	ENDIF
087C0                           	REPT 6
087C0                           		.db $7e
087C0                           	ENDR
087C0 7E                        		.db $7e
087C1 7E                        		.db $7e
087C2 7E                        		.db $7e
087C3 7E                        		.db $7e
087C4 7E                        		.db $7e
087C5 7E                        		.db $7e
087C6                           	noise_ret
087C6 00                        	.db 0
087C7                           
087C7                           NoiseSFX_QuietHihat:
087C7                           	noise_envelope 1, 2
087C7                           	IF 1 < 1
087C7                           		.db $40 + 2
087C7                           	ELSE
087C7 12                        		.db (1 << 4) + 2
087C8                           	ENDIF
087C8                           	noise_note 2, 0, 1
087C8 01                        	.db (0 << 7) + 1
087C9                           	IF 2 > 1
087C9                           		REPT 2 - 1
087C9                           			.db $7e
087C9                           		ENDR
087C9 7E                        			.db $7e
087CA                           	ENDIF
087CA                           	noise_adjust 2, 1, 1
087CA                           	IF 1 < 1
087CA                           		.db $40 + 1
087CA                           	ELSE
087CA 11                        		.db (1 << 4) + 1
087CB                           	ENDIF
087CB                           	REPT 2
087CB                           		.db $7e
087CB                           	ENDR
087CB 7E                        		.db $7e
087CC 7E                        		.db $7e
087CD                           	noise_ret
087CD 00                        	.db 0
087CE                           
087CE                           NoiseSFX_HihatOpen:
087CE                           	noise_envelope 0, 0
087CE                           	IF 0 < 1
087CE 40                        		.db $40 + 0
087CF                           	ELSE
087CF                           		.db (0 << 4) + 0
087CF                           	ENDIF
087CF                           	noise_note 2, 0, 1
087CF 01                        	.db (0 << 7) + 1
087D0                           	IF 2 > 1
087D0                           		REPT 2 - 1
087D0                           			.db $7e
087D0                           		ENDR
087D0 7E                        			.db $7e
087D1                           	ENDIF
087D1                           	noise_adjust 2, 1, 8
087D1                           	IF 1 < 1
087D1                           		.db $40 + 8
087D1                           	ELSE
087D1 18                        		.db (1 << 4) + 8
087D2                           	ENDIF
087D2                           	REPT 2
087D2                           		.db $7e
087D2                           	ENDR
087D2 7E                        		.db $7e
087D3 7E                        		.db $7e
087D4                           	noise_adjust 2, 1, 9
087D4                           	IF 1 < 1
087D4                           		.db $40 + 9
087D4                           	ELSE
087D4 19                        		.db (1 << 4) + 9
087D5                           	ENDIF
087D5                           	REPT 2
087D5                           		.db $7e
087D5                           	ENDR
087D5 7E                        		.db $7e
087D6 7E                        		.db $7e
087D7                           	noise_adjust 2, 1, 7
087D7                           	IF 1 < 1
087D7                           		.db $40 + 7
087D7                           	ELSE
087D7 17                        		.db (1 << 4) + 7
087D8                           	ENDIF
087D8                           	REPT 2
087D8                           		.db $7e
087D8                           	ENDR
087D8 7E                        		.db $7e
087D9 7E                        		.db $7e
087DA                           	noise_adjust 2, 1, 6
087DA                           	IF 1 < 1
087DA                           		.db $40 + 6
087DA                           	ELSE
087DA 16                        		.db (1 << 4) + 6
087DB                           	ENDIF
087DB                           	REPT 2
087DB                           		.db $7e
087DB                           	ENDR
087DB 7E                        		.db $7e
087DC 7E                        		.db $7e
087DD                           	noise_adjust 2, 1, 5
087DD                           	IF 1 < 1
087DD                           		.db $40 + 5
087DD                           	ELSE
087DD 15                        		.db (1 << 4) + 5
087DE                           	ENDIF
087DE                           	REPT 2
087DE                           		.db $7e
087DE                           	ENDR
087DE 7E                        		.db $7e
087DF 7E                        		.db $7e
087E0                           	noise_adjust 2, 1, 4
087E0                           	IF 1 < 1
087E0                           		.db $40 + 4
087E0                           	ELSE
087E0 14                        		.db (1 << 4) + 4
087E1                           	ENDIF
087E1                           	REPT 2
087E1                           		.db $7e
087E1                           	ENDR
087E1 7E                        		.db $7e
087E2 7E                        		.db $7e
087E3                           	noise_adjust 2, 1, 3
087E3                           	IF 1 < 1
087E3                           		.db $40 + 3
087E3                           	ELSE
087E3 13                        		.db (1 << 4) + 3
087E4                           	ENDIF
087E4                           	REPT 2
087E4                           		.db $7e
087E4                           	ENDR
087E4 7E                        		.db $7e
087E5 7E                        		.db $7e
087E6                           	noise_adjust 2, 1, 2
087E6                           	IF 1 < 1
087E6                           		.db $40 + 2
087E6                           	ELSE
087E6 12                        		.db (1 << 4) + 2
087E7                           	ENDIF
087E7                           	REPT 2
087E7                           		.db $7e
087E7                           	ENDR
087E7 7E                        		.db $7e
087E8 7E                        		.db $7e
087E9                           	noise_adjust 6, 1, 1
087E9                           	IF 1 < 1
087E9                           		.db $40 + 1
087E9                           	ELSE
087E9 11                        		.db (1 << 4) + 1
087EA                           	ENDIF
087EA                           	REPT 6
087EA                           		.db $7e
087EA                           	ENDR
087EA 7E                        		.db $7e
087EB 7E                        		.db $7e
087EC 7E                        		.db $7e
087ED 7E                        		.db $7e
087EE 7E                        		.db $7e
087EF 7E                        		.db $7e
087F0                           	noise_ret
087F0 00                        	.db 0
087F1                           
087F1                           NoiseSFX_DryHihat:
087F1                           	noise_envelope 1, 8
087F1                           	IF 1 < 1
087F1                           		.db $40 + 8
087F1                           	ELSE
087F1 18                        		.db (1 << 4) + 8
087F2                           	ENDIF
087F2                           	noise_note 2, 0, 1
087F2 01                        	.db (0 << 7) + 1
087F3                           	IF 2 > 1
087F3                           		REPT 2 - 1
087F3                           			.db $7e
087F3                           		ENDR
087F3 7E                        			.db $7e
087F4                           	ENDIF
087F4                           	noise_ret
087F4 00                        	.db 0
087F5                           
087F5                           NoiseSFX_DoubleClap:
087F5                           	noise_envelope 1, 12
087F5                           	IF 1 < 1
087F5                           		.db $40 + 12
087F5                           	ELSE
087F5 1C                        		.db (1 << 4) + 12
087F6                           	ENDIF
087F6                           	noise_note 2, 0, 11
087F6 0B                        	.db (0 << 7) + 11
087F7                           	IF 2 > 1
087F7                           		REPT 2 - 1
087F7                           			.db $7e
087F7                           		ENDR
087F7 7E                        			.db $7e
087F8                           	ENDIF
087F8                           	noise_envelope 1, 10
087F8                           	IF 1 < 1
087F8                           		.db $40 + 10
087F8                           	ELSE
087F8 1A                        		.db (1 << 4) + 10
087F9                           	ENDIF
087F9                           	noise_note 2, 0, 10
087F9 0A                        	.db (0 << 7) + 10
087FA                           	IF 2 > 1
087FA                           		REPT 2 - 1
087FA                           			.db $7e
087FA                           		ENDR
087FA 7E                        			.db $7e
087FB                           	ENDIF
087FB                           	noise_adjust 2, 1, 8
087FB                           	IF 1 < 1
087FB                           		.db $40 + 8
087FB                           	ELSE
087FB 18                        		.db (1 << 4) + 8
087FC                           	ENDIF
087FC                           	REPT 2
087FC                           		.db $7e
087FC                           	ENDR
087FC 7E                        		.db $7e
087FD 7E                        		.db $7e
087FE                           	noise_adjust 4, 1, 6
087FE                           	IF 1 < 1
087FE                           		.db $40 + 6
087FE                           	ELSE
087FE 16                        		.db (1 << 4) + 6
087FF                           	ENDIF
087FF                           	REPT 4
087FF                           		.db $7e
087FF                           	ENDR
087FF 7E                        		.db $7e
08800 7E                        		.db $7e
08801 7E                        		.db $7e
08802 7E                        		.db $7e
08803                           	noise_envelope 1, 12
08803                           	IF 1 < 1
08803                           		.db $40 + 12
08803                           	ELSE
08803 1C                        		.db (1 << 4) + 12
08804                           	ENDIF
08804                           	noise_note 2, 0, 9
08804 09                        	.db (0 << 7) + 9
08805                           	IF 2 > 1
08805                           		REPT 2 - 1
08805                           			.db $7e
08805                           		ENDR
08805 7E                        			.db $7e
08806                           	ENDIF
08806                           	noise_envelope 1, 10
08806                           	IF 1 < 1
08806                           		.db $40 + 10
08806                           	ELSE
08806 1A                        		.db (1 << 4) + 10
08807                           	ENDIF
08807                           	noise_note 2, 0, 10
08807 0A                        	.db (0 << 7) + 10
08808                           	IF 2 > 1
08808                           		REPT 2 - 1
08808                           			.db $7e
08808                           		ENDR
08808 7E                        			.db $7e
08809                           	ENDIF
08809                           	noise_adjust 2, 1, 8
08809                           	IF 1 < 1
08809                           		.db $40 + 8
08809                           	ELSE
08809 18                        		.db (1 << 4) + 8
0880A                           	ENDIF
0880A                           	REPT 2
0880A                           		.db $7e
0880A                           	ENDR
0880A 7E                        		.db $7e
0880B 7E                        		.db $7e
0880C                           	noise_adjust 4, 1, 6
0880C                           	IF 1 < 1
0880C                           		.db $40 + 6
0880C                           	ELSE
0880C 16                        		.db (1 << 4) + 6
0880D                           	ENDIF
0880D                           	REPT 4
0880D                           		.db $7e
0880D                           	ENDR
0880D 7E                        		.db $7e
0880E 7E                        		.db $7e
0880F 7E                        		.db $7e
08810 7E                        		.db $7e
08811                           	noise_adjust 2, 1, 4
08811                           	IF 1 < 1
08811                           		.db $40 + 4
08811                           	ELSE
08811 14                        		.db (1 << 4) + 4
08812                           	ENDIF
08812                           	REPT 2
08812                           		.db $7e
08812                           	ENDR
08812 7E                        		.db $7e
08813 7E                        		.db $7e
08814                           	noise_adjust 2, 1, 2
08814                           	IF 1 < 1
08814                           		.db $40 + 2
08814                           	ELSE
08814 12                        		.db (1 << 4) + 2
08815                           	ENDIF
08815                           	REPT 2
08815                           		.db $7e
08815                           	ENDR
08815 7E                        		.db $7e
08816 7E                        		.db $7e
08817                           	noise_ret
08817 00                        	.db 0
08818                           
08818                           NoiseSFX_Snare:
08818                           	noise_envelope 1, 15
08818                           	IF 1 < 1
08818                           		.db $40 + 15
08818                           	ELSE
08818 1F                        		.db (1 << 4) + 15
08819                           	ENDIF
08819                           	noise_note 1, 1, 13
08819 8D                        	.db (1 << 7) + 13
0881A                           	IF 1 > 1
0881A                           		REPT 1 - 1
0881A                           			.db $7e
0881A                           		ENDR
0881A                           	ENDIF
0881A                           	noise_note 1, 0, 11
0881A 0B                        	.db (0 << 7) + 11
0881B                           	IF 1 > 1
0881B                           		REPT 1 - 1
0881B                           			.db $7e
0881B                           		ENDR
0881B                           	ENDIF
0881B                           	noise_note 1, 0, 9
0881B 09                        	.db (0 << 7) + 9
0881C                           	IF 1 > 1
0881C                           		REPT 1 - 1
0881C                           			.db $7e
0881C                           		ENDR
0881C                           	ENDIF
0881C                           	noise_adjust 1, 1, 12
0881C                           	IF 1 < 1
0881C                           		.db $40 + 12
0881C                           	ELSE
0881C 1C                        		.db (1 << 4) + 12
0881D                           	ENDIF
0881D                           	REPT 1
0881D                           		.db $7e
0881D                           	ENDR
0881D 7E                        		.db $7e
0881E                           	noise_adjust 1, 1, 9
0881E                           	IF 1 < 1
0881E                           		.db $40 + 9
0881E                           	ELSE
0881E 19                        		.db (1 << 4) + 9
0881F                           	ENDIF
0881F                           	REPT 1
0881F                           		.db $7e
0881F                           	ENDR
0881F 7E                        		.db $7e
08820                           	noise_adjust 1, 1, 6
08820                           	IF 1 < 1
08820                           		.db $40 + 6
08820                           	ELSE
08820 16                        		.db (1 << 4) + 6
08821                           	ENDIF
08821                           	REPT 1
08821                           		.db $7e
08821                           	ENDR
08821 7E                        		.db $7e
08822                           	noise_adjust 1, 1, 3
08822                           	IF 1 < 1
08822                           		.db $40 + 3
08822                           	ELSE
08822 13                        		.db (1 << 4) + 3
08823                           	ENDIF
08823                           	REPT 1
08823                           		.db $7e
08823                           	ENDR
08823 7E                        		.db $7e
08824                           	noise_adjust 1, 1, 2
08824                           	IF 1 < 1
08824                           		.db $40 + 2
08824                           	ELSE
08824 12                        		.db (1 << 4) + 2
08825                           	ENDIF
08825                           	REPT 1
08825                           		.db $7e
08825                           	ENDR
08825 7E                        		.db $7e
08826                           	noise_adjust 1, 1, 1
08826                           	IF 1 < 1
08826                           		.db $40 + 1
08826                           	ELSE
08826 11                        		.db (1 << 4) + 1
08827                           	ENDIF
08827                           	REPT 1
08827                           		.db $7e
08827                           	ENDR
08827 7E                        		.db $7e
08828                           	noise_ret
08828 00                        	.db 0
08829                           
08829                           NoiseSFX_Kick:
08829                           	noise_envelope 1, 15
08829                           	IF 1 < 1
08829                           		.db $40 + 15
08829                           	ELSE
08829 1F                        		.db (1 << 4) + 15
0882A                           	ENDIF
0882A                           	noise_note 1, 1, 13
0882A 8D                        	.db (1 << 7) + 13
0882B                           	IF 1 > 1
0882B                           		REPT 1 - 1
0882B                           			.db $7e
0882B                           		ENDR
0882B                           	ENDIF
0882B                           	noise_note 1, 1, 14
0882B 8E                        	.db (1 << 7) + 14
0882C                           	IF 1 > 1
0882C                           		REPT 1 - 1
0882C                           			.db $7e
0882C                           		ENDR
0882C                           	ENDIF
0882C                           	noise_envelope 0, 0
0882C                           	IF 0 < 1
0882C 40                        		.db $40 + 0
0882D                           	ELSE
0882D                           		.db (0 << 4) + 0
0882D                           	ENDIF
0882D                           	noise_note 3, 0, 1
0882D 01                        	.db (0 << 7) + 1
0882E                           	IF 3 > 1
0882E                           		REPT 3 - 1
0882E                           			.db $7e
0882E                           		ENDR
0882E 7E                        			.db $7e
0882F 7E                        			.db $7e
08830                           	ENDIF
08830                           	noise_ret
08830 00                        	.db 0
08831                           
08831                           NoiseSFX_DoorClick:
08831                           	noise_envelope 0, 0
08831                           	IF 0 < 1
08831 40                        		.db $40 + 0
08832                           	ELSE
08832                           		.db (0 << 4) + 0
08832                           	ENDIF
08832                           	noise_note 8, 0, 12
08832 0C                        	.db (0 << 7) + 12
08833                           	IF 8 > 1
08833                           		REPT 8 - 1
08833                           			.db $7e
08833                           		ENDR
08833 7E                        			.db $7e
08834 7E                        			.db $7e
08835 7E                        			.db $7e
08836 7E                        			.db $7e
08837 7E                        			.db $7e
08838 7E                        			.db $7e
08839 7E                        			.db $7e
0883A                           	ENDIF
0883A                           	noise_note 3, 0, 11
0883A 0B                        	.db (0 << 7) + 11
0883B                           	IF 3 > 1
0883B                           		REPT 3 - 1
0883B                           			.db $7e
0883B                           		ENDR
0883B 7E                        			.db $7e
0883C 7E                        			.db $7e
0883D                           	ENDIF
0883D                           	noise_ret
0883D 00                        	.db 0
0883E                           
0883E                           NoiseSFX_DoorClose:
0883E                           	noise_envelope 0, 0
0883E                           	IF 0 < 1
0883E 40                        		.db $40 + 0
0883F                           	ELSE
0883F                           		.db (0 << 4) + 0
0883F                           	ENDIF
0883F                           	noise_note 1, 0, 12
0883F 0C                        	.db (0 << 7) + 12
08840                           	IF 1 > 1
08840                           		REPT 1 - 1
08840                           			.db $7e
08840                           		ENDR
08840                           	ENDIF
08840                           	noise_envelope 0, 2
08840                           	IF 0 < 1
08840 42                        		.db $40 + 2
08841                           	ELSE
08841                           		.db (0 << 4) + 2
08841                           	ENDIF
08841                           	noise_note 11, 0, 12
08841 0C                        	.db (0 << 7) + 12
08842                           	IF 11 > 1
08842                           		REPT 11 - 1
08842                           			.db $7e
08842                           		ENDR
08842 7E                        			.db $7e
08843 7E                        			.db $7e
08844 7E                        			.db $7e
08845 7E                        			.db $7e
08846 7E                        			.db $7e
08847 7E                        			.db $7e
08848 7E                        			.db $7e
08849 7E                        			.db $7e
0884A 7E                        			.db $7e
0884B 7E                        			.db $7e
0884C                           	ENDIF
0884C                           	noise_ret
0884C 00                        	.db 0
0884D                           
0884D                           NoiseSFX_DoorSlam:
0884D                           	noise_envelope 0, 15
0884D                           	IF 0 < 1
0884D 4F                        		.db $40 + 15
0884E                           	ELSE
0884E                           		.db (0 << 4) + 15
0884E                           	ENDIF
0884E                           	noise_note 2, 0, 13
0884E 0D                        	.db (0 << 7) + 13
0884F                           	IF 2 > 1
0884F                           		REPT 2 - 1
0884F                           			.db $7e
0884F                           		ENDR
0884F 7E                        			.db $7e
08850                           	ENDIF
08850                           	noise_note 2, 1, 13
08850 8D                        	.db (1 << 7) + 13
08851                           	IF 2 > 1
08851                           		REPT 2 - 1
08851                           			.db $7e
08851                           		ENDR
08851 7E                        			.db $7e
08852                           	ENDIF
08852                           	noise_note 60, 0, 12
08852 0C                        	.db (0 << 7) + 12
08853                           	IF 60 > 1
08853                           		REPT 60 - 1
08853                           			.db $7e
08853                           		ENDR
08853 7E                        			.db $7e
08854 7E                        			.db $7e
08855 7E                        			.db $7e
08856 7E                        			.db $7e
08857 7E                        			.db $7e
08858 7E                        			.db $7e
08859 7E                        			.db $7e
0885A 7E                        			.db $7e
0885B 7E                        			.db $7e
0885C 7E                        			.db $7e
0885D 7E                        			.db $7e
0885E 7E                        			.db $7e
0885F 7E                        			.db $7e
08860 7E                        			.db $7e
08861 7E                        			.db $7e
08862 7E                        			.db $7e
08863 7E                        			.db $7e
08864 7E                        			.db $7e
08865 7E                        			.db $7e
08866 7E                        			.db $7e
08867 7E                        			.db $7e
08868 7E                        			.db $7e
08869 7E                        			.db $7e
0886A 7E                        			.db $7e
0886B 7E                        			.db $7e
0886C 7E                        			.db $7e
0886D 7E                        			.db $7e
0886E 7E                        			.db $7e
0886F 7E                        			.db $7e
08870 7E                        			.db $7e
08871 7E                        			.db $7e
08872 7E                        			.db $7e
08873 7E                        			.db $7e
08874 7E                        			.db $7e
08875 7E                        			.db $7e
08876 7E                        			.db $7e
08877 7E                        			.db $7e
08878 7E                        			.db $7e
08879 7E                        			.db $7e
0887A 7E                        			.db $7e
0887B 7E                        			.db $7e
0887C 7E                        			.db $7e
0887D 7E                        			.db $7e
0887E 7E                        			.db $7e
0887F 7E                        			.db $7e
08880 7E                        			.db $7e
08881 7E                        			.db $7e
08882 7E                        			.db $7e
08883 7E                        			.db $7e
08884 7E                        			.db $7e
08885 7E                        			.db $7e
08886 7E                        			.db $7e
08887 7E                        			.db $7e
08888 7E                        			.db $7e
08889 7E                        			.db $7e
0888A 7E                        			.db $7e
0888B 7E                        			.db $7e
0888C 7E                        			.db $7e
0888D 7E                        			.db $7e
0888E                           	ENDIF
0888E                           	noise_ret
0888E 00                        	.db 0
0888F                           
0888F                           NoiseSFX_Sink:
0888F                           	noise_envelope 1, 7
0888F                           	IF 1 < 1
0888F                           		.db $40 + 7
0888F                           	ELSE
0888F 17                        		.db (1 << 4) + 7
08890                           	ENDIF
08890                           	noise_note 3, 0, 1
08890 01                        	.db (0 << 7) + 1
08891                           	IF 3 > 1
08891                           		REPT 3 - 1
08891                           			.db $7e
08891                           		ENDR
08891 7E                        			.db $7e
08892 7E                        			.db $7e
08893                           	ENDIF
08893                           	noise_envelope 1, 6
08893                           	IF 1 < 1
08893                           		.db $40 + 6
08893                           	ELSE
08893 16                        		.db (1 << 4) + 6
08894                           	ENDIF
08894                           	noise_note 3, 0, 2
08894 02                        	.db (0 << 7) + 2
08895                           	IF 3 > 1
08895                           		REPT 3 - 1
08895                           			.db $7e
08895                           		ENDR
08895 7E                        			.db $7e
08896 7E                        			.db $7e
08897                           	ENDIF
08897                           	noise_ret
08897 00                        	.db 0
08898                           
08898                           NoiseSFX_None:
08898                           	noise_ret
08898 00                        	.db 0
08899                           
08899                           ; DPCM sound effect data
08899                           .include "src/sound/dpcm-sfx-data.asm"08899                           ; define a DPCM address
08899                           MACRO dmc_sfx address
08899                           	.db (address & %0011111111000000) >> 6
08899                           ENDM
08899                           
08899                           DMCStartTable:
08899                           	dmc_sfx $c000 ; exclamation
08899 00                        	.db ($c000 & %0011111111000000) >> 6
0889A                           	dmc_sfx $cb00
0889A 2C                        	.db ($cb00 & %0011111111000000) >> 6
0889B                           	dmc_sfx $d600
0889B 58                        	.db ($d600 & %0011111111000000) >> 6
0889C                           	dmc_sfx $c480 ; cursor
0889C 12                        	.db ($c480 & %0011111111000000) >> 6
0889D                           	dmc_sfx $cf80
0889D 3E                        	.db ($cf80 & %0011111111000000) >> 6
0889E                           	dmc_sfx $c000
0889E 00                        	.db ($c000 & %0011111111000000) >> 6
0889F                           	dmc_sfx $c580 ; select
0889F 16                        	.db ($c580 & %0011111111000000) >> 6
088A0                           	dmc_sfx $d080
088A0 42                        	.db ($d080 & %0011111111000000) >> 6
088A1                           	dmc_sfx $da80
088A1 6A                        	.db ($da80 & %0011111111000000) >> 6
088A2                           	dmc_sfx $c000 ; emote 1
088A2 00                        	.db ($c000 & %0011111111000000) >> 6
088A3                           	dmc_sfx $d400
088A3 50                        	.db ($d400 & %0011111111000000) >> 6
088A4                           	dmc_sfx $c100
088A4 04                        	.db ($c100 & %0011111111000000) >> 6
088A5                           	dmc_sfx $c000 ; emote 2
088A5 00                        	.db ($c000 & %0011111111000000) >> 6
088A6                           	dmc_sfx $c540
088A6 15                        	.db ($c540 & %0011111111000000) >> 6
088A7                           	dmc_sfx $c800
088A7 20                        	.db ($c800 & %0011111111000000) >> 6
088A8                           	dmc_sfx $c740 ; emote 3
088A8 1D                        	.db ($c740 & %0011111111000000) >> 6
088A9                           	dmc_sfx $ccc0
088A9 33                        	.db ($ccc0 & %0011111111000000) >> 6
088AA                           	dmc_sfx $c000
088AA 00                        	.db ($c000 & %0011111111000000) >> 6
088AB                           	dmc_sfx $cec0 ; emote 4
088AB 3B                        	.db ($cec0 & %0011111111000000) >> 6
088AC                           	dmc_sfx $dac0
088AC 6B                        	.db ($dac0 & %0011111111000000) >> 6
088AD                           	dmc_sfx $d800
088AD 60                        	.db ($d800 & %0011111111000000) >> 6
088AE                           	dmc_sfx $d740 ; emote 5
088AE 5D                        	.db ($d740 & %0011111111000000) >> 6
088AF                           	dmc_sfx $d440
088AF 51                        	.db ($d440 & %0011111111000000) >> 6
088B0                           	dmc_sfx $cb00
088B0 2C                        	.db ($cb00 & %0011111111000000) >> 6
088B1                           	dmc_sfx $dcc0 ; percussion
088B1 73                        	.db ($dcc0 & %0011111111000000) >> 6
088B2                           	dmc_sfx $dd40
088B2 75                        	.db ($dd40 & %0011111111000000) >> 6
088B3                           	dmc_sfx $de00
088B3 78                        	.db ($de00 & %0011111111000000) >> 6
088B4                           	dmc_sfx $dfff ; nothing
088B4 7F                        	.db ($dfff & %0011111111000000) >> 6
088B5                           	dmc_sfx $dfff
088B5 7F                        	.db ($dfff & %0011111111000000) >> 6
088B6                           
088B6                           DMCLengthTable:
088B6 46 45 45                  	.db $46, $45, $45 ; exclamation
088B9 0D 0D 0D                  	.db $0d, $0d, $0d ; cursor
088BC 57 57 57                  	.db $57, $57, $57 ; select
088BF 74 8C 70                  	.db $74, $8c, $70 ; emote 1
088C2 54 78 FF                  	.db $54, $78, $ff ; emote 2
088C5 76 75 AF                  	.db $76, $75, $af ; emote 3
088C8 87 51 2B                  	.db $87, $51, $2b ; emote 4
088CB 7A 69 8C                  	.db $7a, $69, $8c ; emote 5
088CE 07 09 09                  	.db $07, $09, $09 ; percussion
088D1 03 03                     	.db $03, $03      ; nothing
088D3                           
088D3                           DMCBankTable:
088D3                           	audio_bank PRG_DPCM0 ; exclamation
088D3 F0                        	.db $80 | PRG_DPCM0
088D4                           	audio_bank PRG_DPCM0
088D4 F0                        	.db $80 | PRG_DPCM0
088D5                           	audio_bank PRG_DPCM0
088D5 F0                        	.db $80 | PRG_DPCM0
088D6                           	audio_bank PRG_DPCM0 ; cursor
088D6 F0                        	.db $80 | PRG_DPCM0
088D7                           	audio_bank PRG_DPCM0
088D7 F0                        	.db $80 | PRG_DPCM0
088D8                           	audio_bank PRG_DPCM1
088D8 F1                        	.db $80 | PRG_DPCM1
088D9                           	audio_bank PRG_DPCM0 ; select
088D9 F0                        	.db $80 | PRG_DPCM0
088DA                           	audio_bank PRG_DPCM0
088DA F0                        	.db $80 | PRG_DPCM0
088DB                           	audio_bank PRG_DPCM0
088DB F0                        	.db $80 | PRG_DPCM0
088DC                           	audio_bank PRG_DPCM3 ; emote 1
088DC F3                        	.db $80 | PRG_DPCM3
088DD                           	audio_bank PRG_DPCM2
088DD F2                        	.db $80 | PRG_DPCM2
088DE                           	audio_bank PRG_DPCM1
088DE F1                        	.db $80 | PRG_DPCM1
088DF                           	audio_bank PRG_DPCM4 ; emote 2
088DF F4                        	.db $80 | PRG_DPCM4
088E0                           	audio_bank PRG_DPCM4
088E0 F4                        	.db $80 | PRG_DPCM4
088E1                           	audio_bank PRG_DPCM1
088E1 F1                        	.db $80 | PRG_DPCM1
088E2                           	audio_bank PRG_DPCM3 ; emote 3
088E2 F3                        	.db $80 | PRG_DPCM3
088E3                           	audio_bank PRG_DPCM4
088E3 F4                        	.db $80 | PRG_DPCM4
088E4                           	audio_bank PRG_DPCM2
088E4 F2                        	.db $80 | PRG_DPCM2
088E5                           	audio_bank PRG_DPCM3 ; emote 4
088E5 F3                        	.db $80 | PRG_DPCM3
088E6                           	audio_bank PRG_DPCM1
088E6 F1                        	.db $80 | PRG_DPCM1
088E7                           	audio_bank PRG_DPCM1
088E7 F1                        	.db $80 | PRG_DPCM1
088E8                           	audio_bank PRG_DPCM3 ; emote 5
088E8 F3                        	.db $80 | PRG_DPCM3
088E9                           	audio_bank PRG_DPCM4
088E9 F4                        	.db $80 | PRG_DPCM4
088EA                           	audio_bank PRG_DPCM2
088EA F2                        	.db $80 | PRG_DPCM2
088EB                           	audio_bank PRG_DPCM2 ; percussion
088EB F2                        	.db $80 | PRG_DPCM2
088EC                           	audio_bank PRG_DPCM2
088EC F2                        	.db $80 | PRG_DPCM2
088ED                           	audio_bank PRG_DPCM2
088ED F2                        	.db $80 | PRG_DPCM2
088EE                           	audio_bank PRG_DPCM2 ; nothing
088EE F2                        	.db $80 | PRG_DPCM2
088EF                           	audio_bank PRG_DPCM2
088EF F2                        	.db $80 | PRG_DPCM2
088F0                           
088F0                           DMCPitchTable:
088F0 0F 0F 0F                  	.db $f, $f, $f ; exclamation
088F3 0F 0F 0F                  	.db $f, $f, $f ; cursor
088F6 0F 0F 0F                  	.db $f, $f, $f ; select
088F9 0F 0F 0E                  	.db $f, $f, $e ; emote 1
088FC 0F 0F 0D                  	.db $f, $f, $d ; emote 2
088FF 0F 0F 0E                  	.db $f, $f, $e ; emote 3
08902 0F 0F 0E                  	.db $f, $f, $e ; emote 4
08905 0F 0F 0E                  	.db $f, $f, $e ; emote 5
08908 0E 0F 0A                  	.db $e, $f, $a ; percussion
0890B 00 00                     	.db $0, $0     ; nothing
0890D 00 00 00 00 00 00 00 00.. .pad $a000, $00
0A000                           
0A000                           ; bank 04 - music bank
0A000                           .base $a000
0A000                           .include "src/music-0.asm"
0A000                           .include "src/sound/music-part-pointers-1.asm"
0A000                           ;
0A000                           ; Music Part Pointers
0A000                           ; ===================
0A000                           ;
0A000                           ; These are the pointers to various music segments used to cue those themes in
0A000                           ; the game as well as handle relative offsets for looping segments
0A000                           ;
0A000                           MusicPartPointers:
0A000                           Audio1_MusicPartPointers:
0A000                           
0A000                           MusicPartPointers_Title:
0A000                           	musicHeaderPointer MusicHeaderTitle1
0A000 00                        	.db (MusicHeaderTitle1 - MusicHeaders)
0A001                           MusicPartPointers_TitleLoop:
0A001                           	musicHeaderPointer MusicHeaderTitle2
0A001 07                        	.db (MusicHeaderTitle2 - MusicHeaders)
0A002                           	musicHeaderPointer MusicHeaderTitle3
0A002 0E                        	.db (MusicHeaderTitle3 - MusicHeaders)
0A003                           	musicHeaderPointer MusicHeaderTitle4
0A003 15                        	.db (MusicHeaderTitle4 - MusicHeaders)
0A004                           	musicHeaderPointer MusicHeaderTitle5
0A004 1C                        	.db (MusicHeaderTitle5 - MusicHeaders)
0A005                           	musicHeaderPointer MusicHeaderTitle6
0A005 23                        	.db (MusicHeaderTitle6 - MusicHeaders)
0A006                           	musicHeaderPointer MusicHeaderTitle7
0A006 2A                        	.db (MusicHeaderTitle7 - MusicHeaders)
0A007                           	musicHeaderPointer MusicHeaderTitle8
0A007 31                        	.db (MusicHeaderTitle8 - MusicHeaders)
0A008                           	musicHeaderPointer MusicHeaderTitle9
0A008 38                        	.db (MusicHeaderTitle9 - MusicHeaders)
0A009                           MusicPartPointers_TitleEnd:
0A009                           	musicHeaderPointer MusicHeaderTitle10
0A009 3F                        	.db (MusicHeaderTitle10 - MusicHeaders)
0A00A                           
0A00A FF FF FF FF FF FF FF FF.. .pad MusicPartPointers + $100, $ff0A100                           .include "src/sound/music-headers-1.asm"
0A100                           ;
0A100                           ; Music Headers
0A100                           ; =============
0A100                           ;
0A100                           ; These are broken down by song segment and point to the note length table and
0A100                           ; and individual channel data. Square 2 is the main pointer, and triangle,
0A100                           ; square 1, and noise are stored as offets relative to the main pointer.
0A100                           ;
0A100                           ; Bytes:
0A100                           ;   00: Note length table (from $8F00)
0A100                           ;   01: Main address / Square 2 (lo)
0A100                           ;   02: Main address / Square 2 (hi)
0A100                           ;   03: Triangle offset from Square 1
0A100                           ;   04: Square 1 offset from Square 2
0A100                           ;   05: Noise offset from Triangle
0A100                           ;   06: DPCM offset from Noise
0A100                           ;
0A100                           ; For the musicHeader macro, specifying $00 is "none", -1 for noise/pcm is "omit".
0A100                           ;
0A100                           ; This turns out to be important because the music part pointers are stored as
0A100                           ; offsets from MusicPartPointers, which means they can't be larger than $FF!
0A100                           ;
0A100                           MusicHeaders:
0A100                           Audio1_MusicHeaders:
0A100                           
0A100                           ; ----------------------------------------
0A100                           ; Title Screen
0A100                           MusicHeaderTitle1:
0A100                           	musicHeader NLT_Title, MusDTitle1, MusDTitle1_Hill, MusDTitle1_SQ1, MusDTitle1_Noise, MusDTitle1_DPCM
0A100 64                        	.db NLT_Title
0A101 CE A4                     	.dw MusDTitle1
0A103 3F                        	.db (MusDTitle1_Hill - MusDTitle1_SQ1)
0A104 4B                        	.db (MusDTitle1_SQ1 - MusDTitle1)
0A105                           
0A105                           	IF MusDTitle1_Noise > 0
0A105 40                        		.db (MusDTitle1_Noise - MusDTitle1_Hill)
0A106                           	ENDIF
0A106                           	IF MusDTitle1_DPCM > 0
0A106 7F                        		.db (MusDTitle1_DPCM - MusDTitle1_Noise)
0A107                           	ENDIF
0A107                           
0A107                           MusicHeaderTitle2:
0A107                           	musicHeader NLT_Title, MusDTitle2, MusDTitle2_Hill, MusDTitle2_SQ1, MusDTitle2_Noise, MusDTitle2_DPCM
0A107 64                        	.db NLT_Title
0A108 E3 A4                     	.dw MusDTitle2
0A10A 4D                        	.db (MusDTitle2_Hill - MusDTitle2_SQ1)
0A10B 47                        	.db (MusDTitle2_SQ1 - MusDTitle2)
0A10C                           
0A10C                           	IF MusDTitle2_Noise > 0
0A10C 46                        		.db (MusDTitle2_Noise - MusDTitle2_Hill)
0A10D                           	ENDIF
0A10D                           	IF MusDTitle2_DPCM > 0
0A10D 5A                        		.db (MusDTitle2_DPCM - MusDTitle2_Noise)
0A10E                           	ENDIF
0A10E                           
0A10E                           MusicHeaderTitle3:
0A10E                           	musicHeader NLT_Title, MusDTitle3, MusDTitle3_Hill, MusDTitle3_SQ1, MusDTitle3_Noise, MusDTitle3_DPCM
0A10E 64                        	.db NLT_Title
0A10F E3 A4                     	.dw MusDTitle3
0A111 4D                        	.db (MusDTitle3_Hill - MusDTitle3_SQ1)
0A112 47                        	.db (MusDTitle3_SQ1 - MusDTitle3)
0A113                           
0A113                           	IF MusDTitle3_Noise > 0
0A113 63                        		.db (MusDTitle3_Noise - MusDTitle3_Hill)
0A114                           	ENDIF
0A114                           	IF MusDTitle3_DPCM > 0
0A114 3D                        		.db (MusDTitle3_DPCM - MusDTitle3_Noise)
0A115                           	ENDIF
0A115                           
0A115                           MusicHeaderTitle4:
0A115                           	musicHeader NLT_Title, MusDTitle4, MusDTitle4_Hill, MusDTitle4_SQ1, MusDTitle4_Noise, MusDTitle4_DPCM
0A115 64                        	.db NLT_Title
0A116 09 A5                     	.dw MusDTitle4
0A118 28                        	.db (MusDTitle4_Hill - MusDTitle4_SQ1)
0A119 46                        	.db (MusDTitle4_SQ1 - MusDTitle4)
0A11A                           
0A11A                           	IF MusDTitle4_Noise > 0
0A11A 83                        		.db (MusDTitle4_Noise - MusDTitle4_Hill)
0A11B                           	ENDIF
0A11B                           	IF MusDTitle4_DPCM > 0
0A11B 1D                        		.db (MusDTitle4_DPCM - MusDTitle4_Noise)
0A11C                           	ENDIF
0A11C                           
0A11C                           MusicHeaderTitle5:
0A11C                           	musicHeader NLT_Title, MusDTitle5, MusDTitle5_Hill, MusDTitle5_SQ1, MusDTitle5_Noise, MusDTitle5_DPCM
0A11C 64                        	.db NLT_Title
0A11D 09 A5                     	.dw MusDTitle5
0A11F 28                        	.db (MusDTitle5_Hill - MusDTitle5_SQ1)
0A120 46                        	.db (MusDTitle5_SQ1 - MusDTitle5)
0A121                           
0A121                           	IF MusDTitle5_Noise > 0
0A121 63                        		.db (MusDTitle5_Noise - MusDTitle5_Hill)
0A122                           	ENDIF
0A122                           	IF MusDTitle5_DPCM > 0
0A122 3D                        		.db (MusDTitle5_DPCM - MusDTitle5_Noise)
0A123                           	ENDIF
0A123                           
0A123                           MusicHeaderTitle6:
0A123                           	musicHeader NLT_Title, MusDTitle6, MusDTitle6_Hill, MusDTitle6_SQ1, MusDTitle6_Noise, MusDTitle6_DPCM
0A123 64                        	.db NLT_Title
0A124 3C A6                     	.dw MusDTitle6
0A126 03                        	.db (MusDTitle6_Hill - MusDTitle6_SQ1)
0A127 0A                        	.db (MusDTitle6_SQ1 - MusDTitle6)
0A128                           
0A128                           	IF MusDTitle6_Noise > 0
0A128 0C                        		.db (MusDTitle6_Noise - MusDTitle6_Hill)
0A129                           	ENDIF
0A129                           	IF MusDTitle6_DPCM > 0
0A129 0F                        		.db (MusDTitle6_DPCM - MusDTitle6_Noise)
0A12A                           	ENDIF
0A12A                           
0A12A                           MusicHeaderTitle7:
0A12A                           	musicHeader NLT_Title, MusDTitle7, MusDTitle7_Hill, MusDTitle7_SQ1, MusDTitle7_Noise, MusDTitle7_DPCM
0A12A 64                        	.db NLT_Title
0A12B 74 A6                     	.dw MusDTitle7
0A12D E3                        	.db (MusDTitle7_Hill - MusDTitle7_SQ1)
0A12E 0E                        	.db (MusDTitle7_SQ1 - MusDTitle7)
0A12F                           
0A12F                           	IF MusDTitle7_Noise > 0
0A12F 22                        		.db (MusDTitle7_Noise - MusDTitle7_Hill)
0A130                           	ENDIF
0A130                           	IF MusDTitle7_DPCM > 0
0A130 5D                        		.db (MusDTitle7_DPCM - MusDTitle7_Noise)
0A131                           	ENDIF
0A131                           
0A131                           MusicHeaderTitle8:
0A131                           	musicHeader NLT_Title, MusDTitle8, MusDTitle8_Hill, MusDTitle8_SQ1, MusDTitle8_Noise, MusDTitle8_DPCM
0A131 64                        	.db NLT_Title
0A132 09 A8                     	.dw MusDTitle8
0A134 46                        	.db (MusDTitle8_Hill - MusDTitle8_SQ1)
0A135 0D                        	.db (MusDTitle8_SQ1 - MusDTitle8)
0A136                           
0A136                           	IF MusDTitle8_Noise > 0
0A136 21                        		.db (MusDTitle8_Noise - MusDTitle8_Hill)
0A137                           	ENDIF
0A137                           	IF MusDTitle8_DPCM > 0
0A137 25                        		.db (MusDTitle8_DPCM - MusDTitle8_Noise)
0A138                           	ENDIF
0A138                           
0A138                           MusicHeaderTitle9:
0A138                           	musicHeader NLT_Title, MusDTitle9, MusDTitle9_Hill, MusDTitle9_SQ1, MusDTitle9_Noise, MusDTitle9_DPCM
0A138 64                        	.db NLT_Title
0A139 C5 A8                     	.dw MusDTitle9
0A13B 7A                        	.db (MusDTitle9_Hill - MusDTitle9_SQ1)
0A13C 13                        	.db (MusDTitle9_SQ1 - MusDTitle9)
0A13D                           
0A13D                           	IF MusDTitle9_Noise > 0
0A13D 19                        		.db (MusDTitle9_Noise - MusDTitle9_Hill)
0A13E                           	ENDIF
0A13E                           	IF MusDTitle9_DPCM > 0
0A13E 2F                        		.db (MusDTitle9_DPCM - MusDTitle9_Noise)
0A13F                           	ENDIF
0A13F                           
0A13F                           MusicHeaderTitle10:
0A13F                           	musicHeader NLT_Title, MusDTitle10, MusDTitle10_Hill, MusDTitle10_SQ1, MusDTitle10_Noise, MusDTitle10_DPCM
0A13F 64                        	.db NLT_Title
0A140 AC A9                     	.dw MusDTitle10
0A142 7B                        	.db (MusDTitle10_Hill - MusDTitle10_SQ1)
0A143 4D                        	.db (MusDTitle10_SQ1 - MusDTitle10)
0A144                           
0A144                           	IF MusDTitle10_Noise > 0
0A144 2E                        		.db (MusDTitle10_Noise - MusDTitle10_Hill)
0A145                           	ENDIF
0A145                           	IF MusDTitle10_DPCM > 0
0A145 68                        		.db (MusDTitle10_DPCM - MusDTitle10_Noise)
0A146                           	ENDIF
0A146                           
0A146 FF FF FF FF FF FF FF FF.. .pad MusicHeaders + $100, $ff0A200                           .include "src/sound/music-pointers-1.asm"
0A200                           MusicPointersFirstPart:
0A200                           	musicPart MusicPartPointers_Title
0A200 00                        	.db (MusicPartPointers_Title - MusicPartPointers)
0A201                           	musicPart MusicPartPointers_Title
0A201 00                        	.db (MusicPartPointers_Title - MusicPartPointers)
0A202                           
0A202 FF FF FF FF FF FF FF FF.. .pad MusicPointersFirstPart + $20, $FF
0A220                           
0A220                           MusicPointersLoopPart:
0A220                           	musicPart MusicPartPointers_TitleLoop
0A220 01                        	.db (MusicPartPointers_TitleLoop - MusicPartPointers)
0A221                           	musicPart MusicPartPointers_TitleLoop
0A221 01                        	.db (MusicPartPointers_TitleLoop - MusicPartPointers)
0A222                           
0A222 FF FF FF FF FF FF FF FF.. .pad MusicPointersLoopPart + $20, $FF
0A240                           
0A240                           MusicPointersEndPart:
0A240                           	musicPart MusicPartPointers_TitleEnd
0A240 09                        	.db (MusicPartPointers_TitleEnd - MusicPartPointers)
0A241                           	musicPart MusicPartPointers_TitleEnd
0A241 09                        	.db (MusicPartPointers_TitleEnd - MusicPartPointers)
0A242                           
0A242 FF FF FF FF FF FF FF FF.. .pad MusicPointersEndPart + $20, $FF0A260                           .include "src/sound/instruments-1.asm"
0A260                           Duty0 = -48
0A260                           Duty1 = 16
0A260                           Duty2 = 80
0A260                           
0A260                           InstrumentDVE_80:
0A260                           Audio1_InstrumentDVE_80:
0A260 50 51 51 51 51 51 51 51.. 	.db "@AAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBCCCCCCCCCCCCDDDDDDDEE" + Duty1
0A29C 12                        	.db "B" + Duty0
0A29D 93                        	.db "C" + Duty2
0A29E 52                        	.db "B" + Duty1
0A29F 11                        	.db "A" + Duty0
0A2A0                           
0A2A0                           InstrumentDVE_80_Short:
0A2A0                           Audio1_InstrumentDVE_80_Short:
0A2A0 50 51 51 51 51 51 51 51.. 	.db "@AAAAAAAAABBBBCCCDD" + Duty1
0A2B3 12                        	.db "B" + Duty0
0A2B4 93                        	.db "C" + Duty2
0A2B5 52                        	.db "B" + Duty1
0A2B6 11                        	.db "A" + Duty0
0A2B7                           
0A2B7                           InstrumentDVE_90_E0:
0A2B7                           Audio1_InstrumentDVE_90_E0:
0A2B7 90 91 91 91 91 91 91 91.. 	.db "@AAAAAAAABBBBBBBBCCCCCCCCDDDDDDEEEEEFFFFFGGGGGGHHHHIIJJKKLMMNOKG" + Duty2
0A2F7                           
0A2F7                           InstrumentDVE_90_E0_Short:
0A2F7                           Audio1_InstrumentDVE_90_E0_Short:
0A2F7 90 91 92 93 93 94 95 95.. 	.db "@ABCCDEEFFGGHIIJJKLOMKG" + Duty2
0A30E                           
0A30E                           InstrumentDVE_A0:
0A30E                           Audio1_InstrumentDVE_A0:
0A30E 10 11 11 11 11 11 11 11.. 	.db "@AAAAAAAABBBBBBBBCCCCCCCCDDDDDDEEEEEFFFFFGGGGGGHHHHIIJJKKLMMNOKG" + Duty0
0A34E                           
0A34E                           InstrumentDVE_A0_Short:
0A34E                           Audio1_InstrumentDVE_A0_Short:
0A34E 10 11 12 13 13 14 15 15.. 	.db "@ABCCDEEFFGGHIIJJKLOMKG" + Duty0
0A365                           
0A365                           InstrumentDVE_B0:
0A365                           Audio1_InstrumentDVE_B0:
0A365 50 51 51 52 52 53 53 54.. 	.db "@AABBCCDDEEFFGHIJKLMNNMMMNNNNMMMNNNNMMMNNNNMMMNNNNMMMNNNNMMMNNLF" + Duty1
0A3A5                           
0A3A5                           InstrumentDVE_B0_Short:
0A3A5                           Audio1_InstrumentDVE_B0_Short:
0A3A5 50 51 52 53 54 55 56 57.. 	.db "@ABCDEFGHIJKLMNNMMMNNLF" + Duty1
0A3BC                           
0A3BC                           InstrumentDVE_C0:
0A3BC                           Audio1_InstrumentDVE_C0:
0A3BC 50 51 51 51 52 52 52 53.. 	.db "@AAABBBCCCDDDEEEFFFGGGFFFFEEEDDDEEEFFFFGGGFFFFEEEDDEEEFFFFGGGHIF" + Duty1
0A3FC                           
0A3FC                           InstrumentDVE_C0_Short:
0A3FC                           Audio1_InstrumentDVE_C0_Short:
0A3FC 50 51 51 51 52 52 53 53.. 	.db "@AAABBCCDDEEEFFFFGGGHIF" + Duty1
0A413                           
0A413                           InstrumentDVE_D0:
0A413                           Audio1_InstrumentDVE_D0:
0A413 90 91 91 91 92 92 92 93.. 	.db "@AAABBBCCDDEEFFGGEFGEFGEFGEFGEFGEFGEFGEFGEFGEFGEFGEFGEFGFGFGHGF" + Duty2
0A452 14                        	.db "D" + Duty0
0A453                           
0A453                           InstrumentDVE_D0_Short:
0A453                           Audio1_InstrumentDVE_D0_Short:
0A453 90 91 91 91 92 92 92 93.. 	.db "@AAABBBCCDDEEFGFGFGHGF" + Duty2
0A469 14                        	.db "D" + Duty0
0A46A                           
0A46A                           InstrumentDVE_F0:
0A46A                           Audio1_InstrumentDVE_F0:
0A46A 50 50 50 50 50 50 50 50.. 	.db "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AABBCCDDEFGH" + Duty1
0A4A9 94                        	.db "D" + Duty2
0A4AA                           
0A4AA                           InstrumentDVE_F0_Short:
0A4AA                           Audio1_InstrumentDVE_F0_Short:
0A4AA 50 50 50 50 50 50 50 50.. 	.db "@@@@@@@@@@AABBCCDDEFGH" + Duty1
0A4C0 94                        	.db "D" + Duty2
0A4C1                           
0A4C1                           NoteLengthMultipliers:
0A4C1                           Audio1_NoteLengthMultipliers:
0A4C1 0C 06 10 10 18 24 20 50.. 	.db $0C, $06, $10, $10, $18, $24, $20, $50, $30, $48, $60, $90, $C00A4CE                           
0A4CE                           .include "src/sound/music/title-1-5.asm"
0A4CE                           MusDTitle1:
0A4CE                           MusDTitle1_SQ2:
0A4CE                           	note_type 1, 12
0A4CE                           i = (1 - 1) << 4
0A4CE 8C                        	.db $80 + i + 12
0A4CF                           	rest
0A4CF 7E                        	.db $7E
0A4D0                           	rest
0A4D0 7E                        	.db $7E
0A4D1                           	rest
0A4D1 7E                        	.db $7E
0A4D2                           	rest
0A4D2 7E                        	.db $7E
0A4D3                           	rest
0A4D3 7E                        	.db $7E
0A4D4                           	rest
0A4D4 7E                        	.db $7E
0A4D5                           	note_type 1, 1
0A4D5                           i = (1 - 1) << 4
0A4D5 81                        	.db $80 + i + 1
0A4D6                           	rest
0A4D6 7E                        	.db $7E
0A4D7                           	note E_, 3
0A4D7                           o = (3 - 1) * $18
0A4D7 38                        	.db E_ + o
0A4D8                           	note_type 1, 11
0A4D8                           i = (1 - 1) << 4
0A4D8 8B                        	.db $80 + i + 11
0A4D9                           	note A_, 3
0A4D9                           o = (3 - 1) * $18
0A4D9 42                        	.db A_ + o
0A4DA                           	note_type 1, 5
0A4DA                           i = (1 - 1) << 4
0A4DA 85                        	.db $80 + i + 5
0A4DB                           	rest
0A4DB 7E                        	.db $7E
0A4DC                           	note_type 1, 9
0A4DC                           i = (1 - 1) << 4
0A4DC 89                        	.db $80 + i + 9
0A4DD                           	note E_, 3
0A4DD                           o = (3 - 1) * $18
0A4DD 38                        	.db E_ + o
0A4DE                           	note_type 1, 4
0A4DE                           i = (1 - 1) << 4
0A4DE 84                        	.db $80 + i + 4
0A4DF                           	note E_, 3
0A4DF                           o = (3 - 1) * $18
0A4DF 38                        	.db E_ + o
0A4E0                           	note_type 1, 10
0A4E0                           i = (1 - 1) << 4
0A4E0 8A                        	.db $80 + i + 10
0A4E1                           	note D#, 3
0A4E1                           o = (3 - 1) * $18
0A4E1 36                        	.db D# + o
0A4E2                           	sound_ret
0A4E2 00                        	.db $00
0A4E3                           
0A4E3                           MusDTitle2:
0A4E3                           MusDTitle2_SQ2:
0A4E3                           MusDTitle3:
0A4E3                           MusDTitle3_SQ2:
0A4E3                           	note_type 1, 4
0A4E3                           i = (1 - 1) << 4
0A4E3 84                        	.db $80 + i + 4
0A4E4                           	note E_, 2
0A4E4                           o = (2 - 1) * $18
0A4E4 20                        	.db E_ + o
0A4E5                           	note E_, 2
0A4E5                           o = (2 - 1) * $18
0A4E5 20                        	.db E_ + o
0A4E6                           	note E_, 3
0A4E6                           o = (3 - 1) * $18
0A4E6 38                        	.db E_ + o
0A4E7                           	note E_, 2
0A4E7                           o = (2 - 1) * $18
0A4E7 20                        	.db E_ + o
0A4E8                           	note E_, 2
0A4E8                           o = (2 - 1) * $18
0A4E8 20                        	.db E_ + o
0A4E9                           	note_type 1, 8
0A4E9                           i = (1 - 1) << 4
0A4E9 88                        	.db $80 + i + 8
0A4EA                           	note E_, 3
0A4EA                           o = (3 - 1) * $18
0A4EA 38                        	.db E_ + o
0A4EB                           	note_type 1, 4
0A4EB                           i = (1 - 1) << 4
0A4EB 84                        	.db $80 + i + 4
0A4EC                           	note E_, 3
0A4EC                           o = (3 - 1) * $18
0A4EC 38                        	.db E_ + o
0A4ED                           	note D_, 2
0A4ED                           o = (2 - 1) * $18
0A4ED 1C                        	.db D_ + o
0A4EE                           	note D_, 2
0A4EE                           o = (2 - 1) * $18
0A4EE 1C                        	.db D_ + o
0A4EF                           	note E_, 3
0A4EF                           o = (3 - 1) * $18
0A4EF 38                        	.db E_ + o
0A4F0                           	note D_, 2
0A4F0                           o = (2 - 1) * $18
0A4F0 1C                        	.db D_ + o
0A4F1                           	note D_, 2
0A4F1                           o = (2 - 1) * $18
0A4F1 1C                        	.db D_ + o
0A4F2                           	note_type 1, 8
0A4F2                           i = (1 - 1) << 4
0A4F2 88                        	.db $80 + i + 8
0A4F3                           	note E_, 3
0A4F3                           o = (3 - 1) * $18
0A4F3 38                        	.db E_ + o
0A4F4                           	note_type 1, 4
0A4F4                           i = (1 - 1) << 4
0A4F4 84                        	.db $80 + i + 4
0A4F5                           	note E_, 3
0A4F5                           o = (3 - 1) * $18
0A4F5 38                        	.db E_ + o
0A4F6                           	note A_, 2
0A4F6                           o = (2 - 1) * $18
0A4F6 2A                        	.db A_ + o
0A4F7                           	note A_, 2
0A4F7                           o = (2 - 1) * $18
0A4F7 2A                        	.db A_ + o
0A4F8                           	note E_, 3
0A4F8                           o = (3 - 1) * $18
0A4F8 38                        	.db E_ + o
0A4F9                           	note A_, 2
0A4F9                           o = (2 - 1) * $18
0A4F9 2A                        	.db A_ + o
0A4FA                           	note A_, 2
0A4FA                           o = (2 - 1) * $18
0A4FA 2A                        	.db A_ + o
0A4FB                           	note A_, 2
0A4FB                           o = (2 - 1) * $18
0A4FB 2A                        	.db A_ + o
0A4FC                           	note_type 1, 8
0A4FC                           i = (1 - 1) << 4
0A4FC 88                        	.db $80 + i + 8
0A4FD                           	note E_, 3
0A4FD                           o = (3 - 1) * $18
0A4FD 38                        	.db E_ + o
0A4FE                           	note_type 1, 4
0A4FE                           i = (1 - 1) << 4
0A4FE 84                        	.db $80 + i + 4
0A4FF                           	note E_, 3
0A4FF                           o = (3 - 1) * $18
0A4FF 38                        	.db E_ + o
0A500                           	note F#, 3
0A500                           o = (3 - 1) * $18
0A500 3C                        	.db F# + o
0A501                           	note B_, 2
0A501                           o = (2 - 1) * $18
0A501 2E                        	.db B_ + o
0A502                           	note_type 1, 8
0A502                           i = (1 - 1) << 4
0A502 88                        	.db $80 + i + 8
0A503                           	note F#, 3
0A503                           o = (3 - 1) * $18
0A503 3C                        	.db F# + o
0A504                           	note_type 1, 4
0A504                           i = (1 - 1) << 4
0A504 84                        	.db $80 + i + 4
0A505                           	note F#, 3
0A505                           o = (3 - 1) * $18
0A505 3C                        	.db F# + o
0A506                           	note F#, 3
0A506                           o = (3 - 1) * $18
0A506 3C                        	.db F# + o
0A507                           	note F#, 3
0A507                           o = (3 - 1) * $18
0A507 3C                        	.db F# + o
0A508                           	sound_ret
0A508 00                        	.db $00
0A509                           
0A509                           MusDTitle4:
0A509                           MusDTitle4_SQ2:
0A509                           MusDTitle5:
0A509                           MusDTitle5_SQ2:
0A509                           	note_type 1, 8
0A509                           i = (1 - 1) << 4
0A509 88                        	.db $80 + i + 8
0A50A                           	rest
0A50A 7E                        	.db $7E
0A50B                           	note_type 1, 10
0A50B                           i = (1 - 1) << 4
0A50B 8A                        	.db $80 + i + 10
0A50C                           	note E_, 3
0A50C                           o = (3 - 1) * $18
0A50C 38                        	.db E_ + o
0A50D                           	note E_, 3
0A50D                           o = (3 - 1) * $18
0A50D 38                        	.db E_ + o
0A50E                           	note E_, 3
0A50E                           o = (3 - 1) * $18
0A50E 38                        	.db E_ + o
0A50F                           	note E_, 3
0A50F                           o = (3 - 1) * $18
0A50F 38                        	.db E_ + o
0A510                           	note E_, 3
0A510                           o = (3 - 1) * $18
0A510 38                        	.db E_ + o
0A511                           	note_type 1, 8
0A511                           i = (1 - 1) << 4
0A511 88                        	.db $80 + i + 8
0A512                           	note E_, 3
0A512                           o = (3 - 1) * $18
0A512 38                        	.db E_ + o
0A513                           	rest
0A513 7E                        	.db $7E
0A514                           	note_type 1, 10
0A514                           i = (1 - 1) << 4
0A514 8A                        	.db $80 + i + 10
0A515                           	note D#, 3
0A515                           o = (3 - 1) * $18
0A515 36                        	.db D# + o
0A516                           	note_type 1, 8
0A516                           i = (1 - 1) << 4
0A516 88                        	.db $80 + i + 8
0A517                           	note D#, 3
0A517                           o = (3 - 1) * $18
0A517 36                        	.db D# + o
0A518                           	sound_ret
0A518 00                        	.db $00
0A519                           
0A519                           MusDTitle1_SQ1:
0A519                           	note_type 1, 12
0A519                           i = (1 - 1) << 4
0A519 8C                        	.db $80 + i + 12
0A51A                           	rest
0A51A 7E                        	.db $7E
0A51B                           	rest
0A51B 7E                        	.db $7E
0A51C                           	rest
0A51C 7E                        	.db $7E
0A51D                           	rest
0A51D 7E                        	.db $7E
0A51E                           	rest
0A51E 7E                        	.db $7E
0A51F                           	rest
0A51F 7E                        	.db $7E
0A520                           	note C#, 3
0A520                           o = (3 - 1) * $18
0A520 32                        	.db C# + o
0A521                           	note_type 1, 4
0A521                           i = (1 - 1) << 4
0A521 84                        	.db $80 + i + 4
0A522                           	note B_, 1
0A522                           o = (1 - 1) * $18
0A522 16                        	.db B_ + o
0A523                           	note F#, 2
0A523                           o = (2 - 1) * $18
0A523 24                        	.db F# + o
0A524                           	note_type 1, 9
0A524                           i = (1 - 1) << 4
0A524 89                        	.db $80 + i + 9
0A525                           	note B_, 2
0A525                           o = (2 - 1) * $18
0A525 2E                        	.db B_ + o
0A526                           	note_type 1, 4
0A526                           i = (1 - 1) << 4
0A526 84                        	.db $80 + i + 4
0A527                           	note B_, 2
0A527                           o = (2 - 1) * $18
0A527 2E                        	.db B_ + o
0A528                           	note_type 1, 8
0A528                           i = (1 - 1) << 4
0A528 88                        	.db $80 + i + 8
0A529                           	note F#, 2
0A529                           o = (2 - 1) * $18
0A529 24                        	.db F# + o
0A52A                           
0A52A                           MusDTitle2_SQ1:
0A52A                           MusDTitle3_SQ1:
0A52A                           	note_type 1, 4
0A52A                           i = (1 - 1) << 4
0A52A 84                        	.db $80 + i + 4
0A52B                           	note E_, 2
0A52B                           o = (2 - 1) * $18
0A52B 20                        	.db E_ + o
0A52C                           	note E_, 2
0A52C                           o = (2 - 1) * $18
0A52C 20                        	.db E_ + o
0A52D                           	note B_, 2
0A52D                           o = (2 - 1) * $18
0A52D 2E                        	.db B_ + o
0A52E                           	note E_, 2
0A52E                           o = (2 - 1) * $18
0A52E 20                        	.db E_ + o
0A52F                           	note E_, 2
0A52F                           o = (2 - 1) * $18
0A52F 20                        	.db E_ + o
0A530                           	note_type 1, 8
0A530                           i = (1 - 1) << 4
0A530 88                        	.db $80 + i + 8
0A531                           	note B_, 2
0A531                           o = (2 - 1) * $18
0A531 2E                        	.db B_ + o
0A532                           	note_type 1, 4
0A532                           i = (1 - 1) << 4
0A532 84                        	.db $80 + i + 4
0A533                           	note B_, 2
0A533                           o = (2 - 1) * $18
0A533 2E                        	.db B_ + o
0A534                           	note D_, 2
0A534                           o = (2 - 1) * $18
0A534 1C                        	.db D_ + o
0A535                           	note D_, 2
0A535                           o = (2 - 1) * $18
0A535 1C                        	.db D_ + o
0A536                           	note B_, 2
0A536                           o = (2 - 1) * $18
0A536 2E                        	.db B_ + o
0A537                           	note D_, 2
0A537                           o = (2 - 1) * $18
0A537 1C                        	.db D_ + o
0A538                           	note D_, 2
0A538                           o = (2 - 1) * $18
0A538 1C                        	.db D_ + o
0A539                           	note_type 1, 8
0A539                           i = (1 - 1) << 4
0A539 88                        	.db $80 + i + 8
0A53A                           	note B_, 2
0A53A                           o = (2 - 1) * $18
0A53A 2E                        	.db B_ + o
0A53B                           	note_type 1, 4
0A53B                           i = (1 - 1) << 4
0A53B 84                        	.db $80 + i + 4
0A53C                           	note B_, 2
0A53C                           o = (2 - 1) * $18
0A53C 2E                        	.db B_ + o
0A53D                           	note A_, 2
0A53D                           o = (2 - 1) * $18
0A53D 2A                        	.db A_ + o
0A53E                           	note A_, 2
0A53E                           o = (2 - 1) * $18
0A53E 2A                        	.db A_ + o
0A53F                           	note C#, 3
0A53F                           o = (3 - 1) * $18
0A53F 32                        	.db C# + o
0A540                           	note A_, 2
0A540                           o = (2 - 1) * $18
0A540 2A                        	.db A_ + o
0A541                           	note A_, 2
0A541                           o = (2 - 1) * $18
0A541 2A                        	.db A_ + o
0A542                           	note A_, 2
0A542                           o = (2 - 1) * $18
0A542 2A                        	.db A_ + o
0A543                           	note_type 1, 8
0A543                           i = (1 - 1) << 4
0A543 88                        	.db $80 + i + 8
0A544                           	note C#, 3
0A544                           o = (3 - 1) * $18
0A544 32                        	.db C# + o
0A545                           	note_type 1, 4
0A545                           i = (1 - 1) << 4
0A545 84                        	.db $80 + i + 4
0A546                           	note C#, 3
0A546                           o = (3 - 1) * $18
0A546 32                        	.db C# + o
0A547                           	note D#, 3
0A547                           o = (3 - 1) * $18
0A547 36                        	.db D# + o
0A548                           	note B_, 2
0A548                           o = (2 - 1) * $18
0A548 2E                        	.db B_ + o
0A549                           	note_type 1, 8
0A549                           i = (1 - 1) << 4
0A549 88                        	.db $80 + i + 8
0A54A                           	note D#, 3
0A54A                           o = (3 - 1) * $18
0A54A 36                        	.db D# + o
0A54B                           	note_type 1, 4
0A54B                           i = (1 - 1) << 4
0A54B 84                        	.db $80 + i + 4
0A54C                           	note D#, 3
0A54C                           o = (3 - 1) * $18
0A54C 36                        	.db D# + o
0A54D                           	note D#, 3
0A54D                           o = (3 - 1) * $18
0A54D 36                        	.db D# + o
0A54E                           	note D#, 3
0A54E                           o = (3 - 1) * $18
0A54E 36                        	.db D# + o
0A54F                           
0A54F                           MusDTitle4_SQ1:
0A54F                           MusDTitle5_SQ1:
0A54F                           	note_type 1, 10
0A54F                           i = (1 - 1) << 4
0A54F 8A                        	.db $80 + i + 10
0A550                           	note B_, 2
0A550                           o = (2 - 1) * $18
0A550 2E                        	.db B_ + o
0A551                           	note G#, 3
0A551                           o = (3 - 1) * $18
0A551 40                        	.db G# + o
0A552                           	note B_, 2
0A552                           o = (2 - 1) * $18
0A552 2E                        	.db B_ + o
0A553                           	note F#, 3
0A553                           o = (3 - 1) * $18
0A553 3C                        	.db F# + o
0A554                           	note C#, 3
0A554                           o = (3 - 1) * $18
0A554 32                        	.db C# + o
0A555                           	note A_, 3
0A555                           o = (3 - 1) * $18
0A555 42                        	.db A_ + o
0A556                           	note B_, 2
0A556                           o = (2 - 1) * $18
0A556 2E                        	.db B_ + o
0A557                           	note F#, 3
0A557                           o = (3 - 1) * $18
0A557 3C                        	.db F# + o
0A558                           
0A558                           MusDTitle1_Hill:
0A558                           	note_type 1, 12
0A558                           i = (1 - 1) << 4
0A558 8C                        	.db $80 + i + 12
0A559                           	rest
0A559 7E                        	.db $7E
0A55A                           	rest
0A55A 7E                        	.db $7E
0A55B                           	rest
0A55B 7E                        	.db $7E
0A55C                           	note_type 1, 11
0A55C                           i = (1 - 1) << 4
0A55C 8B                        	.db $80 + i + 11
0A55D                           	rest
0A55D 7E                        	.db $7E
0A55E                           	note_type 1, 0
0A55E                           i = (1 - 1) << 4
0A55E 80                        	.db $80 + i + 0
0A55F                           	rest
0A55F 7E                        	.db $7E
0A560                           	rest
0A560 7E                        	.db $7E
0A561                           	note E_, 3
0A561                           o = (3 - 1) * $18
0A561 38                        	.db E_ + o
0A562                           	note F#, 3
0A562                           o = (3 - 1) * $18
0A562 3C                        	.db F# + o
0A563                           	note_type 8, 8
0A563                           i = (8 - 1) << 4
0A563 F8                        	.db $80 + i + 8
0A564                           	note E_, 3
0A564                           o = (3 - 1) * $18
0A564 38                        	.db E_ + o
0A565                           	note E_, 3
0A565                           o = (3 - 1) * $18
0A565 38                        	.db E_ + o
0A566                           	note E_, 3
0A566                           o = (3 - 1) * $18
0A566 38                        	.db E_ + o
0A567                           	note E_, 3
0A567                           o = (3 - 1) * $18
0A567 38                        	.db E_ + o
0A568                           	note E_, 3
0A568                           o = (3 - 1) * $18
0A568 38                        	.db E_ + o
0A569                           	note_type 8, 10
0A569                           i = (8 - 1) << 4
0A569 FA                        	.db $80 + i + 10
0A56A                           	note E_, 3
0A56A                           o = (3 - 1) * $18
0A56A 38                        	.db E_ + o
0A56B                           	note_type 1, 4
0A56B                           i = (1 - 1) << 4
0A56B 84                        	.db $80 + i + 4
0A56C                           	rest
0A56C 7E                        	.db $7E
0A56D                           	note G#, 1
0A56D                           o = (1 - 1) * $18
0A56D 10                        	.db G# + o
0A56E                           	note_type 8, 8
0A56E                           i = (8 - 1) << 4
0A56E F8                        	.db $80 + i + 8
0A56F                           	note A_, 1
0A56F                           o = (1 - 1) * $18
0A56F 12                        	.db A_ + o
0A570                           	note A_, 1
0A570                           o = (1 - 1) * $18
0A570 12                        	.db A_ + o
0A571                           	note_type 1, 10
0A571                           i = (1 - 1) << 4
0A571 8A                        	.db $80 + i + 10
0A572                           	note A_, 1
0A572                           o = (1 - 1) * $18
0A572 12                        	.db A_ + o
0A573                           	note B_, 1
0A573                           o = (1 - 1) * $18
0A573 16                        	.db B_ + o
0A574                           	note_type 1, 8
0A574                           i = (1 - 1) << 4
0A574 88                        	.db $80 + i + 8
0A575                           	note B_, 1
0A575                           o = (1 - 1) * $18
0A575 16                        	.db B_ + o
0A576                           	note B_, 1
0A576                           o = (1 - 1) * $18
0A576 16                        	.db B_ + o
0A577                           
0A577                           MusDTitle2_Hill:
0A577                           MusDTitle3_Hill:
0A577                           MusDTitle4_Hill:
0A577                           MusDTitle5_Hill:
0A577                           	note_type 1, 4
0A577                           i = (1 - 1) << 4
0A577 84                        	.db $80 + i + 4
0A578                           	note E_, 2
0A578                           o = (2 - 1) * $18
0A578 20                        	.db E_ + o
0A579                           	note E_, 2
0A579                           o = (2 - 1) * $18
0A579 20                        	.db E_ + o
0A57A                           	note E_, 2
0A57A                           o = (2 - 1) * $18
0A57A 20                        	.db E_ + o
0A57B                           	note E_, 2
0A57B                           o = (2 - 1) * $18
0A57B 20                        	.db E_ + o
0A57C                           	note E_, 2
0A57C                           o = (2 - 1) * $18
0A57C 20                        	.db E_ + o
0A57D                           	note E_, 2
0A57D                           o = (2 - 1) * $18
0A57D 20                        	.db E_ + o
0A57E                           	note E_, 2
0A57E                           o = (2 - 1) * $18
0A57E 20                        	.db E_ + o
0A57F                           	note E_, 2
0A57F                           o = (2 - 1) * $18
0A57F 20                        	.db E_ + o
0A580                           	note D_, 2
0A580                           o = (2 - 1) * $18
0A580 1C                        	.db D_ + o
0A581                           	note D_, 2
0A581                           o = (2 - 1) * $18
0A581 1C                        	.db D_ + o
0A582                           	note D_, 2
0A582                           o = (2 - 1) * $18
0A582 1C                        	.db D_ + o
0A583                           	note D_, 2
0A583                           o = (2 - 1) * $18
0A583 1C                        	.db D_ + o
0A584                           	note D_, 2
0A584                           o = (2 - 1) * $18
0A584 1C                        	.db D_ + o
0A585                           	note D_, 2
0A585                           o = (2 - 1) * $18
0A585 1C                        	.db D_ + o
0A586                           	note D_, 2
0A586                           o = (2 - 1) * $18
0A586 1C                        	.db D_ + o
0A587                           	note D_, 2
0A587                           o = (2 - 1) * $18
0A587 1C                        	.db D_ + o
0A588                           	note A_, 1
0A588                           o = (1 - 1) * $18
0A588 12                        	.db A_ + o
0A589                           	note A_, 1
0A589                           o = (1 - 1) * $18
0A589 12                        	.db A_ + o
0A58A                           	note A_, 1
0A58A                           o = (1 - 1) * $18
0A58A 12                        	.db A_ + o
0A58B                           	note A_, 1
0A58B                           o = (1 - 1) * $18
0A58B 12                        	.db A_ + o
0A58C                           	note A_, 1
0A58C                           o = (1 - 1) * $18
0A58C 12                        	.db A_ + o
0A58D                           	note A_, 1
0A58D                           o = (1 - 1) * $18
0A58D 12                        	.db A_ + o
0A58E                           	note A_, 1
0A58E                           o = (1 - 1) * $18
0A58E 12                        	.db A_ + o
0A58F                           	note A_, 1
0A58F                           o = (1 - 1) * $18
0A58F 12                        	.db A_ + o
0A590                           	note B_, 1
0A590                           o = (1 - 1) * $18
0A590 16                        	.db B_ + o
0A591                           	note B_, 1
0A591                           o = (1 - 1) * $18
0A591 16                        	.db B_ + o
0A592                           	note B_, 1
0A592                           o = (1 - 1) * $18
0A592 16                        	.db B_ + o
0A593                           	note B_, 1
0A593                           o = (1 - 1) * $18
0A593 16                        	.db B_ + o
0A594                           	note B_, 1
0A594                           o = (1 - 1) * $18
0A594 16                        	.db B_ + o
0A595                           	note B_, 1
0A595                           o = (1 - 1) * $18
0A595 16                        	.db B_ + o
0A596                           	note B_, 1
0A596                           o = (1 - 1) * $18
0A596 16                        	.db B_ + o
0A597                           	note B_, 1
0A597                           o = (1 - 1) * $18
0A597 16                        	.db B_ + o
0A598                           
0A598                           MusDTitle1_Noise:
0A598                           	note_type 1, 8
0A598                           i = (1 - 1) << 4
0A598 88                        	.db $80 + i + 8
0A599                           	drum_note P_Hat
0A599 02                        	.db P_Hat * 2
0A59A                           	drum_note P_Hat
0A59A 02                        	.db P_Hat * 2
0A59B                           	drum_note P_Hat
0A59B 02                        	.db P_Hat * 2
0A59C                           	drum_note P_Hat
0A59C 02                        	.db P_Hat * 2
0A59D                           	drum_note P_Hat
0A59D 02                        	.db P_Hat * 2
0A59E                           	drum_note P_Hat
0A59E 02                        	.db P_Hat * 2
0A59F                           	drum_note P_Hat
0A59F 02                        	.db P_Hat * 2
0A5A0                           	drum_note P_Hat
0A5A0 02                        	.db P_Hat * 2
0A5A1                           	drum_note P_Hat
0A5A1 02                        	.db P_Hat * 2
0A5A2                           	drum_note P_Hat
0A5A2 02                        	.db P_Hat * 2
0A5A3                           	drum_note P_Hat
0A5A3 02                        	.db P_Hat * 2
0A5A4                           	drum_note P_Hat
0A5A4 02                        	.db P_Hat * 2
0A5A5                           	drum_note P_Hat
0A5A5 02                        	.db P_Hat * 2
0A5A6                           	drum_note P_Hat
0A5A6 02                        	.db P_Hat * 2
0A5A7                           	drum_note P_Hat
0A5A7 02                        	.db P_Hat * 2
0A5A8                           	drum_note P_DClap
0A5A8 0C                        	.db P_DClap * 2
0A5A9                           	drum_note P_Hat
0A5A9 02                        	.db P_Hat * 2
0A5AA                           	drum_note P_Hat
0A5AA 02                        	.db P_Hat * 2
0A5AB                           	drum_note P_Hat
0A5AB 02                        	.db P_Hat * 2
0A5AC                           	drum_note P_Hat
0A5AC 02                        	.db P_Hat * 2
0A5AD                           	drum_note P_Hat
0A5AD 02                        	.db P_Hat * 2
0A5AE                           	drum_note P_Hat
0A5AE 02                        	.db P_Hat * 2
0A5AF                           	drum_note P_Hat
0A5AF 02                        	.db P_Hat * 2
0A5B0                           	drum_note P_Hat
0A5B0 02                        	.db P_Hat * 2
0A5B1                           	drum_note P_Hat
0A5B1 02                        	.db P_Hat * 2
0A5B2                           	drum_note P_Hat
0A5B2 02                        	.db P_Hat * 2
0A5B3                           	drum_note P_Hat
0A5B3 02                        	.db P_Hat * 2
0A5B4                           	drum_note P_Hat
0A5B4 02                        	.db P_Hat * 2
0A5B5                           	drum_note P_Hat
0A5B5 02                        	.db P_Hat * 2
0A5B6                           	drum_note P_Hat
0A5B6 02                        	.db P_Hat * 2
0A5B7                           	drum_note P_DClap
0A5B7 0C                        	.db P_DClap * 2
0A5B8                           	note_type 1, 4
0A5B8                           i = (1 - 1) << 4
0A5B8 84                        	.db $80 + i + 4
0A5B9                           	drum_note P_Snare
0A5B9 0E                        	.db P_Snare * 2
0A5BA                           	note_type 1, 0
0A5BA                           i = (1 - 1) << 4
0A5BA 80                        	.db $80 + i + 0
0A5BB                           	drum_note P_Snare
0A5BB 0E                        	.db P_Snare * 2
0A5BC                           	drum_note P_Snare
0A5BC 0E                        	.db P_Snare * 2
0A5BD                           
0A5BD                           MusDTitle2_Noise:
0A5BD                           	note_type 1, 8
0A5BD                           i = (1 - 1) << 4
0A5BD 88                        	.db $80 + i + 8
0A5BE                           	drum_note P_Crash
0A5BE 04                        	.db P_Crash * 2
0A5BF                           	drum_note P_Snare
0A5BF 0E                        	.db P_Snare * 2
0A5C0                           	note_type 1, 4
0A5C0                           i = (1 - 1) << 4
0A5C0 84                        	.db $80 + i + 4
0A5C1                           	drum_note P_Kick
0A5C1 10                        	.db P_Kick * 2
0A5C2                           	drum_note P_Kick
0A5C2 10                        	.db P_Kick * 2
0A5C3                           	note_type 1, 8
0A5C3                           i = (1 - 1) << 4
0A5C3 88                        	.db $80 + i + 8
0A5C4                           	drum_note P_Snare
0A5C4 0E                        	.db P_Snare * 2
0A5C5                           	drum_note P_Kick
0A5C5 10                        	.db P_Kick * 2
0A5C6                           	drum_note P_Snare
0A5C6 0E                        	.db P_Snare * 2
0A5C7                           	note_type 1, 4
0A5C7                           i = (1 - 1) << 4
0A5C7 84                        	.db $80 + i + 4
0A5C8                           	drum_note P_Kick
0A5C8 10                        	.db P_Kick * 2
0A5C9                           	drum_note P_Kick
0A5C9 10                        	.db P_Kick * 2
0A5CA                           	note_type 1, 8
0A5CA                           i = (1 - 1) << 4
0A5CA 88                        	.db $80 + i + 8
0A5CB                           	drum_note P_Snare
0A5CB 0E                        	.db P_Snare * 2
0A5CC                           	drum_note P_Kick
0A5CC 10                        	.db P_Kick * 2
0A5CD                           	drum_note P_Snare
0A5CD 0E                        	.db P_Snare * 2
0A5CE                           	note_type 1, 4
0A5CE                           i = (1 - 1) << 4
0A5CE 84                        	.db $80 + i + 4
0A5CF                           	drum_note P_Kick
0A5CF 10                        	.db P_Kick * 2
0A5D0                           	drum_note P_Kick
0A5D0 10                        	.db P_Kick * 2
0A5D1                           	note_type 1, 8
0A5D1                           i = (1 - 1) << 4
0A5D1 88                        	.db $80 + i + 8
0A5D2                           	drum_note P_Snare
0A5D2 0E                        	.db P_Snare * 2
0A5D3                           	drum_note P_Kick
0A5D3 10                        	.db P_Kick * 2
0A5D4                           	drum_note P_Snare
0A5D4 0E                        	.db P_Snare * 2
0A5D5                           	note_type 1, 4
0A5D5                           i = (1 - 1) << 4
0A5D5 84                        	.db $80 + i + 4
0A5D6                           	drum_note P_Kick
0A5D6 10                        	.db P_Kick * 2
0A5D7                           	drum_note P_Kick
0A5D7 10                        	.db P_Kick * 2
0A5D8                           	drum_note P_Snare
0A5D8 0E                        	.db P_Snare * 2
0A5D9                           	drum_note P_Snare
0A5D9 0E                        	.db P_Snare * 2
0A5DA                           
0A5DA                           MusDTitle3_Noise:
0A5DA                           MusDTitle5_Noise:
0A5DA                           	note_type 1, 8
0A5DA                           i = (1 - 1) << 4
0A5DA 88                        	.db $80 + i + 8
0A5DB                           	drum_note P_Kick
0A5DB 10                        	.db P_Kick * 2
0A5DC                           	drum_note P_Snare
0A5DC 0E                        	.db P_Snare * 2
0A5DD                           	note_type 1, 4
0A5DD                           i = (1 - 1) << 4
0A5DD 84                        	.db $80 + i + 4
0A5DE                           	drum_note P_Kick
0A5DE 10                        	.db P_Kick * 2
0A5DF                           	drum_note P_Kick
0A5DF 10                        	.db P_Kick * 2
0A5E0                           	note_type 1, 8
0A5E0                           i = (1 - 1) << 4
0A5E0 88                        	.db $80 + i + 8
0A5E1                           	drum_note P_Snare
0A5E1 0E                        	.db P_Snare * 2
0A5E2                           	drum_note P_Kick
0A5E2 10                        	.db P_Kick * 2
0A5E3                           	drum_note P_Snare
0A5E3 0E                        	.db P_Snare * 2
0A5E4                           	note_type 1, 4
0A5E4                           i = (1 - 1) << 4
0A5E4 84                        	.db $80 + i + 4
0A5E5                           	drum_note P_Kick
0A5E5 10                        	.db P_Kick * 2
0A5E6                           	drum_note P_Kick
0A5E6 10                        	.db P_Kick * 2
0A5E7                           	drum_note P_Snare
0A5E7 0E                        	.db P_Snare * 2
0A5E8                           	drum_note P_Kick
0A5E8 10                        	.db P_Kick * 2
0A5E9                           	note_type 1, 8
0A5E9                           i = (1 - 1) << 4
0A5E9 88                        	.db $80 + i + 8
0A5EA                           	drum_note P_Kick
0A5EA 10                        	.db P_Kick * 2
0A5EB                           	drum_note P_Snare
0A5EB 0E                        	.db P_Snare * 2
0A5EC                           	note_type 1, 4
0A5EC                           i = (1 - 1) << 4
0A5EC 84                        	.db $80 + i + 4
0A5ED                           	drum_note P_Kick
0A5ED 10                        	.db P_Kick * 2
0A5EE                           	drum_note P_Kick
0A5EE 10                        	.db P_Kick * 2
0A5EF                           	note_type 1, 8
0A5EF                           i = (1 - 1) << 4
0A5EF 88                        	.db $80 + i + 8
0A5F0                           	drum_note P_Snare
0A5F0 0E                        	.db P_Snare * 2
0A5F1                           	drum_note P_Kick
0A5F1 10                        	.db P_Kick * 2
0A5F2                           	drum_note P_Snare
0A5F2 0E                        	.db P_Snare * 2
0A5F3                           	note_type 1, 4
0A5F3                           i = (1 - 1) << 4
0A5F3 84                        	.db $80 + i + 4
0A5F4                           	drum_note P_Kick
0A5F4 10                        	.db P_Kick * 2
0A5F5                           	drum_note P_Kick
0A5F5 10                        	.db P_Kick * 2
0A5F6                           	drum_note P_Snare
0A5F6 0E                        	.db P_Snare * 2
0A5F7                           	note_type 1, 0
0A5F7                           i = (1 - 1) << 4
0A5F7 80                        	.db $80 + i + 0
0A5F8                           	drum_note P_Snare
0A5F8 0E                        	.db P_Snare * 2
0A5F9                           	drum_note P_Snare
0A5F9 0E                        	.db P_Snare * 2
0A5FA                           
0A5FA                           MusDTitle4_Noise:
0A5FA                           	note_type 1, 8
0A5FA                           i = (1 - 1) << 4
0A5FA 88                        	.db $80 + i + 8
0A5FB                           	drum_note P_Kick
0A5FB 10                        	.db P_Kick * 2
0A5FC                           	drum_note P_Snare
0A5FC 0E                        	.db P_Snare * 2
0A5FD                           	note_type 1, 4
0A5FD                           i = (1 - 1) << 4
0A5FD 84                        	.db $80 + i + 4
0A5FE                           	drum_note P_Kick
0A5FE 10                        	.db P_Kick * 2
0A5FF                           	drum_note P_Kick
0A5FF 10                        	.db P_Kick * 2
0A600                           	note_type 1, 8
0A600                           i = (1 - 1) << 4
0A600 88                        	.db $80 + i + 8
0A601                           	drum_note P_Snare
0A601 0E                        	.db P_Snare * 2
0A602                           	drum_note P_Kick
0A602 10                        	.db P_Kick * 2
0A603                           	drum_note P_Snare
0A603 0E                        	.db P_Snare * 2
0A604                           	note_type 1, 4
0A604                           i = (1 - 1) << 4
0A604 84                        	.db $80 + i + 4
0A605                           	drum_note P_Kick
0A605 10                        	.db P_Kick * 2
0A606                           	drum_note P_Kick
0A606 10                        	.db P_Kick * 2
0A607                           	note_type 1, 8
0A607                           i = (1 - 1) << 4
0A607 88                        	.db $80 + i + 8
0A608                           	drum_note P_Snare
0A608 0E                        	.db P_Snare * 2
0A609                           	drum_note P_Kick
0A609 10                        	.db P_Kick * 2
0A60A                           	drum_note P_Snare
0A60A 0E                        	.db P_Snare * 2
0A60B                           	note_type 1, 4
0A60B                           i = (1 - 1) << 4
0A60B 84                        	.db $80 + i + 4
0A60C                           	drum_note P_Kick
0A60C 10                        	.db P_Kick * 2
0A60D                           	drum_note P_Kick
0A60D 10                        	.db P_Kick * 2
0A60E                           	note_type 1, 8
0A60E                           i = (1 - 1) << 4
0A60E 88                        	.db $80 + i + 8
0A60F                           	drum_note P_Snare
0A60F 0E                        	.db P_Snare * 2
0A610                           	drum_note P_Kick
0A610 10                        	.db P_Kick * 2
0A611                           	drum_note P_Snare
0A611 0E                        	.db P_Snare * 2
0A612                           	note_type 1, 4
0A612                           i = (1 - 1) << 4
0A612 84                        	.db $80 + i + 4
0A613                           	drum_note P_Kick
0A613 10                        	.db P_Kick * 2
0A614                           	drum_note P_Kick
0A614 10                        	.db P_Kick * 2
0A615                           	drum_note P_Snare
0A615 0E                        	.db P_Snare * 2
0A616                           	drum_note P_Snare
0A616 0E                        	.db P_Snare * 2
0A617                           
0A617                           MusDTitle1_DPCM:
0A617                           MusDTitle2_DPCM:
0A617                           MusDTitle3_DPCM:
0A617                           MusDTitle4_DPCM:
0A617                           MusDTitle5_DPCM:
0A617                           	note_type 1, 4
0A617                           i = (1 - 1) << 4
0A617 84                        	.db $80 + i + 4
0A618                           	smp_note PM_E2
0A618 20                        	.db PM_E2 * 2
0A619                           	smp_note PM_E2
0A619 20                        	.db PM_E2 * 2
0A61A                           	smp_note Maj_E2
0A61A 38                        	.db Maj_E2 * 2
0A61B                           	smp_note PM_E2
0A61B 20                        	.db PM_E2 * 2
0A61C                           	smp_note PM_E2
0A61C 20                        	.db PM_E2 * 2
0A61D                           	note_type 1, 8
0A61D                           i = (1 - 1) << 4
0A61D 88                        	.db $80 + i + 8
0A61E                           	smp_note Maj_E2
0A61E 38                        	.db Maj_E2 * 2
0A61F                           	note_type 1, 4
0A61F                           i = (1 - 1) << 4
0A61F 84                        	.db $80 + i + 4
0A620                           	smp_note Maj_E2
0A620 38                        	.db Maj_E2 * 2
0A621                           	smp_note PM_D2
0A621 1C                        	.db PM_D2 * 2
0A622                           	smp_note PM_D2
0A622 1C                        	.db PM_D2 * 2
0A623                           	smp_note Maj_D2
0A623 34                        	.db Maj_D2 * 2
0A624                           	smp_note PM_D2
0A624 1C                        	.db PM_D2 * 2
0A625                           	smp_note PM_D2
0A625 1C                        	.db PM_D2 * 2
0A626                           	note_type 1, 8
0A626                           i = (1 - 1) << 4
0A626 88                        	.db $80 + i + 8
0A627                           	smp_note Maj_D2
0A627 34                        	.db Maj_D2 * 2
0A628                           	note_type 1, 4
0A628                           i = (1 - 1) << 4
0A628 84                        	.db $80 + i + 4
0A629                           	smp_note Maj_D2
0A629 34                        	.db Maj_D2 * 2
0A62A                           	smp_note PM_A2
0A62A 2A                        	.db PM_A2 * 2
0A62B                           	smp_note PM_A2
0A62B 2A                        	.db PM_A2 * 2
0A62C                           	smp_note Maj_A2
0A62C 42                        	.db Maj_A2 * 2
0A62D                           	smp_note PM_A2
0A62D 2A                        	.db PM_A2 * 2
0A62E                           	smp_note PM_A2
0A62E 2A                        	.db PM_A2 * 2
0A62F                           	smp_note PM_A2
0A62F 2A                        	.db PM_A2 * 2
0A630                           	note_type 1, 8
0A630                           i = (1 - 1) << 4
0A630 88                        	.db $80 + i + 8
0A631                           	smp_note Maj_A2
0A631 42                        	.db Maj_A2 * 2
0A632                           	smp_note Maj_Slide
0A632 30                        	.db Maj_Slide * 2
0A633                           	note_type 1, 4
0A633                           i = (1 - 1) << 4
0A633 84                        	.db $80 + i + 4
0A634                           	smp_note PM_B2
0A634 2E                        	.db PM_B2 * 2
0A635                           	note_type 1, 8
0A635                           i = (1 - 1) << 4
0A635 88                        	.db $80 + i + 8
0A636                           	smp_note Maj_B2
0A636 46                        	.db Maj_B2 * 2
0A637                           	note_type 1, 4
0A637                           i = (1 - 1) << 4
0A637 84                        	.db $80 + i + 4
0A638                           	smp_note Maj_B2
0A638 46                        	.db Maj_B2 * 2
0A639                           	smp_note Maj_B2
0A639 46                        	.db Maj_B2 * 2
0A63A                           	smp_note Maj_B2
0A63A 46                        	.db Maj_B2 * 2
0A63B                           	sound_loop
0A63B 00                        	.db $00
0A63C                           .include "src/sound/music/title-6.asm"
0A63C                           MusDTitle6:
0A63C                           MusDTitle6_SQ2:
0A63C                           	note_type 1, 1
0A63C                           i = (1 - 1) << 4
0A63C 81                        	.db $80 + i + 1
0A63D                           	rest
0A63D 7E                        	.db $7E
0A63E                           	note B_, 2
0A63E                           o = (2 - 1) * $18
0A63E 2E                        	.db B_ + o
0A63F                           	note_type 1, 12
0A63F                           i = (1 - 1) << 4
0A63F 8C                        	.db $80 + i + 12
0A640                           	note E_, 3
0A640                           o = (3 - 1) * $18
0A640 38                        	.db E_ + o
0A641                           	note_type 1, 11
0A641                           i = (1 - 1) << 4
0A641 8B                        	.db $80 + i + 11
0A642                           	rest
0A642 7E                        	.db $7E
0A643                           	note_type 1, 5
0A643                           i = (1 - 1) << 4
0A643 85                        	.db $80 + i + 5
0A644                           	rest
0A644 7E                        	.db $7E
0A645                           	sound_ret
0A645 00                        	.db $00
0A646                           
0A646                           MusDTitle6_SQ1:
0A646                           	note_type 1, 12
0A646                           i = (1 - 1) << 4
0A646 8C                        	.db $80 + i + 12
0A647                           	note G#, 2
0A647                           o = (2 - 1) * $18
0A647 28                        	.db G# + o
0A648                           	rest
0A648 7E                        	.db $7E
0A649                           
0A649                           MusDTitle6_Hill:
0A649                           	note_type 8, 8
0A649                           i = (8 - 1) << 4
0A649 F8                        	.db $80 + i + 8
0A64A                           	note E_, 2
0A64A                           o = (2 - 1) * $18
0A64A 20                        	.db E_ + o
0A64B                           	note_type 8, 10
0A64B                           i = (8 - 1) << 4
0A64B FA                        	.db $80 + i + 10
0A64C                           	note E_, 2
0A64C                           o = (2 - 1) * $18
0A64C 20                        	.db E_ + o
0A64D                           	note_type 1, 4
0A64D                           i = (1 - 1) << 4
0A64D 84                        	.db $80 + i + 4
0A64E                           	rest
0A64E 7E                        	.db $7E
0A64F                           	note E_, 1
0A64F                           o = (1 - 1) * $18
0A64F 08                        	.db E_ + o
0A650                           	note_type 8, 8
0A650                           i = (8 - 1) << 4
0A650 F8                        	.db $80 + i + 8
0A651                           	note E_, 1
0A651                           o = (1 - 1) * $18
0A651 08                        	.db E_ + o
0A652                           	note E_, 1
0A652                           o = (1 - 1) * $18
0A652 08                        	.db E_ + o
0A653                           	note_type 8, 10
0A653                           i = (8 - 1) << 4
0A653 FA                        	.db $80 + i + 10
0A654                           	note E_, 1
0A654                           o = (1 - 1) * $18
0A654 08                        	.db E_ + o
0A655                           
0A655                           MusDTitle6_Noise:
0A655                           	note_type 1, 8
0A655                           i = (1 - 1) << 4
0A655 88                        	.db $80 + i + 8
0A656                           	drum_note P_Kick
0A656 10                        	.db P_Kick * 2
0A657                           	drum_note P_Hat
0A657 02                        	.db P_Hat * 2
0A658                           	drum_note P_Hat
0A658 02                        	.db P_Hat * 2
0A659                           	note_type 1, 4
0A659                           i = (1 - 1) << 4
0A659 84                        	.db $80 + i + 4
0A65A                           	drum_note P_Hat
0A65A 02                        	.db P_Hat * 2
0A65B                           	drum_note P_Kick
0A65B 10                        	.db P_Kick * 2
0A65C                           	note_type 1, 8
0A65C                           i = (1 - 1) << 4
0A65C 88                        	.db $80 + i + 8
0A65D                           	drum_note P_Kick
0A65D 10                        	.db P_Kick * 2
0A65E                           	drum_note P_Hat
0A65E 02                        	.db P_Hat * 2
0A65F                           	note_type 1, 4
0A65F                           i = (1 - 1) << 4
0A65F 84                        	.db $80 + i + 4
0A660                           	drum_note P_Hat
0A660 02                        	.db P_Hat * 2
0A661                           	drum_note P_Kick
0A661 10                        	.db P_Kick * 2
0A662                           	note_type 1, 8
0A662                           i = (1 - 1) << 4
0A662 88                        	.db $80 + i + 8
0A663                           	drum_note P_Snare
0A663 0E                        	.db P_Snare * 2
0A664                           
0A664                           MusDTitle6_DPCM:
0A664                           	note_type 1, 9
0A664                           i = (1 - 1) << 4
0A664 89                        	.db $80 + i + 9
0A665                           	smp_note Maj_E2
0A665 38                        	.db Maj_E2 * 2
0A666                           	note_type 1, 4
0A666                           i = (1 - 1) << 4
0A666 84                        	.db $80 + i + 4
0A667                           	smp_note PM_E2
0A667 20                        	.db PM_E2 * 2
0A668                           	smp_note PM_E2
0A668 20                        	.db PM_E2 * 2
0A669                           	smp_note PM_E2
0A669 20                        	.db PM_E2 * 2
0A66A                           	smp_note PM_E2
0A66A 20                        	.db PM_E2 * 2
0A66B                           	smp_note PM_E2
0A66B 20                        	.db PM_E2 * 2
0A66C                           	smp_note PM_E2
0A66C 20                        	.db PM_E2 * 2
0A66D                           	smp_note PM_E2
0A66D 20                        	.db PM_E2 * 2
0A66E                           	smp_note PM_E2
0A66E 20                        	.db PM_E2 * 2
0A66F                           	smp_note PM_E2
0A66F 20                        	.db PM_E2 * 2
0A670                           	smp_note PM_E2
0A670 20                        	.db PM_E2 * 2
0A671                           	smp_note PM_E2
0A671 20                        	.db PM_E2 * 2
0A672                           	smp_note PM_E2
0A672 20                        	.db PM_E2 * 2
0A673                           	smp_note PM_E2
0A673 20                        	.db PM_E2 * 2
0A674                           .include "src/sound/music/title-7.asm"
0A674                           MusDTitle7:
0A674                           MusDTitle7_SQ2:
0A674                           	note_type 1, 12
0A674                           i = (1 - 1) << 4
0A674 8C                        	.db $80 + i + 12
0A675                           	rest
0A675 7E                        	.db $7E
0A676                           	rest
0A676 7E                        	.db $7E
0A677                           	rest
0A677 7E                        	.db $7E
0A678                           	rest
0A678 7E                        	.db $7E
0A679                           	rest
0A679 7E                        	.db $7E
0A67A                           	rest
0A67A 7E                        	.db $7E
0A67B                           	rest
0A67B 7E                        	.db $7E
0A67C                           	rest
0A67C 7E                        	.db $7E
0A67D                           	rest
0A67D 7E                        	.db $7E
0A67E                           	rest
0A67E 7E                        	.db $7E
0A67F                           	rest
0A67F 7E                        	.db $7E
0A680                           	rest
0A680 7E                        	.db $7E
0A681                           	sound_ret
0A681 00                        	.db $00
0A682                           
0A682                           ; lyrical leads
0A682                           ; 2 - "ooh", E, "oough,", "iyeh"
0A682                           ; 3 - I, "ah", "uh"
0A682                           ; 4 - "eh", O, "Ur", A
0A682                           ; CONSONANTAL: "n", "m", "l", "b", "p"
0A682                           ; 2 - Start
0A682                           ; 6 - End
0A682                           ; WITH SWEEP:
0A682                           ; 1 - "k", "g", "s", "th", "z"
0A682                           ; 3 - "t", "ts", "ch"
0A682                           ; P.S. Remind me never to do 2A03 vocaloid again!
0A682                           MusDTitle7_SQ1:
0A682                           	note_type 2, 4
0A682                           i = (2 - 1) << 4
0A682 94                        	.db $80 + i + 4
0A683                           	rest
0A683 7E                        	.db $7E
0A684                           	; He
0A684                           	note B_, 2
0A684                           o = (2 - 1) * $18
0A684 2E                        	.db B_ + o
0A685                           	; may
0A685                           	note_type 4, 8
0A685                           i = (4 - 1) << 4
0A685 B8                        	.db $80 + i + 8
0A686                           	note B_, 2
0A686                           o = (2 - 1) * $18
0A686 2E                        	.db B_ + o
0A687                           	; look
0A687                           	note_type 2, 4
0A687                           i = (2 - 1) << 4
0A687 94                        	.db $80 + i + 4
0A688                           	note E_, 3
0A688                           o = (3 - 1) * $18
0A688 38                        	.db E_ + o
0A689                           	toggle_sweep
0A689 00                        	.db $00
0A68A                           	note_type 1, 1
0A68A                           i = (1 - 1) << 4
0A68A 81                        	.db $80 + i + 1
0A68B                           	note E_, 3
0A68B                           o = (3 - 1) * $18
0A68B 38                        	.db E_ + o
0A68C                           	toggle_sweep
0A68C 00                        	.db $00
0A68D                           	rest
0A68D 7E                        	.db $7E
0A68E                           	rest
0A68E 7E                        	.db $7E
0A68F                           	; like
0A68F                           	note_type 2, 1
0A68F                           i = (2 - 1) << 4
0A68F 91                        	.db $80 + i + 1
0A690                           	note E_, 3
0A690                           o = (3 - 1) * $18
0A690 38                        	.db E_ + o
0A691                           	note_type 3, 4
0A691                           i = (3 - 1) << 4
0A691 A4                        	.db $80 + i + 4
0A692                           	note E_, 3
0A692                           o = (3 - 1) * $18
0A692 38                        	.db E_ + o
0A693                           	toggle_sweep
0A693 00                        	.db $00
0A694                           	note_type 1, 1
0A694                           i = (1 - 1) << 4
0A694 81                        	.db $80 + i + 1
0A695                           	note E_, 3
0A695                           o = (3 - 1) * $18
0A695 38                        	.db E_ + o
0A696                           	toggle_sweep
0A696 00                        	.db $00
0A697                           	rest
0A697 7E                        	.db $7E
0A698                           	note_type 1, 0
0A698                           i = (1 - 1) << 4
0A698 80                        	.db $80 + i + 0
0A699                           	rest
0A699 7E                        	.db $7E
0A69A                           	; a-
0A69A                           	note_type 4, 5
0A69A                           i = (4 - 1) << 4
0A69A B5                        	.db $80 + i + 5
0A69B                           	note F#, 3
0A69B                           o = (3 - 1) * $18
0A69B 3C                        	.db F# + o
0A69C                           	; -ny
0A69C                           	note_type 2, 4
0A69C                           i = (2 - 1) << 4
0A69C 94                        	.db $80 + i + 4
0A69D                           	note G#, 3
0A69D                           o = (3 - 1) * $18
0A69D 40                        	.db G# + o
0A69E                           	note_type 2, 1
0A69E                           i = (2 - 1) << 4
0A69E 91                        	.db $80 + i + 1
0A69F                           	rest
0A69F 7E                        	.db $7E
0A6A0                           	; pet,
0A6A0                           	note A_, 3
0A6A0                           o = (3 - 1) * $18
0A6A0 42                        	.db A_ + o
0A6A1                           	note_type 4, 4
0A6A1                           i = (4 - 1) << 4
0A6A1 B4                        	.db $80 + i + 4
0A6A2                           	note A_, 3
0A6A2                           o = (3 - 1) * $18
0A6A2 42                        	.db A_ + o
0A6A3                           	note_type 4, 11
0A6A3                           i = (4 - 1) << 4
0A6A3 BB                        	.db $80 + i + 11
0A6A4                           	rest
0A6A4 7E                        	.db $7E
0A6A5                           	; like
0A6A5                           	note_type 2, 1
0A6A5                           i = (2 - 1) << 4
0A6A5 91                        	.db $80 + i + 1
0A6A6                           	note E_, 3
0A6A6                           o = (3 - 1) * $18
0A6A6 38                        	.db E_ + o
0A6A7                           	note_type 3, 4
0A6A7                           i = (3 - 1) << 4
0A6A7 A4                        	.db $80 + i + 4
0A6A8                           	note E_, 3
0A6A8                           o = (3 - 1) * $18
0A6A8 38                        	.db E_ + o
0A6A9                           	toggle_sweep
0A6A9 00                        	.db $00
0A6AA                           	note_type 1, 1
0A6AA                           i = (1 - 1) << 4
0A6AA 81                        	.db $80 + i + 1
0A6AB                           	note E_, 3
0A6AB                           o = (3 - 1) * $18
0A6AB 38                        	.db E_ + o
0A6AC                           	toggle_sweep
0A6AC 00                        	.db $00
0A6AD                           	note_type 2, 0
0A6AD                           i = (2 - 1) << 4
0A6AD 90                        	.db $80 + i + 0
0A6AE                           	rest
0A6AE 7E                        	.db $7E
0A6AF                           	; he's
0A6AF                           	note_type 2, 5
0A6AF                           i = (2 - 1) << 4
0A6AF 95                        	.db $80 + i + 5
0A6B0                           	note G#, 3
0A6B0                           o = (3 - 1) * $18
0A6B0 40                        	.db G# + o
0A6B1                           	toggle_sweep
0A6B1 00                        	.db $00
0A6B2                           	note_type 1, 1
0A6B2                           i = (1 - 1) << 4
0A6B2 81                        	.db $80 + i + 1
0A6B3                           	note C_, 6
0A6B3                           o = (6 - 1) * $18
0A6B3 78                        	.db C_ + o
0A6B4                           	note C_, 6
0A6B4                           o = (6 - 1) * $18
0A6B4 78                        	.db C_ + o
0A6B5                           	toggle_sweep
0A6B5 00                        	.db $00
0A6B6                           	; a-
0A6B6                           	note_type 3, 5
0A6B6                           i = (3 - 1) << 4
0A6B6 A5                        	.db $80 + i + 5
0A6B7                           	note B_, 3
0A6B7                           o = (3 - 1) * $18
0A6B7 46                        	.db B_ + o
0A6B8                           	note_type 2, 1
0A6B8                           i = (2 - 1) << 4
0A6B8 91                        	.db $80 + i + 1
0A6B9                           	rest
0A6B9 7E                        	.db $7E
0A6BA                           	; -no-
0A6BA                           	note A_, 3
0A6BA                           o = (3 - 1) * $18
0A6BA 42                        	.db A_ + o
0A6BB                           	note_type 3, 4
0A6BB                           i = (3 - 1) << 4
0A6BB A4                        	.db $80 + i + 4
0A6BC                           	note A_, 3
0A6BC                           o = (3 - 1) * $18
0A6BC 42                        	.db A_ + o
0A6BD                           	note_type 1, 1
0A6BD                           i = (1 - 1) << 4
0A6BD 81                        	.db $80 + i + 1
0A6BE                           	rest
0A6BE 7E                        	.db $7E
0A6BF                           	; -ther
0A6BF                           	toggle_sweep
0A6BF 00                        	.db $00
0A6C0                           	note C_, 6
0A6C0                           o = (6 - 1) * $18
0A6C0 78                        	.db C_ + o
0A6C1                           	toggle_sweep
0A6C1 00                        	.db $00
0A6C2                           	note_type 4, 4
0A6C2                           i = (4 - 1) << 4
0A6C2 B4                        	.db $80 + i + 4
0A6C3                           	note G#, 3
0A6C3                           o = (3 - 1) * $18
0A6C3 40                        	.db G# + o
0A6C4                           	note_type 2, 1
0A6C4                           i = (2 - 1) << 4
0A6C4 91                        	.db $80 + i + 1
0A6C5                           	rest
0A6C5 7E                        	.db $7E
0A6C6                           	; num-
0A6C6                           	note F#, 3
0A6C6                           o = (3 - 1) * $18
0A6C6 3C                        	.db F# + o
0A6C7                           	note_type 3, 5
0A6C7                           i = (3 - 1) << 4
0A6C7 A5                        	.db $80 + i + 5
0A6C8                           	note F#, 3
0A6C8                           o = (3 - 1) * $18
0A6C8 3C                        	.db F# + o
0A6C9                           	note_type 2, 1
0A6C9                           i = (2 - 1) << 4
0A6C9 91                        	.db $80 + i + 1
0A6CA                           	rest
0A6CA 7E                        	.db $7E
0A6CB                           	; -ber,
0A6CB                           	note E_, 3
0A6CB                           o = (3 - 1) * $18
0A6CB 38                        	.db E_ + o
0A6CC                           	note_type 4, 8
0A6CC                           i = (4 - 1) << 4
0A6CC B8                        	.db $80 + i + 8
0A6CD                           	note E_, 3
0A6CD                           o = (3 - 1) * $18
0A6CD 38                        	.db E_ + o
0A6CE                           	rest
0A6CE 7E                        	.db $7E
0A6CF                           	; but
0A6CF                           	note_type 2, 1
0A6CF                           i = (2 - 1) << 4
0A6CF 91                        	.db $80 + i + 1
0A6D0                           	note B_, 2
0A6D0                           o = (2 - 1) * $18
0A6D0 2E                        	.db B_ + o
0A6D1                           	note_type 3, 0
0A6D1                           i = (3 - 1) << 4
0A6D1 A0                        	.db $80 + i + 0
0A6D2                           	note B_, 2
0A6D2                           o = (2 - 1) * $18
0A6D2 2E                        	.db B_ + o
0A6D3                           	note_type 2, 1
0A6D3                           i = (2 - 1) << 4
0A6D3 91                        	.db $80 + i + 1
0A6D4                           	rest
0A6D4 7E                        	.db $7E
0A6D5                           	; e'er
0A6D5                           	note_type 4, 5
0A6D5                           i = (4 - 1) << 4
0A6D5 B5                        	.db $80 + i + 5
0A6D6                           	note E_, 3
0A6D6                           o = (3 - 1) * $18
0A6D6 38                        	.db E_ + o
0A6D7                           	; since
0A6D7                           	toggle_sweep
0A6D7 00                        	.db $00
0A6D8                           	note_type 1, 1
0A6D8                           i = (1 - 1) << 4
0A6D8 81                        	.db $80 + i + 1
0A6D9                           	note C_, 6
0A6D9                           o = (6 - 1) * $18
0A6D9 78                        	.db C_ + o
0A6DA                           	note C_, 6
0A6DA                           o = (6 - 1) * $18
0A6DA 78                        	.db C_ + o
0A6DB                           	toggle_sweep
0A6DB 00                        	.db $00
0A6DC                           	note_type 2, 4
0A6DC                           i = (2 - 1) << 4
0A6DC 94                        	.db $80 + i + 4
0A6DD                           	note G#, 3
0A6DD                           o = (3 - 1) * $18
0A6DD 40                        	.db G# + o
0A6DE                           	toggle_sweep
0A6DE 00                        	.db $00
0A6DF                           	note_type 1, 4
0A6DF                           i = (1 - 1) << 4
0A6DF 84                        	.db $80 + i + 4
0A6E0                           	note C_, 6
0A6E0                           o = (6 - 1) * $18
0A6E0 78                        	.db C_ + o
0A6E1                           	toggle_sweep
0A6E1 00                        	.db $00
0A6E2                           	; his
0A6E2                           	note_type 2, 5
0A6E2                           i = (2 - 1) << 4
0A6E2 95                        	.db $80 + i + 5
0A6E3                           	note B_, 3
0A6E3                           o = (3 - 1) * $18
0A6E3 46                        	.db B_ + o
0A6E4                           	toggle_sweep
0A6E4 00                        	.db $00
0A6E5                           	note_type 1, 1
0A6E5                           i = (1 - 1) << 4
0A6E5 81                        	.db $80 + i + 1
0A6E6                           	note C_, 6
0A6E6                           o = (6 - 1) * $18
0A6E6 78                        	.db C_ + o
0A6E7                           	note C_, 6
0A6E7                           o = (6 - 1) * $18
0A6E7 78                        	.db C_ + o
0A6E8                           	toggle_sweep
0A6E8 00                        	.db $00
0A6E9                           	; ow-
0A6E9                           	note_type 4, 4
0A6E9                           i = (4 - 1) << 4
0A6E9 B4                        	.db $80 + i + 4
0A6EA                           	note A_, 3
0A6EA                           o = (3 - 1) * $18
0A6EA 42                        	.db A_ + o
0A6EB                           	note_type 2, 1
0A6EB                           i = (2 - 1) << 4
0A6EB 91                        	.db $80 + i + 1
0A6EC                           	rest
0A6EC 7E                        	.db $7E
0A6ED                           	; -ner
0A6ED                           	note G#, 3
0A6ED                           o = (3 - 1) * $18
0A6ED 40                        	.db G# + o
0A6EE                           	note_type 4, 4
0A6EE                           i = (4 - 1) << 4
0A6EE B4                        	.db $80 + i + 4
0A6EF                           	note G#, 3
0A6EF                           o = (3 - 1) * $18
0A6EF 40                        	.db G# + o
0A6F0                           	note_type 2, 1
0A6F0                           i = (2 - 1) << 4
0A6F0 91                        	.db $80 + i + 1
0A6F1                           	rest
0A6F1 7E                        	.db $7E
0A6F2                           	; fled,
0A6F2                           	note F#, 3
0A6F2                           o = (3 - 1) * $18
0A6F2 3C                        	.db F# + o
0A6F3                           	note_type 4, 4
0A6F3                           i = (4 - 1) << 4
0A6F3 B4                        	.db $80 + i + 4
0A6F4                           	note F#, 3
0A6F4                           o = (3 - 1) * $18
0A6F4 3C                        	.db F# + o
0A6F5                           	note_type 4, 9
0A6F5                           i = (4 - 1) << 4
0A6F5 B9                        	.db $80 + i + 9
0A6F6                           	rest
0A6F6 7E                        	.db $7E
0A6F7                           	; it's
0A6F7                           	note_type 2, 0
0A6F7                           i = (2 - 1) << 4
0A6F7 90                        	.db $80 + i + 0
0A6F8                           	note E_, 3
0A6F8                           o = (3 - 1) * $18
0A6F8 38                        	.db E_ + o
0A6F9                           	toggle_sweep
0A6F9 00                        	.db $00
0A6FA                           	note_type 3, 0
0A6FA                           i = (3 - 1) << 4
0A6FA A0                        	.db $80 + i + 0
0A6FB                           	note C_, 6
0A6FB                           o = (6 - 1) * $18
0A6FB 78                        	.db C_ + o
0A6FC                           	toggle_sweep
0A6FC 00                        	.db $00
0A6FD                           	; ne-
0A6FD                           	note_type 2, 1
0A6FD                           i = (2 - 1) << 4
0A6FD 91                        	.db $80 + i + 1
0A6FE                           	note E_, 3
0A6FE                           o = (3 - 1) * $18
0A6FE 38                        	.db E_ + o
0A6FF                           	note_type 4, 1
0A6FF                           i = (4 - 1) << 4
0A6FF B1                        	.db $80 + i + 1
0A700                           	note F_, 3
0A700                           o = (3 - 1) * $18
0A700 3A                        	.db F_ + o
0A701                           	note_type 4, 5
0A701                           i = (4 - 1) << 4
0A701 B5                        	.db $80 + i + 5
0A702                           	note F#, 3
0A702                           o = (3 - 1) * $18
0A702 3C                        	.db F# + o
0A703                           	; -ver
0A703                           	note_type 4, 0
0A703                           i = (4 - 1) << 4
0A703 B0                        	.db $80 + i + 0
0A704                           	note G#, 3
0A704                           o = (3 - 1) * $18
0A704 40                        	.db G# + o
0A705                           	rest
0A705 7E                        	.db $7E
0A706                           	; been
0A706                           	note_type 2, 1
0A706                           i = (2 - 1) << 4
0A706 91                        	.db $80 + i + 1
0A707                           	note F#, 3
0A707                           o = (3 - 1) * $18
0A707 3C                        	.db F# + o
0A708                           	note_type 4, 4
0A708                           i = (4 - 1) << 4
0A708 B4                        	.db $80 + i + 4
0A709                           	note F#, 3
0A709                           o = (3 - 1) * $18
0A709 3C                        	.db F# + o
0A70A                           	note_type 6, 0
0A70A                           i = (6 - 1) << 4
0A70A D0                        	.db $80 + i + 0
0A70B                           	note F#, 3
0A70B                           o = (3 - 1) * $18
0A70B 3C                        	.db F# + o
0A70C                           	; the
0A70C                           	toggle_sweep
0A70C 00                        	.db $00
0A70D                           	note_type 1, 1
0A70D                           i = (1 - 1) << 4
0A70D 81                        	.db $80 + i + 1
0A70E                           	note C_, 6
0A70E                           o = (6 - 1) * $18
0A70E 78                        	.db C_ + o
0A70F                           	toggle_sweep
0A70F 00                        	.db $00
0A710                           	note_type 3, 5
0A710                           i = (3 - 1) << 4
0A710 A5                        	.db $80 + i + 5
0A711                           	note E_, 3
0A711                           o = (3 - 1) * $18
0A711 38                        	.db E_ + o
0A712                           	; same.
0A712                           	toggle_sweep
0A712 00                        	.db $00
0A713                           	note_type 1, 1
0A713                           i = (1 - 1) << 4
0A713 81                        	.db $80 + i + 1
0A714                           	note C_, 6
0A714                           o = (6 - 1) * $18
0A714 78                        	.db C_ + o
0A715                           	note C_, 6
0A715                           o = (6 - 1) * $18
0A715 78                        	.db C_ + o
0A716                           	toggle_sweep
0A716 00                        	.db $00
0A717                           	note_type 4, 9
0A717                           i = (4 - 1) << 4
0A717 B9                        	.db $80 + i + 9
0A718                           	note D#, 3
0A718                           o = (3 - 1) * $18
0A718 36                        	.db D# + o
0A719                           	note_type 6, 4
0A719                           i = (6 - 1) << 4
0A719 D4                        	.db $80 + i + 4
0A71A                           	note D#, 3
0A71A                           o = (3 - 1) * $18
0A71A 36                        	.db D# + o
0A71B                           	note_type 4, 10
0A71B                           i = (4 - 1) << 4
0A71B BA                        	.db $80 + i + 10
0A71C                           	rest
0A71C 7E                        	.db $7E
0A71D                           	note_type 4, 9
0A71D                           i = (4 - 1) << 4
0A71D B9                        	.db $80 + i + 9
0A71E                           	rest
0A71E 7E                        	.db $7E
0A71F                           	; For
0A71F                           	note_type 4, 5
0A71F                           i = (4 - 1) << 4
0A71F B5                        	.db $80 + i + 5
0A720                           	note B_, 2
0A720                           o = (2 - 1) * $18
0A720 2E                        	.db B_ + o
0A721                           	note_type 2, 1
0A721                           i = (2 - 1) << 4
0A721 91                        	.db $80 + i + 1
0A722                           	rest
0A722 7E                        	.db $7E
0A723                           	; now,
0A723                           	note E_, 3
0A723                           o = (3 - 1) * $18
0A723 38                        	.db E_ + o
0A724                           	note_type 3, 4
0A724                           i = (3 - 1) << 4
0A724 A4                        	.db $80 + i + 4
0A725                           	note E_, 3
0A725                           o = (3 - 1) * $18
0A725 38                        	.db E_ + o
0A726                           	note_type 6, 0
0A726                           i = (6 - 1) << 4
0A726 D0                        	.db $80 + i + 0
0A727                           	note E_, 3
0A727                           o = (3 - 1) * $18
0A727 38                        	.db E_ + o
0A728                           	rest
0A728 7E                        	.db $7E
0A729                           	; he'll
0A729                           	note_type 2, 5
0A729                           i = (2 - 1) << 4
0A729 95                        	.db $80 + i + 5
0A72A                           	note E_, 3
0A72A                           o = (3 - 1) * $18
0A72A 38                        	.db E_ + o
0A72B                           	note_type 2, 1
0A72B                           i = (2 - 1) << 4
0A72B 91                        	.db $80 + i + 1
0A72C                           	rest
0A72C 7E                        	.db $7E
0A72D                           	; walk
0A72D                           	note F#, 3
0A72D                           o = (3 - 1) * $18
0A72D 3C                        	.db F# + o
0A72E                           	note_type 3, 4
0A72E                           i = (3 - 1) << 4
0A72E A4                        	.db $80 + i + 4
0A72F                           	note F#, 3
0A72F                           o = (3 - 1) * $18
0A72F 3C                        	.db F# + o
0A730                           	toggle_sweep
0A730 00                        	.db $00
0A731                           	note_type 1, 1
0A731                           i = (1 - 1) << 4
0A731 81                        	.db $80 + i + 1
0A732                           	note F#, 3
0A732                           o = (3 - 1) * $18
0A732 3C                        	.db F# + o
0A733                           	toggle_sweep
0A733 00                        	.db $00
0A734                           	rest
0A734 7E                        	.db $7E
0A735                           	; a-
0A735                           	note_type 3, 0
0A735                           i = (3 - 1) << 4
0A735 A0                        	.db $80 + i + 0
0A736                           	note G#, 3
0A736                           o = (3 - 1) * $18
0A736 40                        	.db G# + o
0A737                           	note_type 3, 4
0A737                           i = (3 - 1) << 4
0A737 A4                        	.db $80 + i + 4
0A738                           	rest
0A738 7E                        	.db $7E
0A739                           	; -bout,
0A739                           	note A_, 3
0A739                           o = (3 - 1) * $18
0A739 42                        	.db A_ + o
0A73A                           	note_type 6, 0
0A73A                           i = (6 - 1) << 4
0A73A D0                        	.db $80 + i + 0
0A73B                           	note A_, 3
0A73B                           o = (3 - 1) * $18
0A73B 42                        	.db A_ + o
0A73C                           	note_type 6, 10
0A73C                           i = (6 - 1) << 4
0A73C DA                        	.db $80 + i + 10
0A73D                           	rest
0A73D 7E                        	.db $7E
0A73E                           	note_type 3, 5
0A73E                           i = (3 - 1) << 4
0A73E A5                        	.db $80 + i + 5
0A73F                           	rest
0A73F 7E                        	.db $7E
0A740                           	; and
0A740                           	note E_, 3
0A740                           o = (3 - 1) * $18
0A740 38                        	.db E_ + o
0A741                           	note_type 1, 1
0A741                           i = (1 - 1) << 4
0A741 81                        	.db $80 + i + 1
0A742                           	rest
0A742 7E                        	.db $7E
0A743                           	; greet
0A743                           	toggle_sweep
0A743 00                        	.db $00
0A744                           	note G#, 3
0A744                           o = (3 - 1) * $18
0A744 40                        	.db G# + o
0A745                           	toggle_sweep
0A745 00                        	.db $00
0A746                           	note_type 8, 1
0A746                           i = (8 - 1) << 4
0A746 F1                        	.db $80 + i + 1
0A747                           	note G#, 3
0A747                           o = (3 - 1) * $18
0A747 40                        	.db G# + o
0A748                           	note_type 2, 4
0A748                           i = (2 - 1) << 4
0A748 94                        	.db $80 + i + 4
0A749                           	note G#, 3
0A749                           o = (3 - 1) * $18
0A749 40                        	.db G# + o
0A74A                           	note_type 2, 1
0A74A                           i = (2 - 1) << 4
0A74A 91                        	.db $80 + i + 1
0A74B                           	rest
0A74B 7E                        	.db $7E
0A74C                           	note_type 2, 0
0A74C                           i = (2 - 1) << 4
0A74C 90                        	.db $80 + i + 0
0A74D                           	rest
0A74D 7E                        	.db $7E
0A74E                           	; his
0A74E                           	note_type 2, 5
0A74E                           i = (2 - 1) << 4
0A74E 95                        	.db $80 + i + 5
0A74F                           	note B_, 3
0A74F                           o = (3 - 1) * $18
0A74F 46                        	.db B_ + o
0A750                           	toggle_sweep
0A750 00                        	.db $00
0A751                           	note_type 1, 1
0A751                           i = (1 - 1) << 4
0A751 81                        	.db $80 + i + 1
0A752                           	note C_, 6
0A752                           o = (6 - 1) * $18
0A752 78                        	.db C_ + o
0A753                           	note C_, 6
0A753                           o = (6 - 1) * $18
0A753 78                        	.db C_ + o
0A754                           	toggle_sweep
0A754 00                        	.db $00
0A755                           	; fur-
0A755                           	note_type 4, 5
0A755                           i = (4 - 1) << 4
0A755 B5                        	.db $80 + i + 5
0A756                           	note A_, 3
0A756                           o = (3 - 1) * $18
0A756 42                        	.db A_ + o
0A757                           	; -ry
0A757                           	note_type 2, 5
0A757                           i = (2 - 1) << 4
0A757 95                        	.db $80 + i + 5
0A758                           	note G#, 3
0A758                           o = (3 - 1) * $18
0A758 40                        	.db G# + o
0A759                           	; neigh-
0A759                           	note_type 4, 8
0A759                           i = (4 - 1) << 4
0A759 B8                        	.db $80 + i + 8
0A75A                           	note F#, 3
0A75A                           o = (3 - 1) * $18
0A75A 3C                        	.db F# + o
0A75B                           	; -bors,
0A75B                           	note_type 4, 1
0A75B                           i = (4 - 1) << 4
0A75B B1                        	.db $80 + i + 1
0A75C                           	note E_, 3
0A75C                           o = (3 - 1) * $18
0A75C 38                        	.db E_ + o
0A75D                           	note_type 2, 5
0A75D                           i = (2 - 1) << 4
0A75D 95                        	.db $80 + i + 5
0A75E                           	note E_, 3
0A75E                           o = (3 - 1) * $18
0A75E 38                        	.db E_ + o
0A75F                           	toggle_sweep
0A75F 00                        	.db $00
0A760                           	note_type 1, 4
0A760                           i = (1 - 1) << 4
0A760 84                        	.db $80 + i + 4
0A761                           	note C_, 6
0A761                           o = (6 - 1) * $18
0A761 78                        	.db C_ + o
0A762                           	toggle_sweep
0A762 00                        	.db $00
0A763                           	note_type 1, 0
0A763                           i = (1 - 1) << 4
0A763 80                        	.db $80 + i + 0
0A764                           	rest
0A764 7E                        	.db $7E
0A765                           
0A765                           MusDTitle7_Hill:
0A765                           	note_type 1, 4
0A765                           i = (1 - 1) << 4
0A765 84                        	.db $80 + i + 4
0A766                           	note E_, 2
0A766                           o = (2 - 1) * $18
0A766 20                        	.db E_ + o
0A767                           	note E_, 2
0A767                           o = (2 - 1) * $18
0A767 20                        	.db E_ + o
0A768                           	note E_, 2
0A768                           o = (2 - 1) * $18
0A768 20                        	.db E_ + o
0A769                           	note E_, 2
0A769                           o = (2 - 1) * $18
0A769 20                        	.db E_ + o
0A76A                           	note E_, 2
0A76A                           o = (2 - 1) * $18
0A76A 20                        	.db E_ + o
0A76B                           	note E_, 2
0A76B                           o = (2 - 1) * $18
0A76B 20                        	.db E_ + o
0A76C                           	note E_, 2
0A76C                           o = (2 - 1) * $18
0A76C 20                        	.db E_ + o
0A76D                           	note E_, 2
0A76D                           o = (2 - 1) * $18
0A76D 20                        	.db E_ + o
0A76E                           	note D_, 2
0A76E                           o = (2 - 1) * $18
0A76E 1C                        	.db D_ + o
0A76F                           	note D_, 2
0A76F                           o = (2 - 1) * $18
0A76F 1C                        	.db D_ + o
0A770                           	note D_, 2
0A770                           o = (2 - 1) * $18
0A770 1C                        	.db D_ + o
0A771                           	note D_, 2
0A771                           o = (2 - 1) * $18
0A771 1C                        	.db D_ + o
0A772                           	note D_, 2
0A772                           o = (2 - 1) * $18
0A772 1C                        	.db D_ + o
0A773                           	note D_, 2
0A773                           o = (2 - 1) * $18
0A773 1C                        	.db D_ + o
0A774                           	note D_, 2
0A774                           o = (2 - 1) * $18
0A774 1C                        	.db D_ + o
0A775                           	note D_, 2
0A775                           o = (2 - 1) * $18
0A775 1C                        	.db D_ + o
0A776                           	note A_, 1
0A776                           o = (1 - 1) * $18
0A776 12                        	.db A_ + o
0A777                           	note A_, 1
0A777                           o = (1 - 1) * $18
0A777 12                        	.db A_ + o
0A778                           	note A_, 1
0A778                           o = (1 - 1) * $18
0A778 12                        	.db A_ + o
0A779                           	note A_, 1
0A779                           o = (1 - 1) * $18
0A779 12                        	.db A_ + o
0A77A                           	note A_, 1
0A77A                           o = (1 - 1) * $18
0A77A 12                        	.db A_ + o
0A77B                           	note A_, 1
0A77B                           o = (1 - 1) * $18
0A77B 12                        	.db A_ + o
0A77C                           	note A_, 1
0A77C                           o = (1 - 1) * $18
0A77C 12                        	.db A_ + o
0A77D                           	note A_, 1
0A77D                           o = (1 - 1) * $18
0A77D 12                        	.db A_ + o
0A77E                           	note B_, 1
0A77E                           o = (1 - 1) * $18
0A77E 16                        	.db B_ + o
0A77F                           	note B_, 1
0A77F                           o = (1 - 1) * $18
0A77F 16                        	.db B_ + o
0A780                           	note B_, 1
0A780                           o = (1 - 1) * $18
0A780 16                        	.db B_ + o
0A781                           	note B_, 1
0A781                           o = (1 - 1) * $18
0A781 16                        	.db B_ + o
0A782                           	note B_, 1
0A782                           o = (1 - 1) * $18
0A782 16                        	.db B_ + o
0A783                           	note B_, 1
0A783                           o = (1 - 1) * $18
0A783 16                        	.db B_ + o
0A784                           	note B_, 1
0A784                           o = (1 - 1) * $18
0A784 16                        	.db B_ + o
0A785                           	note B_, 1
0A785                           o = (1 - 1) * $18
0A785 16                        	.db B_ + o
0A786                           	sound_loop
0A786 00                        	.db $00
0A787                           
0A787                           MusDTitle7_Noise:
0A787                           	note_type 1, 8
0A787                           i = (1 - 1) << 4
0A787 88                        	.db $80 + i + 8
0A788                           	drum_note P_Crash
0A788 04                        	.db P_Crash * 2
0A789                           	drum_note P_Snare
0A789 0E                        	.db P_Snare * 2
0A78A                           	note_type 1, 4
0A78A                           i = (1 - 1) << 4
0A78A 84                        	.db $80 + i + 4
0A78B                           	drum_note P_Kick
0A78B 10                        	.db P_Kick * 2
0A78C                           	drum_note P_Kick
0A78C 10                        	.db P_Kick * 2
0A78D                           	note_type 1, 8
0A78D                           i = (1 - 1) << 4
0A78D 88                        	.db $80 + i + 8
0A78E                           	drum_note P_Snare
0A78E 0E                        	.db P_Snare * 2
0A78F                           	drum_note P_Kick
0A78F 10                        	.db P_Kick * 2
0A790                           	drum_note P_Snare
0A790 0E                        	.db P_Snare * 2
0A791                           	note_type 1, 4
0A791                           i = (1 - 1) << 4
0A791 84                        	.db $80 + i + 4
0A792                           	drum_note P_Kick
0A792 10                        	.db P_Kick * 2
0A793                           	drum_note P_Kick
0A793 10                        	.db P_Kick * 2
0A794                           	note_type 1, 8
0A794                           i = (1 - 1) << 4
0A794 88                        	.db $80 + i + 8
0A795                           	drum_note P_Snare
0A795 0E                        	.db P_Snare * 2
0A796                           	drum_note P_Kick
0A796 10                        	.db P_Kick * 2
0A797                           	drum_note P_Snare
0A797 0E                        	.db P_Snare * 2
0A798                           	note_type 1, 4
0A798                           i = (1 - 1) << 4
0A798 84                        	.db $80 + i + 4
0A799                           	drum_note P_Kick
0A799 10                        	.db P_Kick * 2
0A79A                           	drum_note P_Kick
0A79A 10                        	.db P_Kick * 2
0A79B                           	note_type 1, 8
0A79B                           i = (1 - 1) << 4
0A79B 88                        	.db $80 + i + 8
0A79C                           	drum_note P_Snare
0A79C 0E                        	.db P_Snare * 2
0A79D                           	drum_note P_Kick
0A79D 10                        	.db P_Kick * 2
0A79E                           	drum_note P_Snare
0A79E 0E                        	.db P_Snare * 2
0A79F                           	note_type 1, 4
0A79F                           i = (1 - 1) << 4
0A79F 84                        	.db $80 + i + 4
0A7A0                           	drum_note P_Kick
0A7A0 10                        	.db P_Kick * 2
0A7A1                           	drum_note P_Kick
0A7A1 10                        	.db P_Kick * 2
0A7A2                           	drum_note P_Snare
0A7A2 0E                        	.db P_Snare * 2
0A7A3                           	drum_note P_Snare
0A7A3 0E                        	.db P_Snare * 2
0A7A4                           	note_type 1, 8
0A7A4                           i = (1 - 1) << 4
0A7A4 88                        	.db $80 + i + 8
0A7A5                           	drum_note P_Kick
0A7A5 10                        	.db P_Kick * 2
0A7A6                           	drum_note P_Snare
0A7A6 0E                        	.db P_Snare * 2
0A7A7                           	note_type 1, 4
0A7A7                           i = (1 - 1) << 4
0A7A7 84                        	.db $80 + i + 4
0A7A8                           	drum_note P_Kick
0A7A8 10                        	.db P_Kick * 2
0A7A9                           	drum_note P_Kick
0A7A9 10                        	.db P_Kick * 2
0A7AA                           	note_type 1, 8
0A7AA                           i = (1 - 1) << 4
0A7AA 88                        	.db $80 + i + 8
0A7AB                           	drum_note P_Snare
0A7AB 0E                        	.db P_Snare * 2
0A7AC                           	drum_note P_Kick
0A7AC 10                        	.db P_Kick * 2
0A7AD                           	drum_note P_Snare
0A7AD 0E                        	.db P_Snare * 2
0A7AE                           	note_type 1, 4
0A7AE                           i = (1 - 1) << 4
0A7AE 84                        	.db $80 + i + 4
0A7AF                           	drum_note P_Kick
0A7AF 10                        	.db P_Kick * 2
0A7B0                           	drum_note P_Kick
0A7B0 10                        	.db P_Kick * 2
0A7B1                           	drum_note P_Snare
0A7B1 0E                        	.db P_Snare * 2
0A7B2                           	drum_note P_Kick
0A7B2 10                        	.db P_Kick * 2
0A7B3                           	note_type 1, 8
0A7B3                           i = (1 - 1) << 4
0A7B3 88                        	.db $80 + i + 8
0A7B4                           	drum_note P_Kick
0A7B4 10                        	.db P_Kick * 2
0A7B5                           	drum_note P_Snare
0A7B5 0E                        	.db P_Snare * 2
0A7B6                           	note_type 1, 4
0A7B6                           i = (1 - 1) << 4
0A7B6 84                        	.db $80 + i + 4
0A7B7                           	drum_note P_Kick
0A7B7 10                        	.db P_Kick * 2
0A7B8                           	drum_note P_Kick
0A7B8 10                        	.db P_Kick * 2
0A7B9                           	note_type 1, 8
0A7B9                           i = (1 - 1) << 4
0A7B9 88                        	.db $80 + i + 8
0A7BA                           	drum_note P_Snare
0A7BA 0E                        	.db P_Snare * 2
0A7BB                           	drum_note P_Kick
0A7BB 10                        	.db P_Kick * 2
0A7BC                           	drum_note P_Snare
0A7BC 0E                        	.db P_Snare * 2
0A7BD                           	note_type 1, 4
0A7BD                           i = (1 - 1) << 4
0A7BD 84                        	.db $80 + i + 4
0A7BE                           	drum_note P_Kick
0A7BE 10                        	.db P_Kick * 2
0A7BF                           	drum_note P_Kick
0A7BF 10                        	.db P_Kick * 2
0A7C0                           	drum_note P_Snare
0A7C0 0E                        	.db P_Snare * 2
0A7C1                           	note_type 1, 0
0A7C1                           i = (1 - 1) << 4
0A7C1 80                        	.db $80 + i + 0
0A7C2                           	drum_note P_Snare
0A7C2 0E                        	.db P_Snare * 2
0A7C3                           	drum_note P_Snare
0A7C3 0E                        	.db P_Snare * 2
0A7C4                           	note_type 1, 8
0A7C4                           i = (1 - 1) << 4
0A7C4 88                        	.db $80 + i + 8
0A7C5                           	drum_note P_Crash
0A7C5 04                        	.db P_Crash * 2
0A7C6                           	drum_note P_Snare
0A7C6 0E                        	.db P_Snare * 2
0A7C7                           	note_type 1, 4
0A7C7                           i = (1 - 1) << 4
0A7C7 84                        	.db $80 + i + 4
0A7C8                           	drum_note P_Kick
0A7C8 10                        	.db P_Kick * 2
0A7C9                           	drum_note P_Kick
0A7C9 10                        	.db P_Kick * 2
0A7CA                           	note_type 1, 8
0A7CA                           i = (1 - 1) << 4
0A7CA 88                        	.db $80 + i + 8
0A7CB                           	drum_note P_Snare
0A7CB 0E                        	.db P_Snare * 2
0A7CC                           	drum_note P_Kick
0A7CC 10                        	.db P_Kick * 2
0A7CD                           	drum_note P_Snare
0A7CD 0E                        	.db P_Snare * 2
0A7CE                           	note_type 1, 4
0A7CE                           i = (1 - 1) << 4
0A7CE 84                        	.db $80 + i + 4
0A7CF                           	drum_note P_Kick
0A7CF 10                        	.db P_Kick * 2
0A7D0                           	drum_note P_Kick
0A7D0 10                        	.db P_Kick * 2
0A7D1                           	note_type 1, 8
0A7D1                           i = (1 - 1) << 4
0A7D1 88                        	.db $80 + i + 8
0A7D2                           	drum_note P_Snare
0A7D2 0E                        	.db P_Snare * 2
0A7D3                           	drum_note P_Kick
0A7D3 10                        	.db P_Kick * 2
0A7D4                           	drum_note P_Snare
0A7D4 0E                        	.db P_Snare * 2
0A7D5                           	note_type 1, 4
0A7D5                           i = (1 - 1) << 4
0A7D5 84                        	.db $80 + i + 4
0A7D6                           	drum_note P_Kick
0A7D6 10                        	.db P_Kick * 2
0A7D7                           	drum_note P_Kick
0A7D7 10                        	.db P_Kick * 2
0A7D8                           	note_type 1, 8
0A7D8                           i = (1 - 1) << 4
0A7D8 88                        	.db $80 + i + 8
0A7D9                           	drum_note P_Snare
0A7D9 0E                        	.db P_Snare * 2
0A7DA                           	drum_note P_Kick
0A7DA 10                        	.db P_Kick * 2
0A7DB                           	drum_note P_Snare
0A7DB 0E                        	.db P_Snare * 2
0A7DC                           	note_type 1, 4
0A7DC                           i = (1 - 1) << 4
0A7DC 84                        	.db $80 + i + 4
0A7DD                           	drum_note P_Snare
0A7DD 0E                        	.db P_Snare * 2
0A7DE                           	note_type 1, 0
0A7DE                           i = (1 - 1) << 4
0A7DE 80                        	.db $80 + i + 0
0A7DF                           	drum_note P_Snare
0A7DF 0E                        	.db P_Snare * 2
0A7E0                           	drum_note P_Snare
0A7E0 0E                        	.db P_Snare * 2
0A7E1                           	note_type 1, 4
0A7E1                           i = (1 - 1) << 4
0A7E1 84                        	.db $80 + i + 4
0A7E2                           	drum_note P_Snare
0A7E2 0E                        	.db P_Snare * 2
0A7E3                           	drum_note P_Snare
0A7E3 0E                        	.db P_Snare * 2
0A7E4                           
0A7E4                           MusDTitle7_DPCM:
0A7E4                           	note_type 1, 4
0A7E4                           i = (1 - 1) << 4
0A7E4 84                        	.db $80 + i + 4
0A7E5                           	smp_note PM_E2
0A7E5 20                        	.db PM_E2 * 2
0A7E6                           	smp_note PM_E2
0A7E6 20                        	.db PM_E2 * 2
0A7E7                           	smp_note Maj_E2
0A7E7 38                        	.db Maj_E2 * 2
0A7E8                           	smp_note PM_E2
0A7E8 20                        	.db PM_E2 * 2
0A7E9                           	smp_note PM_E2
0A7E9 20                        	.db PM_E2 * 2
0A7EA                           	note_type 1, 8
0A7EA                           i = (1 - 1) << 4
0A7EA 88                        	.db $80 + i + 8
0A7EB                           	smp_note Maj_E2
0A7EB 38                        	.db Maj_E2 * 2
0A7EC                           	note_type 1, 4
0A7EC                           i = (1 - 1) << 4
0A7EC 84                        	.db $80 + i + 4
0A7ED                           	smp_note Maj_E2
0A7ED 38                        	.db Maj_E2 * 2
0A7EE                           	smp_note PM_D2
0A7EE 1C                        	.db PM_D2 * 2
0A7EF                           	smp_note PM_D2
0A7EF 1C                        	.db PM_D2 * 2
0A7F0                           	smp_note Maj_D2
0A7F0 34                        	.db Maj_D2 * 2
0A7F1                           	smp_note PM_D2
0A7F1 1C                        	.db PM_D2 * 2
0A7F2                           	smp_note PM_D2
0A7F2 1C                        	.db PM_D2 * 2
0A7F3                           	note_type 1, 8
0A7F3                           i = (1 - 1) << 4
0A7F3 88                        	.db $80 + i + 8
0A7F4                           	smp_note Maj_D2
0A7F4 34                        	.db Maj_D2 * 2
0A7F5                           	note_type 1, 4
0A7F5                           i = (1 - 1) << 4
0A7F5 84                        	.db $80 + i + 4
0A7F6                           	smp_note Maj_D2
0A7F6 34                        	.db Maj_D2 * 2
0A7F7                           	smp_note PM_A2
0A7F7 2A                        	.db PM_A2 * 2
0A7F8                           	smp_note PM_A2
0A7F8 2A                        	.db PM_A2 * 2
0A7F9                           	smp_note Maj_A2
0A7F9 42                        	.db Maj_A2 * 2
0A7FA                           	smp_note PM_A2
0A7FA 2A                        	.db PM_A2 * 2
0A7FB                           	smp_note PM_A2
0A7FB 2A                        	.db PM_A2 * 2
0A7FC                           	smp_note PM_A2
0A7FC 2A                        	.db PM_A2 * 2
0A7FD                           	note_type 1, 8
0A7FD                           i = (1 - 1) << 4
0A7FD 88                        	.db $80 + i + 8
0A7FE                           	smp_note Maj_A2
0A7FE 42                        	.db Maj_A2 * 2
0A7FF                           	smp_note Maj_Slide
0A7FF 30                        	.db Maj_Slide * 2
0A800                           	note_type 1, 4
0A800                           i = (1 - 1) << 4
0A800 84                        	.db $80 + i + 4
0A801                           	smp_note PM_B2
0A801 2E                        	.db PM_B2 * 2
0A802                           	note_type 1, 8
0A802                           i = (1 - 1) << 4
0A802 88                        	.db $80 + i + 8
0A803                           	smp_note Maj_B2
0A803 46                        	.db Maj_B2 * 2
0A804                           	note_type 1, 4
0A804                           i = (1 - 1) << 4
0A804 84                        	.db $80 + i + 4
0A805                           	smp_note Maj_B2
0A805 46                        	.db Maj_B2 * 2
0A806                           	smp_note Maj_B2
0A806 46                        	.db Maj_B2 * 2
0A807                           	smp_note Maj_B2
0A807 46                        	.db Maj_B2 * 2
0A808                           	sound_loop
0A808 00                        	.db $00
0A809                           .include "src/sound/music/title-8.asm"
0A809                           MusDTitle8:
0A809                           MusDTitle8_SQ2:
0A809                           	note_type 3, 12
0A809                           i = (3 - 1) << 4
0A809 AC                        	.db $80 + i + 12
0A80A                           	rest
0A80A 7E                        	.db $7E
0A80B                           	rest
0A80B 7E                        	.db $7E
0A80C                           	rest
0A80C 7E                        	.db $7E
0A80D                           	; ah
0A80D                           	note_type 3, 4
0A80D                           i = (3 - 1) << 4
0A80D A4                        	.db $80 + i + 4
0A80E                           	note D#, 3
0A80E                           o = (3 - 1) * $18
0A80E 36                        	.db D# + o
0A80F                           	note_type 3, 8
0A80F                           i = (3 - 1) << 4
0A80F A8                        	.db $80 + i + 8
0A810                           	note E_, 3
0A810                           o = (3 - 1) * $18
0A810 38                        	.db E_ + o
0A811                           	; ah
0A811                           	note_type 3, 9
0A811                           i = (3 - 1) << 4
0A811 A9                        	.db $80 + i + 9
0A812                           	note D#, 3
0A812                           o = (3 - 1) * $18
0A812 36                        	.db D# + o
0A813                           	note_type 3, 8
0A813                           i = (3 - 1) << 4
0A813 A8                        	.db $80 + i + 8
0A814                           	note D#, 3
0A814                           o = (3 - 1) * $18
0A814 36                        	.db D# + o
0A815                           	sound_ret
0A815 00                        	.db $00
0A816                           
0A816                           MusDTitle8_SQ1:
0A816                           	note_type 2, 4
0A816                           i = (2 - 1) << 4
0A816 94                        	.db $80 + i + 4
0A817                           	rest
0A817 7E                        	.db $7E
0A818                           	; be-
0A818                           	note_type 2, 0
0A818                           i = (2 - 1) << 4
0A818 90                        	.db $80 + i + 0
0A819                           	note B_, 2
0A819                           o = (2 - 1) * $18
0A819 2E                        	.db B_ + o
0A81A                           	note_type 1, 1
0A81A                           i = (1 - 1) << 4
0A81A 81                        	.db $80 + i + 1
0A81B                           	rest
0A81B 7E                        	.db $7E
0A81C                           	; -cause
0A81C                           	toggle_sweep
0A81C 00                        	.db $00
0A81D                           	note E_, 3
0A81D                           o = (3 - 1) * $18
0A81D 38                        	.db E_ + o
0A81E                           	toggle_sweep
0A81E 00                        	.db $00
0A81F                           	note_type 3, 8
0A81F                           i = (3 - 1) << 4
0A81F A8                        	.db $80 + i + 8
0A820                           	note E_, 3
0A820                           o = (3 - 1) * $18
0A820 38                        	.db E_ + o
0A821                           	; when
0A821                           	note_type 4, 8
0A821                           i = (4 - 1) << 4
0A821 B8                        	.db $80 + i + 8
0A822                           	note G#, 3
0A822                           o = (3 - 1) * $18
0A822 40                        	.db G# + o
0A823                           	; he's
0A823                           	note_type 2, 5
0A823                           i = (2 - 1) << 4
0A823 95                        	.db $80 + i + 5
0A824                           	note B_, 3
0A824                           o = (3 - 1) * $18
0A824 46                        	.db B_ + o
0A825                           	toggle_sweep
0A825 00                        	.db $00
0A826                           	note_type 1, 1
0A826                           i = (1 - 1) << 4
0A826 81                        	.db $80 + i + 1
0A827                           	note C_, 6
0A827                           o = (6 - 1) * $18
0A827 78                        	.db C_ + o
0A828                           	note C_, 6
0A828                           o = (6 - 1) * $18
0A828 78                        	.db C_ + o
0A829                           	toggle_sweep
0A829 00                        	.db $00
0A82A                           	; run-
0A82A                           	note_type 4, 1
0A82A                           i = (4 - 1) << 4
0A82A B1                        	.db $80 + i + 1
0A82B                           	note A_, 3
0A82B                           o = (3 - 1) * $18
0A82B 42                        	.db A_ + o
0A82C                           	note_type 3, 4
0A82C                           i = (3 - 1) << 4
0A82C A4                        	.db $80 + i + 4
0A82D                           	note A_, 3
0A82D                           o = (3 - 1) * $18
0A82D 42                        	.db A_ + o
0A82E                           	note_type 2, 1
0A82E                           i = (2 - 1) << 4
0A82E 91                        	.db $80 + i + 1
0A82F                           	rest
0A82F 7E                        	.db $7E
0A830                           	; -ning
0A830                           	note_type 2, 5
0A830                           i = (2 - 1) << 4
0A830 95                        	.db $80 + i + 5
0A831                           	note G#, 3
0A831                           o = (3 - 1) * $18
0A831 40                        	.db G# + o
0A832                           	; out,
0A832                           	note_type 3, 4
0A832                           i = (3 - 1) << 4
0A832 A4                        	.db $80 + i + 4
0A833                           	note F#, 3
0A833                           o = (3 - 1) * $18
0A833 3C                        	.db F# + o
0A834                           	note_type 6, 0
0A834                           i = (6 - 1) << 4
0A834 D0                        	.db $80 + i + 0
0A835                           	note F#, 3
0A835                           o = (3 - 1) * $18
0A835 3C                        	.db F# + o
0A836                           	note_type 1, 8
0A836                           i = (1 - 1) << 4
0A836 88                        	.db $80 + i + 8
0A837                           	rest
0A837 7E                        	.db $7E
0A838                           	note_type 1, 1
0A838                           i = (1 - 1) << 4
0A838 81                        	.db $80 + i + 1
0A839                           	rest
0A839 7E                        	.db $7E
0A83A                           	; they'll
0A83A                           	toggle_sweep
0A83A 00                        	.db $00
0A83B                           	note C_, 6
0A83B                           o = (6 - 1) * $18
0A83B 78                        	.db C_ + o
0A83C                           	toggle_sweep
0A83C 00                        	.db $00
0A83D                           	note_type 4, 4
0A83D                           i = (4 - 1) << 4
0A83D B4                        	.db $80 + i + 4
0A83E                           	note E_, 3
0A83E                           o = (3 - 1) * $18
0A83E 38                        	.db E_ + o
0A83F                           	; al-
0A83F                           	note_type 3, 0
0A83F                           i = (3 - 1) << 4
0A83F A0                        	.db $80 + i + 0
0A840                           	note F_, 3
0A840                           o = (3 - 1) * $18
0A840 3A                        	.db F_ + o
0A841                           	note_type 3, 5
0A841                           i = (3 - 1) << 4
0A841 A5                        	.db $80 + i + 5
0A842                           	note F#, 3
0A842                           o = (3 - 1) * $18
0A842 3C                        	.db F# + o
0A843                           	; -ways
0A843                           	note_type 4, 0
0A843                           i = (4 - 1) << 4
0A843 B0                        	.db $80 + i + 0
0A844                           	note G#, 3
0A844                           o = (3 - 1) * $18
0A844 40                        	.db G# + o
0A845                           	toggle_sweep
0A845 00                        	.db $00
0A846                           	note_type 1, 1
0A846                           i = (1 - 1) << 4
0A846 81                        	.db $80 + i + 1
0A847                           	note C_, 6
0A847                           o = (6 - 1) * $18
0A847 78                        	.db C_ + o
0A848                           	note C_, 6
0A848                           o = (6 - 1) * $18
0A848 78                        	.db C_ + o
0A849                           	toggle_sweep
0A849 00                        	.db $00
0A84A                           	; know
0A84A                           	note_type 4, 8
0A84A                           i = (4 - 1) << 4
0A84A B8                        	.db $80 + i + 8
0A84B                           	note A_, 3
0A84B                           o = (3 - 1) * $18
0A84B 42                        	.db A_ + o
0A84C                           	; his
0A84C                           	note_type 2, 5
0A84C                           i = (2 - 1) << 4
0A84C 95                        	.db $80 + i + 5
0A84D                           	note G#, 3
0A84D                           o = (3 - 1) * $18
0A84D 40                        	.db G# + o
0A84E                           	toggle_sweep
0A84E 00                        	.db $00
0A84F                           	note_type 1, 1
0A84F                           i = (1 - 1) << 4
0A84F 81                        	.db $80 + i + 1
0A850                           	note C_, 6
0A850                           o = (6 - 1) * $18
0A850 78                        	.db C_ + o
0A851                           	toggle_sweep
0A851 00                        	.db $00
0A852                           	; name.
0A852                           	note_type 2, 1
0A852                           i = (2 - 1) << 4
0A852 91                        	.db $80 + i + 1
0A853                           	note A_, 3
0A853                           o = (3 - 1) * $18
0A853 42                        	.db A_ + o
0A854                           	note_type 4, 4
0A854                           i = (4 - 1) << 4
0A854 B4                        	.db $80 + i + 4
0A855                           	note A_, 3
0A855                           o = (3 - 1) * $18
0A855 42                        	.db A_ + o
0A856                           	note_type 4, 9
0A856                           i = (4 - 1) << 4
0A856 B9                        	.db $80 + i + 9
0A857                           	note B_, 3
0A857                           o = (3 - 1) * $18
0A857 46                        	.db B_ + o
0A858                           	note_type 6, 4
0A858                           i = (6 - 1) << 4
0A858 D4                        	.db $80 + i + 4
0A859                           	note B_, 3
0A859                           o = (3 - 1) * $18
0A859 46                        	.db B_ + o
0A85A                           	; ah
0A85A                           	note_type 3, 10
0A85A                           i = (3 - 1) << 4
0A85A AA                        	.db $80 + i + 10
0A85B                           	note B_, 2
0A85B                           o = (2 - 1) * $18
0A85B 2E                        	.db B_ + o
0A85C                           
0A85C                           MusDTitle8_Hill:
0A85C                           	note_type 1, 4
0A85C                           i = (1 - 1) << 4
0A85C 84                        	.db $80 + i + 4
0A85D                           	note E_, 2
0A85D                           o = (2 - 1) * $18
0A85D 20                        	.db E_ + o
0A85E                           	note E_, 2
0A85E                           o = (2 - 1) * $18
0A85E 20                        	.db E_ + o
0A85F                           	note E_, 2
0A85F                           o = (2 - 1) * $18
0A85F 20                        	.db E_ + o
0A860                           	note E_, 2
0A860                           o = (2 - 1) * $18
0A860 20                        	.db E_ + o
0A861                           	note E_, 2
0A861                           o = (2 - 1) * $18
0A861 20                        	.db E_ + o
0A862                           	note E_, 2
0A862                           o = (2 - 1) * $18
0A862 20                        	.db E_ + o
0A863                           	note E_, 2
0A863                           o = (2 - 1) * $18
0A863 20                        	.db E_ + o
0A864                           	note E_, 2
0A864                           o = (2 - 1) * $18
0A864 20                        	.db E_ + o
0A865                           	note D_, 2
0A865                           o = (2 - 1) * $18
0A865 1C                        	.db D_ + o
0A866                           	note D_, 2
0A866                           o = (2 - 1) * $18
0A866 1C                        	.db D_ + o
0A867                           	note D_, 2
0A867                           o = (2 - 1) * $18
0A867 1C                        	.db D_ + o
0A868                           	note D_, 2
0A868                           o = (2 - 1) * $18
0A868 1C                        	.db D_ + o
0A869                           	note D_, 2
0A869                           o = (2 - 1) * $18
0A869 1C                        	.db D_ + o
0A86A                           	note D_, 2
0A86A                           o = (2 - 1) * $18
0A86A 1C                        	.db D_ + o
0A86B                           	note D_, 2
0A86B                           o = (2 - 1) * $18
0A86B 1C                        	.db D_ + o
0A86C                           	note D_, 2
0A86C                           o = (2 - 1) * $18
0A86C 1C                        	.db D_ + o
0A86D                           	note A_, 1
0A86D                           o = (1 - 1) * $18
0A86D 12                        	.db A_ + o
0A86E                           	note A_, 1
0A86E                           o = (1 - 1) * $18
0A86E 12                        	.db A_ + o
0A86F                           	note A_, 1
0A86F                           o = (1 - 1) * $18
0A86F 12                        	.db A_ + o
0A870                           	note A_, 1
0A870                           o = (1 - 1) * $18
0A870 12                        	.db A_ + o
0A871                           	note A_, 1
0A871                           o = (1 - 1) * $18
0A871 12                        	.db A_ + o
0A872                           	note A_, 1
0A872                           o = (1 - 1) * $18
0A872 12                        	.db A_ + o
0A873                           	note A_, 1
0A873                           o = (1 - 1) * $18
0A873 12                        	.db A_ + o
0A874                           	note A_, 1
0A874                           o = (1 - 1) * $18
0A874 12                        	.db A_ + o
0A875                           	note B_, 1
0A875                           o = (1 - 1) * $18
0A875 16                        	.db B_ + o
0A876                           	note B_, 1
0A876                           o = (1 - 1) * $18
0A876 16                        	.db B_ + o
0A877                           	note B_, 1
0A877                           o = (1 - 1) * $18
0A877 16                        	.db B_ + o
0A878                           	note B_, 1
0A878                           o = (1 - 1) * $18
0A878 16                        	.db B_ + o
0A879                           	note B_, 1
0A879                           o = (1 - 1) * $18
0A879 16                        	.db B_ + o
0A87A                           	note B_, 1
0A87A                           o = (1 - 1) * $18
0A87A 16                        	.db B_ + o
0A87B                           	note B_, 1
0A87B                           o = (1 - 1) * $18
0A87B 16                        	.db B_ + o
0A87C                           	note B_, 1
0A87C                           o = (1 - 1) * $18
0A87C 16                        	.db B_ + o
0A87D                           
0A87D                           MusDTitle8_Noise:
0A87D                           	note_type 1, 8
0A87D                           i = (1 - 1) << 4
0A87D 88                        	.db $80 + i + 8
0A87E                           	drum_note P_Crash
0A87E 04                        	.db P_Crash * 2
0A87F                           	drum_note P_Snare
0A87F 0E                        	.db P_Snare * 2
0A880                           	note_type 1, 4
0A880                           i = (1 - 1) << 4
0A880 84                        	.db $80 + i + 4
0A881                           	drum_note P_Kick
0A881 10                        	.db P_Kick * 2
0A882                           	drum_note P_Kick
0A882 10                        	.db P_Kick * 2
0A883                           	note_type 1, 8
0A883                           i = (1 - 1) << 4
0A883 88                        	.db $80 + i + 8
0A884                           	drum_note P_Snare
0A884 0E                        	.db P_Snare * 2
0A885                           	drum_note P_Kick
0A885 10                        	.db P_Kick * 2
0A886                           	drum_note P_Snare
0A886 0E                        	.db P_Snare * 2
0A887                           	note_type 1, 4
0A887                           i = (1 - 1) << 4
0A887 84                        	.db $80 + i + 4
0A888                           	drum_note P_Kick
0A888 10                        	.db P_Kick * 2
0A889                           	drum_note P_Kick
0A889 10                        	.db P_Kick * 2
0A88A                           	drum_note P_Snare
0A88A 0E                        	.db P_Snare * 2
0A88B                           	drum_note P_Kick
0A88B 10                        	.db P_Kick * 2
0A88C                           	note_type 1, 8
0A88C                           i = (1 - 1) << 4
0A88C 88                        	.db $80 + i + 8
0A88D                           	drum_note P_Kick
0A88D 10                        	.db P_Kick * 2
0A88E                           	drum_note P_Snare
0A88E 0E                        	.db P_Snare * 2
0A88F                           	note_type 1, 4
0A88F                           i = (1 - 1) << 4
0A88F 84                        	.db $80 + i + 4
0A890                           	drum_note P_Kick
0A890 10                        	.db P_Kick * 2
0A891                           	drum_note P_Kick
0A891 10                        	.db P_Kick * 2
0A892                           	note_type 1, 8
0A892                           i = (1 - 1) << 4
0A892 88                        	.db $80 + i + 8
0A893                           	drum_note P_Snare
0A893 0E                        	.db P_Snare * 2
0A894                           	note_type 1, 4
0A894                           i = (1 - 1) << 4
0A894 84                        	.db $80 + i + 4
0A895                           	drum_note P_Snare
0A895 0E                        	.db P_Snare * 2
0A896                           	drum_note P_Kick
0A896 10                        	.db P_Kick * 2
0A897                           	drum_note P_Snare
0A897 0E                        	.db P_Snare * 2
0A898                           	drum_note P_Kick
0A898 10                        	.db P_Kick * 2
0A899                           	drum_note P_Snare
0A899 0E                        	.db P_Snare * 2
0A89A                           	note_type 1, 0
0A89A                           i = (1 - 1) << 4
0A89A 80                        	.db $80 + i + 0
0A89B                           	drum_note P_Snare
0A89B 0E                        	.db P_Snare * 2
0A89C                           	drum_note P_Snare
0A89C 0E                        	.db P_Snare * 2
0A89D                           	note_type 1, 4
0A89D                           i = (1 - 1) << 4
0A89D 84                        	.db $80 + i + 4
0A89E                           	drum_note P_Snare
0A89E 0E                        	.db P_Snare * 2
0A89F                           	note_type 1, 0
0A89F                           i = (1 - 1) << 4
0A89F 80                        	.db $80 + i + 0
0A8A0                           	drum_note P_Snare
0A8A0 0E                        	.db P_Snare * 2
0A8A1                           	drum_note P_Snare
0A8A1 0E                        	.db P_Snare * 2
0A8A2                           
0A8A2                           MusDTitle8_DPCM:
0A8A2                           	note_type 1, 4
0A8A2                           i = (1 - 1) << 4
0A8A2 84                        	.db $80 + i + 4
0A8A3                           	smp_note PM_E2
0A8A3 20                        	.db PM_E2 * 2
0A8A4                           	smp_note PM_E2
0A8A4 20                        	.db PM_E2 * 2
0A8A5                           	smp_note Maj_E2
0A8A5 38                        	.db Maj_E2 * 2
0A8A6                           	smp_note PM_E2
0A8A6 20                        	.db PM_E2 * 2
0A8A7                           	smp_note PM_E2
0A8A7 20                        	.db PM_E2 * 2
0A8A8                           	note_type 1, 8
0A8A8                           i = (1 - 1) << 4
0A8A8 88                        	.db $80 + i + 8
0A8A9                           	smp_note Maj_E2
0A8A9 38                        	.db Maj_E2 * 2
0A8AA                           	note_type 1, 4
0A8AA                           i = (1 - 1) << 4
0A8AA 84                        	.db $80 + i + 4
0A8AB                           	smp_note Maj_E2
0A8AB 38                        	.db Maj_E2 * 2
0A8AC                           	smp_note PM_D2
0A8AC 1C                        	.db PM_D2 * 2
0A8AD                           	smp_note PM_D2
0A8AD 1C                        	.db PM_D2 * 2
0A8AE                           	smp_note Maj_D2
0A8AE 34                        	.db Maj_D2 * 2
0A8AF                           	smp_note PM_D2
0A8AF 1C                        	.db PM_D2 * 2
0A8B0                           	smp_note PM_D2
0A8B0 1C                        	.db PM_D2 * 2
0A8B1                           	note_type 1, 8
0A8B1                           i = (1 - 1) << 4
0A8B1 88                        	.db $80 + i + 8
0A8B2                           	smp_note Maj_D2
0A8B2 34                        	.db Maj_D2 * 2
0A8B3                           	note_type 1, 4
0A8B3                           i = (1 - 1) << 4
0A8B3 84                        	.db $80 + i + 4
0A8B4                           	smp_note Maj_D2
0A8B4 34                        	.db Maj_D2 * 2
0A8B5                           	smp_note PM_A2
0A8B5 2A                        	.db PM_A2 * 2
0A8B6                           	smp_note PM_A2
0A8B6 2A                        	.db PM_A2 * 2
0A8B7                           	smp_note Maj_A2
0A8B7 42                        	.db Maj_A2 * 2
0A8B8                           	smp_note PM_A2
0A8B8 2A                        	.db PM_A2 * 2
0A8B9                           	smp_note PM_A2
0A8B9 2A                        	.db PM_A2 * 2
0A8BA                           	smp_note PM_A2
0A8BA 2A                        	.db PM_A2 * 2
0A8BB                           	note_type 1, 8
0A8BB                           i = (1 - 1) << 4
0A8BB 88                        	.db $80 + i + 8
0A8BC                           	smp_note Maj_A2
0A8BC 42                        	.db Maj_A2 * 2
0A8BD                           	smp_note Maj_Slide
0A8BD 30                        	.db Maj_Slide * 2
0A8BE                           	note_type 1, 4
0A8BE                           i = (1 - 1) << 4
0A8BE 84                        	.db $80 + i + 4
0A8BF                           	smp_note Maj_B2
0A8BF 46                        	.db Maj_B2 * 2
0A8C0                           	smp_note Maj_B2
0A8C0 46                        	.db Maj_B2 * 2
0A8C1                           	smp_note Maj_B2
0A8C1 46                        	.db Maj_B2 * 2
0A8C2                           	smp_note Maj_B2
0A8C2 46                        	.db Maj_B2 * 2
0A8C3                           	smp_note Maj_B2
0A8C3 46                        	.db Maj_B2 * 2
0A8C4                           	smp_note Maj_B2
0A8C4 46                        	.db Maj_B2 * 2
0A8C5                           .include "src/sound/music/title-9.asm"
0A8C5                           MusDTitle9:
0A8C5                           MusDTitle9_SQ2:
0A8C5                           	; ah
0A8C5                           	note_type 3, 10
0A8C5                           i = (3 - 1) << 4
0A8C5 AA                        	.db $80 + i + 10
0A8C6                           	note E_, 3
0A8C6                           o = (3 - 1) * $18
0A8C6 38                        	.db E_ + o
0A8C7                           	note E_, 3
0A8C7                           o = (3 - 1) * $18
0A8C7 38                        	.db E_ + o
0A8C8                           	note E_, 3
0A8C8                           o = (3 - 1) * $18
0A8C8 38                        	.db E_ + o
0A8C9                           	note E_, 3
0A8C9                           o = (3 - 1) * $18
0A8C9 38                        	.db E_ + o
0A8CA                           	note_type 3, 4
0A8CA                           i = (3 - 1) << 4
0A8CA A4                        	.db $80 + i + 4
0A8CB                           	note D#, 3
0A8CB                           o = (3 - 1) * $18
0A8CB 36                        	.db D# + o
0A8CC                           	note_type 3, 9
0A8CC                           i = (3 - 1) << 4
0A8CC A9                        	.db $80 + i + 9
0A8CD                           	note E_, 3
0A8CD                           o = (3 - 1) * $18
0A8CD 38                        	.db E_ + o
0A8CE                           	note_type 3, 10
0A8CE                           i = (3 - 1) << 4
0A8CE AA                        	.db $80 + i + 10
0A8CF                           	note D#, 3
0A8CF                           o = (3 - 1) * $18
0A8CF 36                        	.db D# + o
0A8D0                           	note_type 3, 12
0A8D0                           i = (3 - 1) << 4
0A8D0 AC                        	.db $80 + i + 12
0A8D1                           	note E_, 3
0A8D1                           o = (3 - 1) * $18
0A8D1 38                        	.db E_ + o
0A8D2                           	; ah
0A8D2                           	note_type 3, 10
0A8D2                           i = (3 - 1) << 4
0A8D2 AA                        	.db $80 + i + 10
0A8D3                           	note E_, 3
0A8D3                           o = (3 - 1) * $18
0A8D3 38                        	.db E_ + o
0A8D4                           	note E_, 3
0A8D4                           o = (3 - 1) * $18
0A8D4 38                        	.db E_ + o
0A8D5                           	note E_, 3
0A8D5                           o = (3 - 1) * $18
0A8D5 38                        	.db E_ + o
0A8D6                           	note E_, 3
0A8D6                           o = (3 - 1) * $18
0A8D6 38                        	.db E_ + o
0A8D7                           	sound_ret
0A8D7 00                        	.db $00
0A8D8                           
0A8D8                           MusDTitle9_SQ1:
0A8D8                           	; ah
0A8D8                           	note_type 3, 4
0A8D8                           i = (3 - 1) << 4
0A8D8 A4                        	.db $80 + i + 4
0A8D9                           	note B_, 2
0A8D9                           o = (2 - 1) * $18
0A8D9 2E                        	.db B_ + o
0A8DA                           	note C#, 3
0A8DA                           o = (3 - 1) * $18
0A8DA 32                        	.db C# + o
0A8DB                           	; It's
0A8DB                           	note_type 2, 4
0A8DB                           i = (2 - 1) << 4
0A8DB 94                        	.db $80 + i + 4
0A8DC                           	note C#, 4
0A8DC                           o = (4 - 1) * $18
0A8DC 4A                        	.db C# + o
0A8DD                           	toggle_sweep
0A8DD 00                        	.db $00
0A8DE                           	note_type 3, 4
0A8DE                           i = (3 - 1) << 4
0A8DE A4                        	.db $80 + i + 4
0A8DF                           	note C_, 6
0A8DF                           o = (6 - 1) * $18
0A8DF 78                        	.db C_ + o
0A8E0                           	toggle_sweep
0A8E0 00                        	.db $00
0A8E1                           	; O-
0A8E1                           	note_type 4, 8
0A8E1                           i = (4 - 1) << 4
0A8E1 B8                        	.db $80 + i + 8
0A8E2                           	note C#, 4
0A8E2                           o = (4 - 1) * $18
0A8E2 4A                        	.db C# + o
0A8E3                           	; -tis,
0A8E3                           	note_type 2, 4
0A8E3                           i = (2 - 1) << 4
0A8E3 94                        	.db $80 + i + 4
0A8E4                           	note A_, 3
0A8E4                           o = (3 - 1) * $18
0A8E4 42                        	.db A_ + o
0A8E5                           	toggle_sweep
0A8E5 00                        	.db $00
0A8E6                           	note_type 1, 0
0A8E6                           i = (1 - 1) << 4
0A8E6 80                        	.db $80 + i + 0
0A8E7                           	note C_, 6
0A8E7                           o = (6 - 1) * $18
0A8E7 78                        	.db C_ + o
0A8E8                           	note_type 3, 1
0A8E8                           i = (3 - 1) << 4
0A8E8 A1                        	.db $80 + i + 1
0A8E9                           	rest
0A8E9 7E                        	.db $7E
0A8EA                           	; June
0A8EA                           	note C_, 6
0A8EA                           o = (6 - 1) * $18
0A8EA 78                        	.db C_ + o
0A8EB                           	toggle_sweep
0A8EB 00                        	.db $00
0A8EC                           	note_type 2, 8
0A8EC                           i = (2 - 1) << 4
0A8EC 98                        	.db $80 + i + 8
0A8ED                           	note B_, 3
0A8ED                           o = (3 - 1) * $18
0A8ED 46                        	.db B_ + o
0A8EE                           	; and
0A8EE                           	note_type 3, 0
0A8EE                           i = (3 - 1) << 4
0A8EE A0                        	.db $80 + i + 0
0A8EF                           	note A_, 3
0A8EF                           o = (3 - 1) * $18
0A8EF 42                        	.db A_ + o
0A8F0                           	note_type 5, 0
0A8F0                           i = (5 - 1) << 4
0A8F0 C0                        	.db $80 + i + 0
0A8F1                           	note A_, 3
0A8F1                           o = (3 - 1) * $18
0A8F1 42                        	.db A_ + o
0A8F2                           	; him
0A8F2                           	note_type 2, 8
0A8F2                           i = (2 - 1) << 4
0A8F2 98                        	.db $80 + i + 8
0A8F3                           	note G#, 3
0A8F3                           o = (3 - 1) * $18
0A8F3 40                        	.db G# + o
0A8F4                           	rest
0A8F4 7E                        	.db $7E
0A8F5                           	; just
0A8F5                           	toggle_sweep
0A8F5 00                        	.db $00
0A8F6                           	note_type 3, 1
0A8F6                           i = (3 - 1) << 4
0A8F6 A1                        	.db $80 + i + 1
0A8F7                           	note C_, 6
0A8F7                           o = (6 - 1) * $18
0A8F7 78                        	.db C_ + o
0A8F8                           	toggle_sweep
0A8F8 00                        	.db $00
0A8F9                           	note_type 3, 0
0A8F9                           i = (3 - 1) << 4
0A8F9 A0                        	.db $80 + i + 0
0A8FA                           	note E_, 3
0A8FA                           o = (3 - 1) * $18
0A8FA 38                        	.db E_ + o
0A8FB                           	toggle_sweep
0A8FB 00                        	.db $00
0A8FC                           	note_type 1, 1
0A8FC                           i = (1 - 1) << 4
0A8FC 81                        	.db $80 + i + 1
0A8FD                           	note C_, 6
0A8FD                           o = (6 - 1) * $18
0A8FD 78                        	.db C_ + o
0A8FE                           	toggle_sweep
0A8FE 00                        	.db $00
0A8FF                           	; ven-
0A8FF                           	note_type 2, 1
0A8FF                           i = (2 - 1) << 4
0A8FF 91                        	.db $80 + i + 1
0A900                           	note A_, 3
0A900                           o = (3 - 1) * $18
0A900 42                        	.db A_ + o
0A901                           	note_type 4, 4
0A901                           i = (4 - 1) << 4
0A901 B4                        	.db $80 + i + 4
0A902                           	note A_, 3
0A902                           o = (3 - 1) * $18
0A902 42                        	.db A_ + o
0A903                           	note_type 6, 0
0A903                           i = (6 - 1) << 4
0A903 D0                        	.db $80 + i + 0
0A904                           	note A_, 3
0A904                           o = (3 - 1) * $18
0A904 42                        	.db A_ + o
0A905                           	; -tur-
0A905                           	toggle_sweep
0A905 00                        	.db $00
0A906                           	note_type 3, 1
0A906                           i = (3 - 1) << 4
0A906 A1                        	.db $80 + i + 1
0A907                           	note C_, 6
0A907                           o = (6 - 1) * $18
0A907 78                        	.db C_ + o
0A908                           	toggle_sweep
0A908 00                        	.db $00
0A909                           	note_type 4, 4
0A909                           i = (4 - 1) << 4
0A909 B4                        	.db $80 + i + 4
0A90A                           	note G#, 3
0A90A                           o = (3 - 1) * $18
0A90A 40                        	.db G# + o
0A90B                           	; -ing
0A90B                           	note_type 2, 5
0A90B                           i = (2 - 1) << 4
0A90B 95                        	.db $80 + i + 5
0A90C                           	note F#, 3
0A90C                           o = (3 - 1) * $18
0A90C 3C                        	.db F# + o
0A90D                           	note_type 3, 1
0A90D                           i = (3 - 1) << 4
0A90D A1                        	.db $80 + i + 1
0A90E                           	rest
0A90E 7E                        	.db $7E
0A90F                           	; to-
0A90F                           	toggle_sweep
0A90F 00                        	.db $00
0A910                           	note C_, 6
0A910                           o = (6 - 1) * $18
0A910 78                        	.db C_ + o
0A911                           	toggle_sweep
0A911 00                        	.db $00
0A912                           	note_type 2, 5
0A912                           i = (2 - 1) << 4
0A912 95                        	.db $80 + i + 5
0A913                           	note G#, 3
0A913                           o = (3 - 1) * $18
0A913 40                        	.db G# + o
0A914                           	note_type 1, 1
0A914                           i = (1 - 1) << 4
0A914 81                        	.db $80 + i + 1
0A915                           	rest
0A915 7E                        	.db $7E
0A916                           	; -ge-
0A916                           	toggle_sweep
0A916 00                        	.db $00
0A917                           	note G#, 3
0A917                           o = (3 - 1) * $18
0A917 40                        	.db G# + o
0A918                           	toggle_sweep
0A918 00                        	.db $00
0A919                           	note_type 4, 5
0A919                           i = (4 - 1) << 4
0A919 B5                        	.db $80 + i + 5
0A91A                           	note G#, 3
0A91A                           o = (3 - 1) * $18
0A91A 40                        	.db G# + o
0A91B                           	note_type 1, 1
0A91B                           i = (1 - 1) << 4
0A91B 81                        	.db $80 + i + 1
0A91C                           	rest
0A91C 7E                        	.db $7E
0A91D                           	; -ther.
0A91D                           	toggle_sweep
0A91D 00                        	.db $00
0A91E                           	note C_, 6
0A91E                           o = (6 - 1) * $18
0A91E 78                        	.db C_ + o
0A91F                           	toggle_sweep
0A91F 00                        	.db $00
0A920                           	note_type 4, 9
0A920                           i = (4 - 1) << 4
0A920 B9                        	.db $80 + i + 9
0A921                           	note E_, 3
0A921                           o = (3 - 1) * $18
0A921 38                        	.db E_ + o
0A922                           	note_type 4, 10
0A922                           i = (4 - 1) << 4
0A922 BA                        	.db $80 + i + 10
0A923                           	rest
0A923 7E                        	.db $7E
0A924                           	; ah
0A924                           	note_type 3, 4
0A924                           i = (3 - 1) << 4
0A924 A4                        	.db $80 + i + 4
0A925                           	note B_, 2
0A925                           o = (2 - 1) * $18
0A925 2E                        	.db B_ + o
0A926                           	note C#, 3
0A926                           o = (3 - 1) * $18
0A926 32                        	.db C# + o
0A927                           	; Who
0A927                           	note_type 2, 0
0A927                           i = (2 - 1) << 4
0A927 90                        	.db $80 + i + 0
0A928                           	note C_, 4
0A928                           o = (4 - 1) * $18
0A928 48                        	.db C_ + o
0A929                           	note_type 2, 5
0A929                           i = (2 - 1) << 4
0A929 95                        	.db $80 + i + 5
0A92A                           	note C#, 4
0A92A                           o = (4 - 1) * $18
0A92A 4A                        	.db C# + o
0A92B                           	; knows
0A92B                           	note_type 4, 5
0A92B                           i = (4 - 1) << 4
0A92B B5                        	.db $80 + i + 5
0A92C                           	note C#, 4
0A92C                           o = (4 - 1) * $18
0A92C 4A                        	.db C# + o
0A92D                           	toggle_sweep
0A92D 00                        	.db $00
0A92E                           	note_type 1, 1
0A92E                           i = (1 - 1) << 4
0A92E 81                        	.db $80 + i + 1
0A92F                           	note C_, 6
0A92F                           o = (6 - 1) * $18
0A92F 78                        	.db C_ + o
0A930                           	; the
0A930                           	note C_, 6
0A930                           o = (6 - 1) * $18
0A930 78                        	.db C_ + o
0A931                           	toggle_sweep
0A931 00                        	.db $00
0A932                           	note_type 3, 4
0A932                           i = (3 - 1) << 4
0A932 A4                        	.db $80 + i + 4
0A933                           	note D#, 4
0A933                           o = (4 - 1) * $18
0A933 4E                        	.db D# + o
0A934                           	; mis-
0A934                           	note_type 2, 4
0A934                           i = (2 - 1) << 4
0A934 94                        	.db $80 + i + 4
0A935                           	note E_, 4
0A935                           o = (4 - 1) * $18
0A935 50                        	.db E_ + o
0A936                           	toggle_sweep
0A936 00                        	.db $00
0A937                           	note_type 1, 1
0A937                           i = (1 - 1) << 4
0A937 81                        	.db $80 + i + 1
0A938                           	note C_, 6
0A938                           o = (6 - 1) * $18
0A938 78                        	.db C_ + o
0A939                           	note C_, 6
0A939                           o = (6 - 1) * $18
0A939 78                        	.db C_ + o
0A93A                           	rest
0A93A 7E                        	.db $7E
0A93B                           	; -chief
0A93B                           	note_type 3, 1
0A93B                           i = (3 - 1) << 4
0A93B A1                        	.db $80 + i + 1
0A93C                           	note C_, 6
0A93C                           o = (6 - 1) * $18
0A93C 78                        	.db C_ + o
0A93D                           	toggle_sweep
0A93D 00                        	.db $00
0A93E                           	note_type 2, 4
0A93E                           i = (2 - 1) << 4
0A93E 94                        	.db $80 + i + 4
0A93F                           	note B_, 3
0A93F                           o = (3 - 1) * $18
0A93F 46                        	.db B_ + o
0A940                           	note_type 2, 0
0A940                           i = (2 - 1) << 4
0A940 90                        	.db $80 + i + 0
0A941                           	rest
0A941 7E                        	.db $7E
0A942                           	note_type 1, 1
0A942                           i = (1 - 1) << 4
0A942 81                        	.db $80 + i + 1
0A943                           	rest
0A943 7E                        	.db $7E
0A944                           	; that
0A944                           	toggle_sweep
0A944 00                        	.db $00
0A945                           	note C_, 6
0A945                           o = (6 - 1) * $18
0A945 78                        	.db C_ + o
0A946                           	toggle_sweep
0A946 00                        	.db $00
0A947                           	note_type 3, 8
0A947                           i = (3 - 1) << 4
0A947 A8                        	.db $80 + i + 8
0A948                           	note B_, 3
0A948                           o = (3 - 1) * $18
0A948 46                        	.db B_ + o
0A949                           	note_type 3, 5
0A949                           i = (3 - 1) << 4
0A949 A5                        	.db $80 + i + 5
0A94A                           	rest
0A94A 7E                        	.db $7E
0A94B                           	note_type 1, 1
0A94B                           i = (1 - 1) << 4
0A94B 81                        	.db $80 + i + 1
0A94C                           	rest
0A94C 7E                        	.db $7E
0A94D                           	; they'll
0A94D                           	toggle_sweep
0A94D 00                        	.db $00
0A94E                           	note C_, 6
0A94E                           o = (6 - 1) * $18
0A94E 78                        	.db C_ + o
0A94F                           	toggle_sweep
0A94F 00                        	.db $00
0A950                           	note_type 4, 4
0A950                           i = (4 - 1) << 4
0A950 B4                        	.db $80 + i + 4
0A951                           	note B_, 3
0A951                           o = (3 - 1) * $18
0A951 46                        	.db B_ + o
0A952                           
0A952                           MusDTitle9_Hill:
0A952                           	note_type 1, 8
0A952                           i = (1 - 1) << 4
0A952 88                        	.db $80 + i + 8
0A953                           	note A_, 1
0A953                           o = (1 - 1) * $18
0A953 12                        	.db A_ + o
0A954                           	note A_, 1
0A954                           o = (1 - 1) * $18
0A954 12                        	.db A_ + o
0A955                           	note A_, 2
0A955                           o = (2 - 1) * $18
0A955 2A                        	.db A_ + o
0A956                           	note A_, 2
0A956                           o = (2 - 1) * $18
0A956 2A                        	.db A_ + o
0A957                           	note G#, 2
0A957                           o = (2 - 1) * $18
0A957 28                        	.db G# + o
0A958                           	note G#, 2
0A958                           o = (2 - 1) * $18
0A958 28                        	.db G# + o
0A959                           	note G#, 2
0A959                           o = (2 - 1) * $18
0A959 28                        	.db G# + o
0A95A                           	note G#, 2
0A95A                           o = (2 - 1) * $18
0A95A 28                        	.db G# + o
0A95B                           	note F#, 2
0A95B                           o = (2 - 1) * $18
0A95B 24                        	.db F# + o
0A95C                           	note F#, 2
0A95C                           o = (2 - 1) * $18
0A95C 24                        	.db F# + o
0A95D                           	note F#, 2
0A95D                           o = (2 - 1) * $18
0A95D 24                        	.db F# + o
0A95E                           	note F#, 2
0A95E                           o = (2 - 1) * $18
0A95E 24                        	.db F# + o
0A95F                           	note E_, 2
0A95F                           o = (2 - 1) * $18
0A95F 20                        	.db E_ + o
0A960                           	note E_, 2
0A960                           o = (2 - 1) * $18
0A960 20                        	.db E_ + o
0A961                           	note B_, 1
0A961                           o = (1 - 1) * $18
0A961 16                        	.db B_ + o
0A962                           	note B_, 1
0A962                           o = (1 - 1) * $18
0A962 16                        	.db B_ + o
0A963                           	note A_, 1
0A963                           o = (1 - 1) * $18
0A963 12                        	.db A_ + o
0A964                           	note A_, 1
0A964                           o = (1 - 1) * $18
0A964 12                        	.db A_ + o
0A965                           	note A_, 1
0A965                           o = (1 - 1) * $18
0A965 12                        	.db A_ + o
0A966                           	note A_, 1
0A966                           o = (1 - 1) * $18
0A966 12                        	.db A_ + o
0A967                           	note G#, 1
0A967                           o = (1 - 1) * $18
0A967 10                        	.db G# + o
0A968                           	note G#, 1
0A968                           o = (1 - 1) * $18
0A968 10                        	.db G# + o
0A969                           	note G#, 1
0A969                           o = (1 - 1) * $18
0A969 10                        	.db G# + o
0A96A                           	note G#, 1
0A96A                           o = (1 - 1) * $18
0A96A 10                        	.db G# + o
0A96B                           
0A96B                           MusDTitle9_Noise:
0A96B                           	note_type 1, 8
0A96B                           i = (1 - 1) << 4
0A96B 88                        	.db $80 + i + 8
0A96C                           	drum_note P_Crash
0A96C 04                        	.db P_Crash * 2
0A96D                           	drum_note P_Snare
0A96D 0E                        	.db P_Snare * 2
0A96E                           	note_type 1, 4
0A96E                           i = (1 - 1) << 4
0A96E 84                        	.db $80 + i + 4
0A96F                           	drum_note P_Kick
0A96F 10                        	.db P_Kick * 2
0A970                           	drum_note P_Kick
0A970 10                        	.db P_Kick * 2
0A971                           	note_type 1, 8
0A971                           i = (1 - 1) << 4
0A971 88                        	.db $80 + i + 8
0A972                           	drum_note P_Snare
0A972 0E                        	.db P_Snare * 2
0A973                           	drum_note P_Kick
0A973 10                        	.db P_Kick * 2
0A974                           	drum_note P_Snare
0A974 0E                        	.db P_Snare * 2
0A975                           	note_type 1, 4
0A975                           i = (1 - 1) << 4
0A975 84                        	.db $80 + i + 4
0A976                           	drum_note P_Kick
0A976 10                        	.db P_Kick * 2
0A977                           	drum_note P_Kick
0A977 10                        	.db P_Kick * 2
0A978                           	note_type 1, 8
0A978                           i = (1 - 1) << 4
0A978 88                        	.db $80 + i + 8
0A979                           	drum_note P_Snare
0A979 0E                        	.db P_Snare * 2
0A97A                           	drum_note P_Kick
0A97A 10                        	.db P_Kick * 2
0A97B                           	drum_note P_Snare
0A97B 0E                        	.db P_Snare * 2
0A97C                           	note_type 1, 4
0A97C                           i = (1 - 1) << 4
0A97C 84                        	.db $80 + i + 4
0A97D                           	drum_note P_Kick
0A97D 10                        	.db P_Kick * 2
0A97E                           	drum_note P_Kick
0A97E 10                        	.db P_Kick * 2
0A97F                           	note_type 1, 8
0A97F                           i = (1 - 1) << 4
0A97F 88                        	.db $80 + i + 8
0A980                           	drum_note P_Snare
0A980 0E                        	.db P_Snare * 2
0A981                           	drum_note P_Kick
0A981 10                        	.db P_Kick * 2
0A982                           	drum_note P_Snare
0A982 0E                        	.db P_Snare * 2
0A983                           	note_type 1, 4
0A983                           i = (1 - 1) << 4
0A983 84                        	.db $80 + i + 4
0A984                           	drum_note P_Snare
0A984 0E                        	.db P_Snare * 2
0A985                           	note_type 1, 0
0A985                           i = (1 - 1) << 4
0A985 80                        	.db $80 + i + 0
0A986                           	drum_note P_Snare
0A986 0E                        	.db P_Snare * 2
0A987                           	drum_note P_Snare
0A987 0E                        	.db P_Snare * 2
0A988                           	note_type 1, 4
0A988                           i = (1 - 1) << 4
0A988 84                        	.db $80 + i + 4
0A989                           	drum_note P_Snare
0A989 0E                        	.db P_Snare * 2
0A98A                           	drum_note P_Snare
0A98A 0E                        	.db P_Snare * 2
0A98B                           	note_type 1, 8
0A98B                           i = (1 - 1) << 4
0A98B 88                        	.db $80 + i + 8
0A98C                           	drum_note P_Crash
0A98C 04                        	.db P_Crash * 2
0A98D                           	drum_note P_Snare
0A98D 0E                        	.db P_Snare * 2
0A98E                           	note_type 1, 4
0A98E                           i = (1 - 1) << 4
0A98E 84                        	.db $80 + i + 4
0A98F                           	drum_note P_Kick
0A98F 10                        	.db P_Kick * 2
0A990                           	drum_note P_Kick
0A990 10                        	.db P_Kick * 2
0A991                           	note_type 1, 8
0A991                           i = (1 - 1) << 4
0A991 88                        	.db $80 + i + 8
0A992                           	drum_note P_Snare
0A992 0E                        	.db P_Snare * 2
0A993                           	drum_note P_Kick
0A993 10                        	.db P_Kick * 2
0A994                           	drum_note P_Snare
0A994 0E                        	.db P_Snare * 2
0A995                           	note_type 1, 4
0A995                           i = (1 - 1) << 4
0A995 84                        	.db $80 + i + 4
0A996                           	drum_note P_Kick
0A996 10                        	.db P_Kick * 2
0A997                           	drum_note P_Kick
0A997 10                        	.db P_Kick * 2
0A998                           	drum_note P_Snare
0A998 0E                        	.db P_Snare * 2
0A999                           	drum_note P_Kick
0A999 10                        	.db P_Kick * 2
0A99A                           
0A99A                           MusDTitle9_DPCM:
0A99A                           	note_type 1, 4
0A99A                           i = (1 - 1) << 4
0A99A 84                        	.db $80 + i + 4
0A99B                           	smp_note Maj_A2
0A99B 42                        	.db Maj_A2 * 2
0A99C                           	smp_note Maj_A2
0A99C 42                        	.db Maj_A2 * 2
0A99D                           	smp_note Maj_A2
0A99D 42                        	.db Maj_A2 * 2
0A99E                           	smp_note Maj_A2
0A99E 42                        	.db Maj_A2 * 2
0A99F                           	smp_note Maj_A2
0A99F 42                        	.db Maj_A2 * 2
0A9A0                           	smp_note Maj_A2
0A9A0 42                        	.db Maj_A2 * 2
0A9A1                           	smp_note Maj_A2
0A9A1 42                        	.db Maj_A2 * 2
0A9A2                           	smp_note Maj_A2
0A9A2 42                        	.db Maj_A2 * 2
0A9A3                           	smp_note Maj_E2
0A9A3 38                        	.db Maj_E2 * 2
0A9A4                           	smp_note Maj_E2
0A9A4 38                        	.db Maj_E2 * 2
0A9A5                           	smp_note Maj_E2
0A9A5 38                        	.db Maj_E2 * 2
0A9A6                           	smp_note Maj_E2
0A9A6 38                        	.db Maj_E2 * 2
0A9A7                           	smp_note Maj_E2
0A9A7 38                        	.db Maj_E2 * 2
0A9A8                           	smp_note Maj_E2
0A9A8 38                        	.db Maj_E2 * 2
0A9A9                           	smp_note Maj_E2
0A9A9 38                        	.db Maj_E2 * 2
0A9AA                           	smp_note Maj_E2
0A9AA 38                        	.db Maj_E2 * 2
0A9AB                           	sound_loop
0A9AB 00                        	.db $00
0A9AC                           .include "src/sound/music/title-10.asm"0A9AC                           MusDTitle10:
0A9AC                           MusDTitle10_SQ2:
0A9AC                           	; ah
0A9AC                           	note_type 3, 10
0A9AC                           i = (3 - 1) << 4
0A9AC AA                        	.db $80 + i + 10
0A9AD                           	note E_, 3
0A9AD                           o = (3 - 1) * $18
0A9AD 38                        	.db E_ + o
0A9AE                           	note E_, 3
0A9AE                           o = (3 - 1) * $18
0A9AE 38                        	.db E_ + o
0A9AF                           	note_type 3, 4
0A9AF                           i = (3 - 1) << 4
0A9AF A4                        	.db $80 + i + 4
0A9B0                           	note D#, 3
0A9B0                           o = (3 - 1) * $18
0A9B0 36                        	.db D# + o
0A9B1                           	note_type 3, 9
0A9B1                           i = (3 - 1) << 4
0A9B1 A9                        	.db $80 + i + 9
0A9B2                           	note E_, 3
0A9B2                           o = (3 - 1) * $18
0A9B2 38                        	.db E_ + o
0A9B3                           	note_type 3, 10
0A9B3                           i = (3 - 1) << 4
0A9B3 AA                        	.db $80 + i + 10
0A9B4                           	note E_, 3
0A9B4                           o = (3 - 1) * $18
0A9B4 38                        	.db E_ + o
0A9B5                           	note_type 3, 8
0A9B5                           i = (3 - 1) << 4
0A9B5 A8                        	.db $80 + i + 8
0A9B6                           	note D#, 3
0A9B6                           o = (3 - 1) * $18
0A9B6 36                        	.db D# + o
0A9B7                           	note_type 3, 11
0A9B7                           i = (3 - 1) << 4
0A9B7 AB                        	.db $80 + i + 11
0A9B8                           	rest
0A9B8 7E                        	.db $7E
0A9B9                           	; Come
0A9B9                           	note_type 4, 10
0A9B9                           i = (4 - 1) << 4
0A9B9 BA                        	.db $80 + i + 10
0A9BA                           	note C#, 4
0A9BA                           o = (4 - 1) * $18
0A9BA 4A                        	.db C# + o
0A9BB                           	; with
0A9BB                           	note_type 2, 0
0A9BB                           i = (2 - 1) << 4
0A9BB 90                        	.db $80 + i + 0
0A9BC                           	note D_, 4
0A9BC                           o = (4 - 1) * $18
0A9BC 4C                        	.db D_ + o
0A9BD                           	note D#, 4
0A9BD                           o = (4 - 1) * $18
0A9BD 4E                        	.db D# + o
0A9BE                           	note_type 2, 8
0A9BE                           i = (2 - 1) << 4
0A9BE 98                        	.db $80 + i + 8
0A9BF                           	note E_, 4
0A9BF                           o = (4 - 1) * $18
0A9BF 50                        	.db E_ + o
0A9C0                           	note_type 2, 4
0A9C0                           i = (2 - 1) << 4
0A9C0 94                        	.db $80 + i + 4
0A9C1                           	rest
0A9C1 7E                        	.db $7E
0A9C2                           	; I-
0A9C2                           	note_type 2, 9
0A9C2                           i = (2 - 1) << 4
0A9C2 99                        	.db $80 + i + 9
0A9C3                           	note D#, 4
0A9C3                           o = (4 - 1) * $18
0A9C3 4E                        	.db D# + o
0A9C4                           	note_type 2, 4
0A9C4                           i = (2 - 1) << 4
0A9C4 94                        	.db $80 + i + 4
0A9C5                           	rest
0A9C5 7E                        	.db $7E
0A9C6                           	; -ggy
0A9C6                           	note_type 2, 10
0A9C6                           i = (2 - 1) << 4
0A9C6 9A                        	.db $80 + i + 10
0A9C7                           	note B_, 3
0A9C7                           o = (3 - 1) * $18
0A9C7 46                        	.db B_ + o
0A9C8                           	; and
0A9C8                           	note_type 3, 9
0A9C8                           i = (3 - 1) << 4
0A9C8 A9                        	.db $80 + i + 9
0A9C9                           	note A_, 3
0A9C9                           o = (3 - 1) * $18
0A9C9 42                        	.db A_ + o
0A9CA                           	note_type 6, 4
0A9CA                           i = (6 - 1) << 4
0A9CA D4                        	.db $80 + i + 4
0A9CB                           	note A_, 3
0A9CB                           o = (3 - 1) * $18
0A9CB 42                        	.db A_ + o
0A9CC                           	; his
0A9CC                           	note_type 2, 9
0A9CC                           i = (2 - 1) << 4
0A9CC 99                        	.db $80 + i + 9
0A9CD                           	note F#, 3
0A9CD                           o = (3 - 1) * $18
0A9CD 3C                        	.db F# + o
0A9CE                           	note_type 2, 4
0A9CE                           i = (2 - 1) << 4
0A9CE 94                        	.db $80 + i + 4
0A9CF                           	rest
0A9CF 7E                        	.db $7E
0A9D0                           	; friends;
0A9D0                           	note_type 4, 9
0A9D0                           i = (4 - 1) << 4
0A9D0 B9                        	.db $80 + i + 9
0A9D1                           	note G#, 3
0A9D1                           o = (3 - 1) * $18
0A9D1 40                        	.db G# + o
0A9D2                           	note_type 6, 4
0A9D2                           i = (6 - 1) << 4
0A9D2 D4                        	.db $80 + i + 4
0A9D3                           	note G#, 3
0A9D3                           o = (3 - 1) * $18
0A9D3 40                        	.db G# + o
0A9D4                           	note_type 2, 8
0A9D4                           i = (2 - 1) << 4
0A9D4 98                        	.db $80 + i + 8
0A9D5                           	rest
0A9D5 7E                        	.db $7E
0A9D6                           	note_type 2, 5
0A9D6                           i = (2 - 1) << 4
0A9D6 95                        	.db $80 + i + 5
0A9D7                           	rest
0A9D7 7E                        	.db $7E
0A9D8                           	note_type 2, 1
0A9D8                           i = (2 - 1) << 4
0A9D8 91                        	.db $80 + i + 1
0A9D9                           	rest
0A9D9 7E                        	.db $7E
0A9DA                           	; you'll
0A9DA                           	note E_, 4
0A9DA                           o = (4 - 1) * $18
0A9DA 50                        	.db E_ + o
0A9DB                           	note_type 4, 10
0A9DB                           i = (4 - 1) << 4
0A9DB BA                        	.db $80 + i + 10
0A9DC                           	note E_, 4
0A9DC                           o = (4 - 1) * $18
0A9DC 50                        	.db E_ + o
0A9DD                           	; be
0A9DD                           	note_type 2, 10
0A9DD                           i = (2 - 1) << 4
0A9DD 9A                        	.db $80 + i + 10
0A9DE                           	note C#, 4
0A9DE                           o = (4 - 1) * $18
0A9DE 4A                        	.db C# + o
0A9DF                           	; faw-
0A9DF                           	note_type 3, 10
0A9DF                           i = (3 - 1) << 4
0A9DF AA                        	.db $80 + i + 10
0A9E0                           	note B_, 3
0A9E0                           o = (3 - 1) * $18
0A9E0 46                        	.db B_ + o
0A9E1                           	; -ning
0A9E1                           	note_type 2, 9
0A9E1                           i = (2 - 1) << 4
0A9E1 99                        	.db $80 + i + 9
0A9E2                           	note G#, 3
0A9E2                           o = (3 - 1) * $18
0A9E2 40                        	.db G# + o
0A9E3                           	; un-
0A9E3                           	note_type 3, 0
0A9E3                           i = (3 - 1) << 4
0A9E3 A0                        	.db $80 + i + 0
0A9E4                           	note G#, 3
0A9E4                           o = (3 - 1) * $18
0A9E4 40                        	.db G# + o
0A9E5                           	note_type 6, 1
0A9E5                           i = (6 - 1) << 4
0A9E5 D1                        	.db $80 + i + 1
0A9E6                           	note G#, 3
0A9E6                           o = (3 - 1) * $18
0A9E6 40                        	.db G# + o
0A9E7                           	rest
0A9E7 7E                        	.db $7E
0A9E8                           	; -til
0A9E8                           	note_type 2, 5
0A9E8                           i = (2 - 1) << 4
0A9E8 95                        	.db $80 + i + 5
0A9E9                           	note F#, 3
0A9E9                           o = (3 - 1) * $18
0A9E9 3C                        	.db F# + o
0A9EA                           	note_type 2, 0
0A9EA                           i = (2 - 1) << 4
0A9EA 90                        	.db $80 + i + 0
0A9EB                           	rest
0A9EB 7E                        	.db $7E
0A9EC                           	; the
0A9EC                           	note_type 3, 8
0A9EC                           i = (3 - 1) << 4
0A9EC A8                        	.db $80 + i + 8
0A9ED                           	note A_, 3
0A9ED                           o = (3 - 1) * $18
0A9ED 42                        	.db A_ + o
0A9EE                           	; ve-
0A9EE                           	note_type 4, 8
0A9EE                           i = (4 - 1) << 4
0A9EE B8                        	.db $80 + i + 8
0A9EF                           	note G#, 3
0A9EF                           o = (3 - 1) * $18
0A9EF 40                        	.db G# + o
0A9F0                           	; -ry
0A9F0                           	note_type 2, 8
0A9F0                           i = (2 - 1) << 4
0A9F0 98                        	.db $80 + i + 8
0A9F1                           	note F#, 3
0A9F1                           o = (3 - 1) * $18
0A9F1 3C                        	.db F# + o
0A9F2                           	; end.
0A9F2                           	note_type 4, 9
0A9F2                           i = (4 - 1) << 4
0A9F2 B9                        	.db $80 + i + 9
0A9F3                           	note E_, 3
0A9F3                           o = (3 - 1) * $18
0A9F3 38                        	.db E_ + o
0A9F4                           	note_type 6, 4
0A9F4                           i = (6 - 1) << 4
0A9F4 D4                        	.db $80 + i + 4
0A9F5                           	note E_, 3
0A9F5                           o = (3 - 1) * $18
0A9F5 38                        	.db E_ + o
0A9F6                           	note_type 6, 10
0A9F6                           i = (6 - 1) << 4
0A9F6 DA                        	.db $80 + i + 10
0A9F7                           	rest
0A9F7 7E                        	.db $7E
0A9F8                           	sound_ret
0A9F8 00                        	.db $00
0A9F9                           
0A9F9                           MusDTitle10_SQ1:
0A9F9                           	; get
0A9F9                           	toggle_sweep
0A9F9 00                        	.db $00
0A9FA                           	note_type 1, 1
0A9FA                           i = (1 - 1) << 4
0A9FA 81                        	.db $80 + i + 1
0A9FB                           	note A#, 3
0A9FB                           o = (3 - 1) * $18
0A9FB 44                        	.db A# + o
0A9FC                           	toggle_sweep
0A9FC 00                        	.db $00
0A9FD                           	note_type 4, 5
0A9FD                           i = (4 - 1) << 4
0A9FD B5                        	.db $80 + i + 5
0A9FE                           	note A#, 3
0A9FE                           o = (3 - 1) * $18
0A9FE 44                        	.db A# + o
0A9FF                           	note_type 4, 1
0A9FF                           i = (4 - 1) << 4
0A9FF B1                        	.db $80 + i + 1
0AA00                           	rest
0AA00 7E                        	.db $7E
0AA01                           	; in-
0AA01                           	note_type 2, 4
0AA01                           i = (2 - 1) << 4
0AA01 94                        	.db $80 + i + 4
0AA02                           	note A#, 3
0AA02                           o = (3 - 1) * $18
0AA02 44                        	.db A# + o
0AA03                           	; -to
0AA03                           	toggle_sweep
0AA03 00                        	.db $00
0AA04                           	note_type 3, 1
0AA04                           i = (3 - 1) << 4
0AA04 A1                        	.db $80 + i + 1
0AA05                           	note C_, 6
0AA05                           o = (6 - 1) * $18
0AA05 78                        	.db C_ + o
0AA06                           	toggle_sweep
0AA06 00                        	.db $00
0AA07                           	note_type 2, 5
0AA07                           i = (2 - 1) << 4
0AA07 95                        	.db $80 + i + 5
0AA08                           	note B_, 3
0AA08                           o = (3 - 1) * $18
0AA08 46                        	.db B_ + o
0AA09                           	note_type 3, 1
0AA09                           i = (3 - 1) << 4
0AA09 A1                        	.db $80 + i + 1
0AA0A                           	rest
0AA0A 7E                        	.db $7E
0AA0B                           	; to-
0AA0B                           	toggle_sweep
0AA0B 00                        	.db $00
0AA0C                           	note C_, 6
0AA0C                           o = (6 - 1) * $18
0AA0C 78                        	.db C_ + o
0AA0D                           	toggle_sweep
0AA0D 00                        	.db $00
0AA0E                           	note_type 2, 5
0AA0E                           i = (2 - 1) << 4
0AA0E 95                        	.db $80 + i + 5
0AA0F                           	note C#, 4
0AA0F                           o = (4 - 1) * $18
0AA0F 4A                        	.db C# + o
0AA10                           	note_type 3, 1
0AA10                           i = (3 - 1) << 4
0AA10 A1                        	.db $80 + i + 1
0AA11                           	rest
0AA11 7E                        	.db $7E
0AA12                           	; -day.
0AA12                           	toggle_sweep
0AA12 00                        	.db $00
0AA13                           	note C_, 6
0AA13                           o = (6 - 1) * $18
0AA13 78                        	.db C_ + o
0AA14                           	toggle_sweep
0AA14 00                        	.db $00
0AA15                           	note_type 4, 12
0AA15                           i = (4 - 1) << 4
0AA15 BC                        	.db $80 + i + 12
0AA16                           	note B_, 3
0AA16                           o = (3 - 1) * $18
0AA16 46                        	.db B_ + o
0AA17                           	note_type 4, 1
0AA17                           i = (4 - 1) << 4
0AA17 B1                        	.db $80 + i + 1
0AA18                           	rest
0AA18 7E                        	.db $7E
0AA19                           	note_type 4, 0
0AA19                           i = (4 - 1) << 4
0AA19 B0                        	.db $80 + i + 0
0AA1A                           	rest
0AA1A 7E                        	.db $7E
0AA1B                           	; ah
0AA1B                           	note_type 3, 8
0AA1B                           i = (3 - 1) << 4
0AA1B A8                        	.db $80 + i + 8
0AA1C                           	note B_, 3
0AA1C                           o = (3 - 1) * $18
0AA1C 46                        	.db B_ + o
0AA1D                           	note_type 3, 10
0AA1D                           i = (3 - 1) << 4
0AA1D AA                        	.db $80 + i + 10
0AA1E                           	rest
0AA1E 7E                        	.db $7E
0AA1F                           	note_type 3, 5
0AA1F                           i = (3 - 1) << 4
0AA1F A5                        	.db $80 + i + 5
0AA20                           	rest
0AA20 7E                        	.db $7E
0AA21                           	note_type 3, 1
0AA21                           i = (3 - 1) << 4
0AA21 A1                        	.db $80 + i + 1
0AA22                           	rest
0AA22 7E                        	.db $7E
0AA23                           	; Come
0AA23                           	toggle_sweep
0AA23 00                        	.db $00
0AA24                           	note_type 1, 1
0AA24                           i = (1 - 1) << 4
0AA24 81                        	.db $80 + i + 1
0AA25                           	note E_, 3
0AA25                           o = (3 - 1) * $18
0AA25 38                        	.db E_ + o
0AA26                           	toggle_sweep
0AA26 00                        	.db $00
0AA27                           	note_type 4, 10
0AA27                           i = (4 - 1) << 4
0AA27 BA                        	.db $80 + i + 10
0AA28                           	note E_, 3
0AA28                           o = (3 - 1) * $18
0AA28 38                        	.db E_ + o
0AA29                           	; with
0AA29                           	note_type 2, 9
0AA29                           i = (2 - 1) << 4
0AA29 99                        	.db $80 + i + 9
0AA2A                           	note G#, 3
0AA2A                           o = (3 - 1) * $18
0AA2A 40                        	.db G# + o
0AA2B                           	toggle_sweep
0AA2B 00                        	.db $00
0AA2C                           	note_type 1, 4
0AA2C                           i = (1 - 1) << 4
0AA2C 84                        	.db $80 + i + 4
0AA2D                           	note C_, 6
0AA2D                           o = (6 - 1) * $18
0AA2D 78                        	.db C_ + o
0AA2E                           	toggle_sweep
0AA2E 00                        	.db $00
0AA2F                           	; I-
0AA2F                           	note_type 2, 9
0AA2F                           i = (2 - 1) << 4
0AA2F 99                        	.db $80 + i + 9
0AA30                           	note F#, 3
0AA30                           o = (3 - 1) * $18
0AA30 3C                        	.db F# + o
0AA31                           	note_type 2, 0
0AA31                           i = (2 - 1) << 4
0AA31 90                        	.db $80 + i + 0
0AA32                           	rest
0AA32 7E                        	.db $7E
0AA33                           	note_type 1, 1
0AA33                           i = (1 - 1) << 4
0AA33 81                        	.db $80 + i + 1
0AA34                           	rest
0AA34 7E                        	.db $7E
0AA35                           	; -ggy
0AA35                           	toggle_sweep
0AA35 00                        	.db $00
0AA36                           	note D#, 3
0AA36                           o = (3 - 1) * $18
0AA36 36                        	.db D# + o
0AA37                           	toggle_sweep
0AA37 00                        	.db $00
0AA38                           	note_type 2, 10
0AA38                           i = (2 - 1) << 4
0AA38 9A                        	.db $80 + i + 10
0AA39                           	note D#, 3
0AA39                           o = (3 - 1) * $18
0AA39 36                        	.db D# + o
0AA3A                           	; and
0AA3A                           	note_type 3, 9
0AA3A                           i = (3 - 1) << 4
0AA3A A9                        	.db $80 + i + 9
0AA3B                           	note C#, 3
0AA3B                           o = (3 - 1) * $18
0AA3B 32                        	.db C# + o
0AA3C                           	note_type 6, 4
0AA3C                           i = (6 - 1) << 4
0AA3C D4                        	.db $80 + i + 4
0AA3D                           	note C#, 3
0AA3D                           o = (3 - 1) * $18
0AA3D 32                        	.db C# + o
0AA3E                           	; his
0AA3E                           	note_type 2, 9
0AA3E                           i = (2 - 1) << 4
0AA3E 99                        	.db $80 + i + 9
0AA3F                           	note A_, 2
0AA3F                           o = (2 - 1) * $18
0AA3F 2A                        	.db A_ + o
0AA40                           	toggle_sweep
0AA40 00                        	.db $00
0AA41                           	note_type 1, 4
0AA41                           i = (1 - 1) << 4
0AA41 84                        	.db $80 + i + 4
0AA42                           	note C_, 6
0AA42                           o = (6 - 1) * $18
0AA42 78                        	.db C_ + o
0AA43                           	toggle_sweep
0AA43 00                        	.db $00
0AA44                           	; friends;
0AA44                           	note_type 4, 9
0AA44                           i = (4 - 1) << 4
0AA44 B9                        	.db $80 + i + 9
0AA45                           	note B_, 2
0AA45                           o = (2 - 1) * $18
0AA45 2E                        	.db B_ + o
0AA46                           	note_type 6, 4
0AA46                           i = (6 - 1) << 4
0AA46 D4                        	.db $80 + i + 4
0AA47                           	note B_, 2
0AA47                           o = (2 - 1) * $18
0AA47 2E                        	.db B_ + o
0AA48                           	toggle_sweep
0AA48 00                        	.db $00
0AA49                           	note_type 1, 8
0AA49                           i = (1 - 1) << 4
0AA49 88                        	.db $80 + i + 8
0AA4A                           	note C_, 6
0AA4A                           o = (6 - 1) * $18
0AA4A 78                        	.db C_ + o
0AA4B                           	toggle_sweep
0AA4B 00                        	.db $00
0AA4C                           	note_type 2, 5
0AA4C                           i = (2 - 1) << 4
0AA4C 95                        	.db $80 + i + 5
0AA4D                           	rest
0AA4D 7E                        	.db $7E
0AA4E                           	note_type 2, 1
0AA4E                           i = (2 - 1) << 4
0AA4E 91                        	.db $80 + i + 1
0AA4F                           	rest
0AA4F 7E                        	.db $7E
0AA50                           	; you'll
0AA50                           	note G#, 3
0AA50                           o = (3 - 1) * $18
0AA50 40                        	.db G# + o
0AA51                           	note_type 4, 10
0AA51                           i = (4 - 1) << 4
0AA51 BA                        	.db $80 + i + 10
0AA52                           	note G#, 3
0AA52                           o = (3 - 1) * $18
0AA52 40                        	.db G# + o
0AA53                           	; be
0AA53                           	note_type 2, 10
0AA53                           i = (2 - 1) << 4
0AA53 9A                        	.db $80 + i + 10
0AA54                           	note E_, 3
0AA54                           o = (3 - 1) * $18
0AA54 38                        	.db E_ + o
0AA55                           	; faw-
0AA55                           	note_type 3, 10
0AA55                           i = (3 - 1) << 4
0AA55 AA                        	.db $80 + i + 10
0AA56                           	note D#, 3
0AA56                           o = (3 - 1) * $18
0AA56 36                        	.db D# + o
0AA57                           	; -ning
0AA57                           	note_type 2, 9
0AA57                           i = (2 - 1) << 4
0AA57 99                        	.db $80 + i + 9
0AA58                           	note B_, 2
0AA58                           o = (2 - 1) * $18
0AA58 2E                        	.db B_ + o
0AA59                           	; un-
0AA59                           	note_type 3, 0
0AA59                           i = (3 - 1) << 4
0AA59 A0                        	.db $80 + i + 0
0AA5A                           	note B_, 2
0AA5A                           o = (2 - 1) * $18
0AA5A 2E                        	.db B_ + o
0AA5B                           	note_type 6, 1
0AA5B                           i = (6 - 1) << 4
0AA5B D1                        	.db $80 + i + 1
0AA5C                           	note B_, 2
0AA5C                           o = (2 - 1) * $18
0AA5C 2E                        	.db B_ + o
0AA5D                           	; -til
0AA5D                           	toggle_sweep
0AA5D 00                        	.db $00
0AA5E                           	note_type 3, 1
0AA5E                           i = (3 - 1) << 4
0AA5E A1                        	.db $80 + i + 1
0AA5F                           	note C_, 6
0AA5F                           o = (6 - 1) * $18
0AA5F 78                        	.db C_ + o
0AA60                           	toggle_sweep
0AA60 00                        	.db $00
0AA61                           	note_type 2, 5
0AA61                           i = (2 - 1) << 4
0AA61 95                        	.db $80 + i + 5
0AA62                           	note A_, 2
0AA62                           o = (2 - 1) * $18
0AA62 2A                        	.db A_ + o
0AA63                           	note_type 1, 1
0AA63                           i = (1 - 1) << 4
0AA63 81                        	.db $80 + i + 1
0AA64                           	rest
0AA64 7E                        	.db $7E
0AA65                           	; the
0AA65                           	toggle_sweep
0AA65 00                        	.db $00
0AA66                           	note C_, 6
0AA66                           o = (6 - 1) * $18
0AA66 78                        	.db C_ + o
0AA67                           	toggle_sweep
0AA67 00                        	.db $00
0AA68                           	note_type 3, 8
0AA68                           i = (3 - 1) << 4
0AA68 A8                        	.db $80 + i + 8
0AA69                           	note C#, 3
0AA69                           o = (3 - 1) * $18
0AA69 32                        	.db C# + o
0AA6A                           	; ve-
0AA6A                           	note_type 4, 8
0AA6A                           i = (4 - 1) << 4
0AA6A B8                        	.db $80 + i + 8
0AA6B                           	note B_, 2
0AA6B                           o = (2 - 1) * $18
0AA6B 2E                        	.db B_ + o
0AA6C                           	; -ry
0AA6C                           	note_type 2, 8
0AA6C                           i = (2 - 1) << 4
0AA6C 98                        	.db $80 + i + 8
0AA6D                           	note A_, 2
0AA6D                           o = (2 - 1) * $18
0AA6D 2A                        	.db A_ + o
0AA6E                           	; end.
0AA6E                           	note_type 4, 9
0AA6E                           i = (4 - 1) << 4
0AA6E B9                        	.db $80 + i + 9
0AA6F                           	note G#, 2
0AA6F                           o = (2 - 1) * $18
0AA6F 28                        	.db G# + o
0AA70                           	note_type 6, 4
0AA70                           i = (6 - 1) << 4
0AA70 D4                        	.db $80 + i + 4
0AA71                           	note G#, 2
0AA71                           o = (2 - 1) * $18
0AA71 28                        	.db G# + o
0AA72                           	note_type 6, 10
0AA72                           i = (6 - 1) << 4
0AA72 DA                        	.db $80 + i + 10
0AA73                           	rest
0AA73 7E                        	.db $7E
0AA74                           
0AA74                           MusDTitle10_Hill:
0AA74                           	note_type 1, 8
0AA74                           i = (1 - 1) << 4
0AA74 88                        	.db $80 + i + 8
0AA75                           	note F#, 1
0AA75                           o = (1 - 1) * $18
0AA75 0C                        	.db F# + o
0AA76                           	note F#, 1
0AA76                           o = (1 - 1) * $18
0AA76 0C                        	.db F# + o
0AA77                           	note F#, 1
0AA77                           o = (1 - 1) * $18
0AA77 0C                        	.db F# + o
0AA78                           	note F#, 1
0AA78                           o = (1 - 1) * $18
0AA78 0C                        	.db F# + o
0AA79                           	note B_, 1
0AA79                           o = (1 - 1) * $18
0AA79 16                        	.db B_ + o
0AA7A                           	note B_, 1
0AA7A                           o = (1 - 1) * $18
0AA7A 16                        	.db B_ + o
0AA7B                           	note B_, 1
0AA7B                           o = (1 - 1) * $18
0AA7B 16                        	.db B_ + o
0AA7C                           	note B_, 1
0AA7C                           o = (1 - 1) * $18
0AA7C 16                        	.db B_ + o
0AA7D                           	note B_, 2
0AA7D                           o = (2 - 1) * $18
0AA7D 2E                        	.db B_ + o
0AA7E                           	note_type 1, 11
0AA7E                           i = (1 - 1) << 4
0AA7E 8B                        	.db $80 + i + 11
0AA7F                           	rest
0AA7F 7E                        	.db $7E
0AA80                           	note_type 1, 8
0AA80                           i = (1 - 1) << 4
0AA80 88                        	.db $80 + i + 8
0AA81                           	note C#, 2
0AA81                           o = (2 - 1) * $18
0AA81 1A                        	.db C# + o
0AA82                           	note C#, 2
0AA82                           o = (2 - 1) * $18
0AA82 1A                        	.db C# + o
0AA83                           	note C#, 2
0AA83                           o = (2 - 1) * $18
0AA83 1A                        	.db C# + o
0AA84                           	note C#, 2
0AA84                           o = (2 - 1) * $18
0AA84 1A                        	.db C# + o
0AA85                           	note B_, 1
0AA85                           o = (1 - 1) * $18
0AA85 16                        	.db B_ + o
0AA86                           	note B_, 1
0AA86                           o = (1 - 1) * $18
0AA86 16                        	.db B_ + o
0AA87                           	note B_, 1
0AA87                           o = (1 - 1) * $18
0AA87 16                        	.db B_ + o
0AA88                           	note B_, 1
0AA88                           o = (1 - 1) * $18
0AA88 16                        	.db B_ + o
0AA89                           	note A_, 1
0AA89                           o = (1 - 1) * $18
0AA89 12                        	.db A_ + o
0AA8A                           	note A_, 1
0AA8A                           o = (1 - 1) * $18
0AA8A 12                        	.db A_ + o
0AA8B                           	note A_, 1
0AA8B                           o = (1 - 1) * $18
0AA8B 12                        	.db A_ + o
0AA8C                           	note A_, 1
0AA8C                           o = (1 - 1) * $18
0AA8C 12                        	.db A_ + o
0AA8D                           	note E_, 1
0AA8D                           o = (1 - 1) * $18
0AA8D 08                        	.db E_ + o
0AA8E                           	note E_, 1
0AA8E                           o = (1 - 1) * $18
0AA8E 08                        	.db E_ + o
0AA8F                           	note E_, 1
0AA8F                           o = (1 - 1) * $18
0AA8F 08                        	.db E_ + o
0AA90                           	note B_, 1
0AA90                           o = (1 - 1) * $18
0AA90 16                        	.db B_ + o
0AA91                           	note C#, 2
0AA91                           o = (2 - 1) * $18
0AA91 1A                        	.db C# + o
0AA92                           	note C#, 2
0AA92                           o = (2 - 1) * $18
0AA92 1A                        	.db C# + o
0AA93                           	note C#, 2
0AA93                           o = (2 - 1) * $18
0AA93 1A                        	.db C# + o
0AA94                           	note C#, 2
0AA94                           o = (2 - 1) * $18
0AA94 1A                        	.db C# + o
0AA95                           	note B_, 1
0AA95                           o = (1 - 1) * $18
0AA95 16                        	.db B_ + o
0AA96                           	note B_, 1
0AA96                           o = (1 - 1) * $18
0AA96 16                        	.db B_ + o
0AA97                           	note B_, 1
0AA97                           o = (1 - 1) * $18
0AA97 16                        	.db B_ + o
0AA98                           	note B_, 1
0AA98                           o = (1 - 1) * $18
0AA98 16                        	.db B_ + o
0AA99                           	note A_, 1
0AA99                           o = (1 - 1) * $18
0AA99 12                        	.db A_ + o
0AA9A                           	note A_, 1
0AA9A                           o = (1 - 1) * $18
0AA9A 12                        	.db A_ + o
0AA9B                           	note B_, 1
0AA9B                           o = (1 - 1) * $18
0AA9B 16                        	.db B_ + o
0AA9C                           	note B_, 1
0AA9C                           o = (1 - 1) * $18
0AA9C 16                        	.db B_ + o
0AA9D                           	note_type 8, 8
0AA9D                           i = (8 - 1) << 4
0AA9D F8                        	.db $80 + i + 8
0AA9E                           	note E_, 2
0AA9E                           o = (2 - 1) * $18
0AA9E 20                        	.db E_ + o
0AA9F                           	note E_, 2
0AA9F                           o = (2 - 1) * $18
0AA9F 20                        	.db E_ + o
0AAA0                           	note_type 8, 10
0AAA0                           i = (8 - 1) << 4
0AAA0 FA                        	.db $80 + i + 10
0AAA1                           	note E_, 2
0AAA1                           o = (2 - 1) * $18
0AAA1 20                        	.db E_ + o
0AAA2                           
0AAA2                           MusDTitle10_Noise:
0AAA2                           	note_type 1, 8
0AAA2                           i = (1 - 1) << 4
0AAA2 88                        	.db $80 + i + 8
0AAA3                           	drum_note P_Kick
0AAA3 10                        	.db P_Kick * 2
0AAA4                           	drum_note P_Snare
0AAA4 0E                        	.db P_Snare * 2
0AAA5                           	note_type 1, 4
0AAA5                           i = (1 - 1) << 4
0AAA5 84                        	.db $80 + i + 4
0AAA6                           	drum_note P_Kick
0AAA6 10                        	.db P_Kick * 2
0AAA7                           	drum_note P_Kick
0AAA7 10                        	.db P_Kick * 2
0AAA8                           	note_type 1, 8
0AAA8                           i = (1 - 1) << 4
0AAA8 88                        	.db $80 + i + 8
0AAA9                           	drum_note P_Snare
0AAA9 0E                        	.db P_Snare * 2
0AAAA                           	note_type 1, 4
0AAAA                           i = (1 - 1) << 4
0AAAA 84                        	.db $80 + i + 4
0AAAB                           	drum_note P_Snare
0AAAB 0E                        	.db P_Snare * 2
0AAAC                           	drum_note P_Kick
0AAAC 10                        	.db P_Kick * 2
0AAAD                           	drum_note P_Snare
0AAAD 0E                        	.db P_Snare * 2
0AAAE                           	drum_note P_Kick
0AAAE 10                        	.db P_Kick * 2
0AAAF                           	drum_note P_Snare
0AAAF 0E                        	.db P_Snare * 2
0AAB0                           	note_type 1, 0
0AAB0                           i = (1 - 1) << 4
0AAB0 80                        	.db $80 + i + 0
0AAB1                           	drum_note P_Snare
0AAB1 0E                        	.db P_Snare * 2
0AAB2                           	drum_note P_Snare
0AAB2 0E                        	.db P_Snare * 2
0AAB3                           	note_type 1, 4
0AAB3                           i = (1 - 1) << 4
0AAB3 84                        	.db $80 + i + 4
0AAB4                           	drum_note P_Snare
0AAB4 0E                        	.db P_Snare * 2
0AAB5                           	note_type 1, 0
0AAB5                           i = (1 - 1) << 4
0AAB5 80                        	.db $80 + i + 0
0AAB6                           	drum_note P_Snare
0AAB6 0E                        	.db P_Snare * 2
0AAB7                           	drum_note P_Snare
0AAB7 0E                        	.db P_Snare * 2
0AAB8                           	note_type 1, 8
0AAB8                           i = (1 - 1) << 4
0AAB8 88                        	.db $80 + i + 8
0AAB9                           	drum_note P_Kick
0AAB9 10                        	.db P_Kick * 2
0AABA                           	drum_note P_Kick
0AABA 10                        	.db P_Kick * 2
0AABB                           	note_type 1, 4
0AABB                           i = (1 - 1) << 4
0AABB 84                        	.db $80 + i + 4
0AABC                           	drum_note P_Kick
0AABC 10                        	.db P_Kick * 2
0AABD                           	note_type 1, 0
0AABD                           i = (1 - 1) << 4
0AABD 80                        	.db $80 + i + 0
0AABE                           	drum_note P_Snare
0AABE 0E                        	.db P_Snare * 2
0AABF                           	drum_note P_Snare
0AABF 0E                        	.db P_Snare * 2
0AAC0                           	note_type 1, 4
0AAC0                           i = (1 - 1) << 4
0AAC0 84                        	.db $80 + i + 4
0AAC1                           	drum_note P_Snare
0AAC1 0E                        	.db P_Snare * 2
0AAC2                           	note_type 1, 0
0AAC2                           i = (1 - 1) << 4
0AAC2 80                        	.db $80 + i + 0
0AAC3                           	drum_note P_Snare
0AAC3 0E                        	.db P_Snare * 2
0AAC4                           	drum_note P_Snare
0AAC4 0E                        	.db P_Snare * 2
0AAC5                           	note_type 1, 8
0AAC5                           i = (1 - 1) << 4
0AAC5 88                        	.db $80 + i + 8
0AAC6                           	drum_note P_Crash
0AAC6 04                        	.db P_Crash * 2
0AAC7                           	drum_note P_Snare
0AAC7 0E                        	.db P_Snare * 2
0AAC8                           	note_type 1, 4
0AAC8                           i = (1 - 1) << 4
0AAC8 84                        	.db $80 + i + 4
0AAC9                           	drum_note P_Kick
0AAC9 10                        	.db P_Kick * 2
0AACA                           	drum_note P_Kick
0AACA 10                        	.db P_Kick * 2
0AACB                           	note_type 1, 8
0AACB                           i = (1 - 1) << 4
0AACB 88                        	.db $80 + i + 8
0AACC                           	drum_note P_Snare
0AACC 0E                        	.db P_Snare * 2
0AACD                           	drum_note P_Kick
0AACD 10                        	.db P_Kick * 2
0AACE                           	drum_note P_Snare
0AACE 0E                        	.db P_Snare * 2
0AACF                           	note_type 1, 4
0AACF                           i = (1 - 1) << 4
0AACF 84                        	.db $80 + i + 4
0AAD0                           	drum_note P_Kick
0AAD0 10                        	.db P_Kick * 2
0AAD1                           	drum_note P_Kick
0AAD1 10                        	.db P_Kick * 2
0AAD2                           	note_type 1, 8
0AAD2                           i = (1 - 1) << 4
0AAD2 88                        	.db $80 + i + 8
0AAD3                           	drum_note P_Snare
0AAD3 0E                        	.db P_Snare * 2
0AAD4                           	drum_note P_Kick
0AAD4 10                        	.db P_Kick * 2
0AAD5                           	drum_note P_Snare
0AAD5 0E                        	.db P_Snare * 2
0AAD6                           	note_type 1, 4
0AAD6                           i = (1 - 1) << 4
0AAD6 84                        	.db $80 + i + 4
0AAD7                           	drum_note P_Kick
0AAD7 10                        	.db P_Kick * 2
0AAD8                           	drum_note P_Kick
0AAD8 10                        	.db P_Kick * 2
0AAD9                           	note_type 1, 8
0AAD9                           i = (1 - 1) << 4
0AAD9 88                        	.db $80 + i + 8
0AADA                           	drum_note P_Snare
0AADA 0E                        	.db P_Snare * 2
0AADB                           	drum_note P_Kick
0AADB 10                        	.db P_Kick * 2
0AADC                           	drum_note P_Snare
0AADC 0E                        	.db P_Snare * 2
0AADD                           	note_type 1, 4
0AADD                           i = (1 - 1) << 4
0AADD 84                        	.db $80 + i + 4
0AADE                           	drum_note P_Snare
0AADE 0E                        	.db P_Snare * 2
0AADF                           	note_type 1, 0
0AADF                           i = (1 - 1) << 4
0AADF 80                        	.db $80 + i + 0
0AAE0                           	drum_note P_Snare
0AAE0 0E                        	.db P_Snare * 2
0AAE1                           	drum_note P_Snare
0AAE1 0E                        	.db P_Snare * 2
0AAE2                           	note_type 1, 4
0AAE2                           i = (1 - 1) << 4
0AAE2 84                        	.db $80 + i + 4
0AAE3                           	drum_note P_Snare
0AAE3 0E                        	.db P_Snare * 2
0AAE4                           	drum_note P_Snare
0AAE4 0E                        	.db P_Snare * 2
0AAE5                           	note_type 1, 8
0AAE5                           i = (1 - 1) << 4
0AAE5 88                        	.db $80 + i + 8
0AAE6                           	drum_note P_Crash
0AAE6 04                        	.db P_Crash * 2
0AAE7                           	drum_note P_Snare
0AAE7 0E                        	.db P_Snare * 2
0AAE8                           	note_type 1, 4
0AAE8                           i = (1 - 1) << 4
0AAE8 84                        	.db $80 + i + 4
0AAE9                           	drum_note P_Kick
0AAE9 10                        	.db P_Kick * 2
0AAEA                           	drum_note P_Kick
0AAEA 10                        	.db P_Kick * 2
0AAEB                           	note_type 1, 8
0AAEB                           i = (1 - 1) << 4
0AAEB 88                        	.db $80 + i + 8
0AAEC                           	drum_note P_Snare
0AAEC 0E                        	.db P_Snare * 2
0AAED                           	drum_note P_Kick
0AAED 10                        	.db P_Kick * 2
0AAEE                           	drum_note P_Snare
0AAEE 0E                        	.db P_Snare * 2
0AAEF                           	note_type 1, 4
0AAEF                           i = (1 - 1) << 4
0AAEF 84                        	.db $80 + i + 4
0AAF0                           	drum_note P_Kick
0AAF0 10                        	.db P_Kick * 2
0AAF1                           	drum_note P_Kick
0AAF1 10                        	.db P_Kick * 2
0AAF2                           	drum_note P_Snare
0AAF2 0E                        	.db P_Snare * 2
0AAF3                           	drum_note P_Kick
0AAF3 10                        	.db P_Kick * 2
0AAF4                           	note_type 1, 8
0AAF4                           i = (1 - 1) << 4
0AAF4 88                        	.db $80 + i + 8
0AAF5                           	drum_note P_Kick
0AAF5 10                        	.db P_Kick * 2
0AAF6                           	drum_note P_Snare
0AAF6 0E                        	.db P_Snare * 2
0AAF7                           	note_type 1, 4
0AAF7                           i = (1 - 1) << 4
0AAF7 84                        	.db $80 + i + 4
0AAF8                           	drum_note P_Kick
0AAF8 10                        	.db P_Kick * 2
0AAF9                           	drum_note P_Kick
0AAF9 10                        	.db P_Kick * 2
0AAFA                           	note_type 1, 8
0AAFA                           i = (1 - 1) << 4
0AAFA 88                        	.db $80 + i + 8
0AAFB                           	drum_note P_Snare
0AAFB 0E                        	.db P_Snare * 2
0AAFC                           	note_type 1, 4
0AAFC                           i = (1 - 1) << 4
0AAFC 84                        	.db $80 + i + 4
0AAFD                           	drum_note P_Snare
0AAFD 0E                        	.db P_Snare * 2
0AAFE                           	drum_note P_Kick
0AAFE 10                        	.db P_Kick * 2
0AAFF                           	drum_note P_Snare
0AAFF 0E                        	.db P_Snare * 2
0AB00                           	drum_note P_Kick
0AB00 10                        	.db P_Kick * 2
0AB01                           	drum_note P_Snare
0AB01 0E                        	.db P_Snare * 2
0AB02                           	note_type 1, 0
0AB02                           i = (1 - 1) << 4
0AB02 80                        	.db $80 + i + 0
0AB03                           	drum_note P_Snare
0AB03 0E                        	.db P_Snare * 2
0AB04                           	drum_note P_Snare
0AB04 0E                        	.db P_Snare * 2
0AB05                           	note_type 1, 4
0AB05                           i = (1 - 1) << 4
0AB05 84                        	.db $80 + i + 4
0AB06                           	drum_note P_Snare
0AB06 0E                        	.db P_Snare * 2
0AB07                           	note_type 1, 0
0AB07                           i = (1 - 1) << 4
0AB07 80                        	.db $80 + i + 0
0AB08                           	drum_note P_Snare
0AB08 0E                        	.db P_Snare * 2
0AB09                           	drum_note P_Snare
0AB09 0E                        	.db P_Snare * 2
0AB0A                           
0AB0A                           MusDTitle10_DPCM:
0AB0A                           	note_type 1, 4
0AB0A                           i = (1 - 1) << 4
0AB0A 84                        	.db $80 + i + 4
0AB0B                           	smp_note Maj_Fs2
0AB0B 3C                        	.db Maj_Fs2 * 2
0AB0C                           	smp_note Maj_Fs2
0AB0C 3C                        	.db Maj_Fs2 * 2
0AB0D                           	smp_note Maj_Fs2
0AB0D 3C                        	.db Maj_Fs2 * 2
0AB0E                           	smp_note Maj_Fs2
0AB0E 3C                        	.db Maj_Fs2 * 2
0AB0F                           	smp_note Maj_Fs2
0AB0F 3C                        	.db Maj_Fs2 * 2
0AB10                           	smp_note Maj_Fs2
0AB10 3C                        	.db Maj_Fs2 * 2
0AB11                           	smp_note Maj_Fs2
0AB11 3C                        	.db Maj_Fs2 * 2
0AB12                           	smp_note Maj_Fs2
0AB12 3C                        	.db Maj_Fs2 * 2
0AB13                           	smp_note Maj_B2
0AB13 46                        	.db Maj_B2 * 2
0AB14                           	smp_note Maj_B2
0AB14 46                        	.db Maj_B2 * 2
0AB15                           	smp_note Maj_B2
0AB15 46                        	.db Maj_B2 * 2
0AB16                           	smp_note Maj_B2
0AB16 46                        	.db Maj_B2 * 2
0AB17                           	smp_note Maj_B2
0AB17 46                        	.db Maj_B2 * 2
0AB18                           	smp_note Maj_B2
0AB18 46                        	.db Maj_B2 * 2
0AB19                           	smp_note Maj_B2
0AB19 46                        	.db Maj_B2 * 2
0AB1A                           	smp_note Maj_B2
0AB1A 46                        	.db Maj_B2 * 2
0AB1B                           	note_type 1, 8
0AB1B                           i = (1 - 1) << 4
0AB1B 88                        	.db $80 + i + 8
0AB1C                           	smp_note Maj_B2
0AB1C 46                        	.db Maj_B2 * 2
0AB1D                           	note_type 1, 11
0AB1D                           i = (1 - 1) << 4
0AB1D 8B                        	.db $80 + i + 11
0AB1E                           	rest
0AB1E 7E                        	.db $7E
0AB1F                           	note_type 1, 8
0AB1F                           i = (1 - 1) << 4
0AB1F 88                        	.db $80 + i + 8
0AB20                           	smp_note Maj_E2
0AB20 38                        	.db Maj_E2 * 2
0AB21                           	smp_note Maj_E2
0AB21 38                        	.db Maj_E2 * 2
0AB22                           	smp_note Maj_E2
0AB22 38                        	.db Maj_E2 * 2
0AB23                           	smp_note Maj_E2
0AB23 38                        	.db Maj_E2 * 2
0AB24                           	smp_note Maj_B2
0AB24 46                        	.db Maj_B2 * 2
0AB25                           	smp_note Maj_B2
0AB25 46                        	.db Maj_B2 * 2
0AB26                           	smp_note Maj_B2
0AB26 46                        	.db Maj_B2 * 2
0AB27                           	smp_note Maj_B2
0AB27 46                        	.db Maj_B2 * 2
0AB28                           	smp_note Maj_A2
0AB28 42                        	.db Maj_A2 * 2
0AB29                           	smp_note Maj_A2
0AB29 42                        	.db Maj_A2 * 2
0AB2A                           	smp_note Maj_A2
0AB2A 42                        	.db Maj_A2 * 2
0AB2B                           	smp_note Maj_A2
0AB2B 42                        	.db Maj_A2 * 2
0AB2C                           	smp_note Maj_E2
0AB2C 38                        	.db Maj_E2 * 2
0AB2D                           	smp_note Maj_E2
0AB2D 38                        	.db Maj_E2 * 2
0AB2E                           	smp_note Maj_E2
0AB2E 38                        	.db Maj_E2 * 2
0AB2F                           	smp_note Maj_E2
0AB2F 38                        	.db Maj_E2 * 2
0AB30                           	smp_note Maj_E2
0AB30 38                        	.db Maj_E2 * 2
0AB31                           	smp_note Maj_E2
0AB31 38                        	.db Maj_E2 * 2
0AB32                           	smp_note Maj_E2
0AB32 38                        	.db Maj_E2 * 2
0AB33                           	smp_note Maj_E2
0AB33 38                        	.db Maj_E2 * 2
0AB34                           	smp_note Maj_B2
0AB34 46                        	.db Maj_B2 * 2
0AB35                           	smp_note Maj_B2
0AB35 46                        	.db Maj_B2 * 2
0AB36                           	smp_note Maj_B2
0AB36 46                        	.db Maj_B2 * 2
0AB37                           	smp_note Maj_B2
0AB37 46                        	.db Maj_B2 * 2
0AB38                           	smp_note Maj_A2
0AB38 42                        	.db Maj_A2 * 2
0AB39                           	smp_note Maj_A2
0AB39 42                        	.db Maj_A2 * 2
0AB3A                           	smp_note Maj_B2
0AB3A 46                        	.db Maj_B2 * 2
0AB3B                           	smp_note Maj_B2
0AB3B 46                        	.db Maj_B2 * 2
0AB3C                           	smp_note Maj_E2
0AB3C 38                        	.db Maj_E2 * 2
0AB3D                           	smp_note Maj_E2
0AB3D 38                        	.db Maj_E2 * 2
0AB3E                           	smp_note Maj_E2
0AB3E 38                        	.db Maj_E2 * 2
0AB3F                           	smp_note Maj_E2
0AB3F 38                        	.db Maj_E2 * 2
0AB40 00 00 00 00 00 00 00 00.. .pad $c000, $00
0C000                           
0C000 00 00 00 00 00 00 00 00.. 	.dsb $2000, $00
0E000                           
0E000                           IFNDEF NSF_FILE
0E000                           	; bank 06 - text engine
0E000                           	.base $8000
08000                           	.include "src/gfx.asm"
08000                           .include "src/engine/gfx.asm"08000                           _InitPals:
08000                           ; clear palette RAM
08000 A9 0F                     	LDA #15
08002 AA                        	TAX
08003 95 E0                     	STA zPals, X
08005                           @Loop:
08005 CA                        	DEX
08006 95 E0                     	STA zPals, X
08008 D0 FB                     	BNE @Loop
0800A                           @Quit:
0800A 60                        	RTS
0800B                           
0800B                           _InitNameTable:
0800B                           ; clear a nametable including attributes
0800B                           	; set up address
0800B A9 20                     	LDA #>NAMETABLE_MAP_0
0800D 8D 06 20                  	STA PPUADDR
08010 A9 00                     	LDA #<NAMETABLE_MAP_0
08012 8D 06 20                  	STA PPUADDR ; happens to be the empty tile we need
08015 A0 04                     	LDY #>NAMETABLE_AREA
08017 A2 00                     	LDX #<NAMETABLE_AREA
08019                           	; write for $400 bytes
08019                           @Loop:
08019 CA                        	DEX
0801A 8D 07 20                  	STA PPUDATA
0801D D0 FA                     	BNE @Loop
0801F 88                        	DEY
08020 10 F7                     	BPL @Loop
08022 60                        	RTS
08023                           
08023                           GetNamePointer:
08023                           	; turn cObjectType into index Y
08023 AD 0B 5C                  	LDA cObjectType
08026 E9 01                     	SBC #1
08028 85 26                     	STA zBackupA
0802A A8                        	TAY
0802B B9 4F 80                  	LDA NameLengths, Y
0802E 8D 13 5C                  	STA cNameLength
08031 C0 03                     	CPY #EPISODE_NAMES - 1
08033 F0 19                     	BEQ @Quit
08035 98                        	TYA
08036 4A                        	LSR A
08037 65 26                     	ADC zBackupA
08039 A8                        	TAY
0803A                           	; get three-byte pointer
0803A                           	; high
0803A C8                        	INY
0803B C8                        	INY
0803C B9 7C E2                  	LDA NamesPointers, Y
0803F 85 3F                     	STA zAuxAddresses + 7
08041 20 CC E0                  	JSR GetWindowIndex
08044                           	; low
08044 88                        	DEY
08045 B9 7C E2                  	LDA NamesPointers, Y
08048 85 3E                     	STA zAuxAddresses + 6
0804A                           	; bank
0804A 88                        	DEY
0804B B9 7C E2                  	LDA NamesPointers, Y
0804E                           @Quit:
0804E 60                        	RTS
0804F                           
0804F                           NameLengths:
0804F 0D                        	.db ITEM_NAME_LENGTH
08050 0F                        	.db CHR_FULL_NAME_LENGTH
08051 06                        	.db CHR_NAME_LENGTH
08052 0F                        	.db LOC_NAME_LENGTH
08053 1C                        	.db TEXT_BOX_WIDTH
08054                           
08054                           CopyCurrentIndex:
08054                           	; get current index number
08054                           	; c = 1 at this point
08054 AD 0F 5C                  	LDA cCurrentIndex
08057 E9 01                     	SBC #1
08059 20 8B E2                  	JSR GetNthString
0805C                           
0805C                           	; copy cNameLength bytes to string buffer
0805C AC 13 5C                  	LDY cNameLength
0805F C8                        	INY
08060 A9 00                     	LDA #<iStringBuffer
08062 85 3A                     	STA zAuxAddresses + 2
08064 8D 10 5C                  	STA cCurrentRAMAddress
08067 A9 06                     	LDA #>iStringBuffer
08069 85 3B                     	STA zAuxAddresses + 3
0806B 8D 11 5C                  	STA cCurrentRAMAddress + 1
0806E 4C DA E0                  	JMP CopyBytes
08071                           
08071                           GetEpisodeName:
08071 A9 87                     	LDA #PRG_Names0
08073 85 63                     	STA zTextBank
08075 AD 0F 5C                  	LDA cCurrentIndex
08078 0A                        	ASL A
08079 A8                        	TAY
0807A B9 99 80                  	LDA EpisodeNamePointers, Y
0807D 85 64                     	STA zCurrentTextAddress
0807F C8                        	INY
08080 B9 99 80                  	LDA EpisodeNamePointers, Y
08083 85 65                     	STA zCurrentTextAddress + 1
08085 A0 00                     	LDY #0
08087                           @Loop:
08087 20 1E E2                  	JSR GetTextByte
0808A C9 00                     	CMP #text_end_cmd
0808C F0 0A                     	BEQ @Quit
0808E C9 85                     	CMP #text_done_cmd
08090 F0 06                     	BEQ @Quit
08092 99 00 06                  	STA iStringBuffer, Y
08095 C8                        	INY
08096 90 EF                     	BCC @Loop
08098                           @Quit:
08098 60                        	RTS
08099                           
08099                           EpisodeNamePointers:
08099 A2 A1                     	.dw VR_101
0809B AC A1                     	.dw VR_102
0809D BD A1                     	.dw VR_103
0809F C7 A1                     	.dw VR_104
080A1 D4 A1                     	.dw VR_105
080A3 E1 A1                     	.dw VR_106
080A5 F7 A1                     	.dw VR_107
080A7 00 A2                     	.dw VR_108
080A9 0B A2                     	.dw VR_109
080AB 2A A2                     	.dw VR_110
080AD 37 A2                     	.dw VR_111
080AF 49 A2                     	.dw VR_112
080B1 5C A2                     	.dw VR_113
080B3 76 A2                     	.dw VR_114
080B5 85 A2                     	.dw VR_115
080B7 90 A2                     	.dw VR_116
080B9 9A A2                     	.dw VR_117
080BB A3 A2                     	.dw VR_118
080BD B1 A2                     	.dw VR_119
080BF C4 A2                     	.dw VR_120
080C1 DF A2                     	.dw VR_121
080C3 EC A2                     	.dw VR_122
080C5 FC A2                     	.dw VR_123
080C7 0D A3                     	.dw VR_124
080C9 1B A3                     	.dw VR_125
080CB 25 A3                     	.dw VR_126
080CD 30 A3                     	.dw VR_127
080CF 00 00 00 00 00 00 00 00.. 	.pad $a000, $00
0A000                           
0A000                           	; bank 07 - names
0A000                           	.base $a000
0A000                           	.include "src/names-0.asm"
0A000                           .include "src/text/item-names.asm"
0A000                           ItemNames:
0A000 3F 80                     	.db "?", $80
0A002 64 65 62 69 74 20 63 61.. 	.db "debit card", $80
0A00D 74 72 65 61 74 80         	.db "treat", $80
0A013 62 61 6E 6B 20 6C 65 74.. 	.db "bank letter", $80
0A01F 70 61 63 6B 80            	.db "pack", $80
0A024                           .include "src/text/chr-names.asm"
0A024                           CharacterFullNames:
0A024 3F 80                     	.db "?", $80
0A026 49 67 67 79 20 52 65 69.. 	.db "Iggy Reich", $80
0A031 4A 75 6E 69 6F 72 20 46.. 	.db "Junior Fey", $80
0A03C 4A 61 6D 65 73 20 52 61.. 	.db "James Raren", $80
0A048 4A 61 6D 65 73 20 52 61.. 	.db "James Raren", $80
0A054 50 68 69 6C 6C 69 70 20.. 	.db "Phillip Reich", $80
0A062 44 69 6C 61 6E 20 46 65.. 	.db "Dilan Fey", $80
0A06C 4C 69 6C 61 20 46 65 79.. 	.db "Lila Fey", $80
0A075 47 61 72 79 20 52 61 72.. 	.db "Gary Raren", $80
0A080 53 69 64 6E 65 79 20 45.. 	.db "Sidney Esced", $80
0A08D 42 69 74 2D 42 6F 62 80   	.db "Bit-Bob", $80 ; composer in Every Song is Personalized
0A095 42 69 74 2D 42 6F 62 80   	.db "Bit-Bob", $80 ; delivery man in Pioneer's Hut
0A09D 42 69 74 2D 42 6F 62 80   	.db "Bit-Bob", $80 ; judge in Carryover Dreams
0A0A5 41 6C 65 78 80            	.db "Alex", $80
0A0AA 49 4E 43 49 44 45 4E 54.. 	.db "INCIDENTAL-LINE", $80
0A0BA 52 45 43 45 50 54 49 4F.. 	.db "RECEPTIONIST-1", $80
0A0C9 56 45 54 45 52 45 4E 41.. 	.db "VETERENARIAN-1", $80
0A0D8                           
0A0D8                           CharacterNames:
0A0D8 3F 80                     	.db "?", $80
0A0DA 49 67 67 79 80            	.db "Iggy", $80
0A0DF 4A 75 6E 65 80            	.db "June", $80
0A0E4 4A 69 6D 80               	.db "Jim", $80
0A0E8 4F 74 69 73 80            	.db "Otis", $80
0A0ED 50 68 69 6C 80            	.db "Phil", $80
0A0F2 44 69 6C 6C 80            	.db "Dill", $80
0A0F7 4C 69 6C 61 80            	.db "Lila", $80
0A0FC 47 61 72 79 80            	.db "Gary", $80
0A101 53 69 64 6E 65 79 80      	.db "Sidney", $80
0A108 42 49 54 42 4F 42 80      	.db "BITBOB", $80
0A10F 42 49 54 42 4F 42 80      	.db "BITBOB", $80
0A116 42 49 54 42 4F 42 80      	.db "BITBOB", $80
0A11D 41 6C 65 78 80            	.db "Alex", $80
0A122 49 4E 43 2E 43 31 80      	.db "INC.C1", $80
0A129 52 45 43 2E 30 31 80      	.db "REC.01", $80
0A130 56 45 54 2E 30 31 80      	.db "VET.01", $80
0A137                           .include "src/text/loc-names.asm"
0A137                           LocationNames:
0A137 46 72 69 64 69 61 80      	.db "Fridia", $80
0A13E 56 69 72 67 69 6E 69 61.. 	.db "Virginia", $80
0A147 48 6F 6D 65 80            	.db "Home", $80
0A14C 4A 75 6E 65 26 20 70 6C.. 	.db "June& place", $80
0A158 4F 74 69 73 27 70 6C 61.. 	.db "Otis'place", $80
0A163 74 68 65 20 70 65 74 20.. 	.db "the pet store", $80
0A171 74 68 65 20 70 69 7A 7A.. 	.db "the pizza place", $80
0A181 74 68 65 20 76 65 74 80   	.db "the vet", $80
0A189 74 68 65 20 62 6C 6F 63.. 	.db "the block", $80
0A193 74 68 65 20 70 61 72 6B.. 	.db "the park", $80
0A19C 63 6F 75 72 74 80         	.db "court", $80
0A1A2                           .include "src/text/episode-names.asm"0A1A2                           ; & = 's
0A1A2                           EpisodeNames:
0A1A2                           VR_101:
0A1A2 52 65 69 63 68 20 46 6F.. 	.db "Reich Fox"
0A1AB                           	text_end
0A1AB 00                        	.db text_end_cmd
0A1AC                           
0A1AC                           VR_102:
0A1AC 54 68 65 20 4A 75 6E 65.. 	.db "The June Cuddles"
0A1BC                           	text_end
0A1BC 00                        	.db text_end_cmd
0A1BD                           
0A1BD                           VR_103:
0A1BD 45 76 65 72 20 4F 74 69.. 	.db "Ever \Otis"
0A1C6                           	text_end
0A1C6 00                        	.db text_end_cmd
0A1C7                           
0A1C7                           VR_104:
0A1C7 53 69 64 6E 65 79 20 53.. 	.db "Sidney Stone"
0A1D3                           	text_end
0A1D3 00                        	.db text_end_cmd
0A1D4                           
0A1D4                           VR_105:
0A1D4 4A 69 6D 20 74 68 65 20.. 	.db "Jim the Buff"
0A1E0                           	text_end
0A1E0 00                        	.db text_end_cmd
0A1E1                           
0A1E1                           VR_106:
0A1E1 54 68 61 6E 6B 73 20 74.. 	.db "Thanks to the Chimney"
0A1F6                           	text_end
0A1F6 00                        	.db text_end_cmd
0A1F7                           
0A1F7                           VR_107:
0A1F7 4D 6F 6C 65 50 6F 6F 6C   	.db "MolePool"
0A1FF                           	text_end
0A1FF 00                        	.db text_end_cmd
0A200                           
0A200                           VR_108:
0A200 4E 61 6D 65 20 42 72 65.. 	.db "Name Break"
0A20A                           	text_end
0A20A 00                        	.db text_end_cmd
0A20B                           
0A20B                           VR_109:
0A20B 57 68 61 74 20 53 68 6F.. 	.db "What Should We Do With Sidney?"
0A229                           	text_end
0A229 00                        	.db text_end_cmd
0A22A                           
0A22A                           VR_110:
0A22A 47 6F 6F 64 20 41 6E 73.. 	.db "Good Answer!"
0A236                           	text_end
0A236 00                        	.db text_end_cmd
0A237                           
0A237                           VR_111:
0A237 55 6E 64 65 72 20 74 68.. 	.db "Under the Carrots"
0A248                           	text_end
0A248 00                        	.db text_end_cmd
0A249                           
0A249                           VR_112:
0A249 54 61 75 72 69 6E 65 20.. 	.db "Taurine for Dinner"
0A25B                           	text_end
0A25B 00                        	.db text_end_cmd
0A25C                           
0A25C                           VR_113:
0A25C 54 68 65 20 49 6E 63 72.. 	.db "The Incredible Moving Dog"
0A275                           	text_end
0A275 00                        	.db text_end_cmd
0A276                           
0A276                           VR_114:
0A276 43 61 72 64 20 6F 66 20.. 	.db "Card of Treats"
0A284                           	text_end
0A284 00                        	.db text_end_cmd
0A285                           
0A285                           VR_115:
0A285 42 69 74 65 20 42 6F 61.. 	.db "Bite Board"
0A28F                           	text_end
0A28F 00                        	.db text_end_cmd
0A290                           
0A290                           VR_116:
0A290 4C 61 77 6E 20 53 69 67.. 	.db "Lawn Sign"
0A299                           	text_end
0A299 00                        	.db text_end_cmd
0A29A                           
0A29A                           VR_117:
0A29A 4C 61 75 6E 64 72 79 21   	.db "Laundry!"
0A2A2                           	text_end
0A2A2 00                        	.db text_end_cmd
0A2A3                           
0A2A3                           VR_118:
0A2A3 41 74 20 41 73 73 69 73.. 	.db "At Assistance"
0A2B0                           	text_end
0A2B0 00                        	.db text_end_cmd
0A2B1                           
0A2B1                           VR_119:
0A2B1 47 6F 69 6E 67 20 66 6F.. 	.db "Going for the Book"
0A2C3                           	text_end
0A2C3 00                        	.db text_end_cmd
0A2C4                           
0A2C4                           VR_120:
0A2C4 45 76 65 72 79 20 53 6F.. 	.db "Every Song is Personalized"
0A2DE                           	text_end
0A2DE 00                        	.db text_end_cmd
0A2DF                           
0A2DF                           VR_121:
0A2DF 50 69 6F 6E 65 65 72 26.. 	.db "Pioneer& Hut"
0A2EB                           	text_end
0A2EB 00                        	.db text_end_cmd
0A2EC                           
0A2EC                           VR_122:
0A2EC 42 75 69 6C 74 20 75 70.. 	.db "Built up a Life"
0A2FB                           	text_end
0A2FB 00                        	.db text_end_cmd
0A2FC                           
0A2FC                           VR_123:
0A2FC 43 61 72 72 79 6F 76 65.. 	.db "Carryover Dreams"
0A30C                           	text_end
0A30C 00                        	.db text_end_cmd
0A30D                           
0A30D                           VR_124;
0A30D 56 69 78 65 6E 20 56 69.. 	.db "Vixen Visitor"
0A31A                           	text_end
0A31A 00                        	.db text_end_cmd
0A31B                           
0A31B                           VR_125:
0A31B 4F 74 69 73 27 4F 64 6F.. 	.db "Otis'Odor"
0A324                           	text_end
0A324 00                        	.db text_end_cmd
0A325                           
0A325                           VR_126:
0A325 48 6F 72 6E 65 74 20 54.. 	.db "Hornet Tag"
0A32F                           	text_end
0A32F 00                        	.db text_end_cmd
0A330                           
0A330                           VR_127:
0A330 46 69 72 73 74 20 52 65.. 	.db "First Reunion"
0A33D                           	text_end
0A33D 00                        	.db text_end_cmd
0A33E 00 00 00 00 00 00 00 00.. 	.pad $c000, $00
0C000                           
0C000                           	; bank 08-6f - unused (for now)
0C000 00 00 00 00 00 00 00 00.. 	.dsb (($ef - PRG_Names0) * $2000), $00
DC000                           ENDIF
DC000                           
DC000                           ; dpcm data - 48K
DC000                           .base $c000
0C000 D4 5A AD D6 B6 AD 6D DB.. .incbin "src/raw-data/dpcm70.bin"
0E000                           .pad $e000, $00
0E000                           
0E000                           .base $c000
0C000 00 3F 00 FC 0F 5E 00 F0.. .incbin "src/raw-data/dpcm71.bin"
0E000                           .pad $e000, $00
0E000                           
0E000                           .base $c000
0C000 58 55 59 A5 55 55 55 55.. .incbin "src/raw-data/dpcm72.bin"
0E000                           .pad $e000, $00
0E000                           
0E000                           .base $c000
0C000 B2 DA AA CA 52 D5 2C 75.. .incbin "src/raw-data/dpcm73.bin"
0E000                           .pad $e000, $00
0E000                           
0E000                           .base $c000
0C000 00 A6 52 B5 2A 5B 95 32.. .incbin "src/raw-data/dpcm74.bin"
0E000                           .pad $e000, $00
0E000                           
0E000                           .base $c000
0C000 49 A9 55 4D 55 2A E0 7E.. .incbin "src/raw-data/dpcm75.bin"
0E000                           .pad $e000, $00
0E000                           
0E000                           .base $c000
0C000 51 6A 55 53 A5 80 FE E3.. .incbin "src/raw-data/dpcm76.bin"
0E000                           .pad $e000, $00
0E000                           
0E000                           .base $c000
0C000 51 5A D5 54 29 F0 5E FE.. .incbin "src/raw-data/dpcm77.bin"
0E000                           .pad $e000, $00
0E000                           
0E000                           .base $c000
0C000 51 5A 35 55 0A FC 8E 9E.. .incbin "src/raw-data/dpcm78.bin"
0E000                           .pad $e000, $00
0E000                           
0E000                           .base $c000
0C000 E9 56 A5 17 F0 A5 1D 60.. .incbin "src/raw-data/dpcm79.bin"
0E000                           .pad $e000, $00
0E000                           
0E000                           .base $c000
0C000 E9 55 7A 81 97 0E A8 BA.. .incbin "src/raw-data/dpcm7a.bin"
0E000                           .pad $e000, $00
0E000                           
0E000                           .base $c000
0C000 E0 8C FF FF 07 C0 C0 01.. .incbin "src/raw-data/dpcm7b.bin"
0E000                           .pad $e000, $00
0E000                           
0E000                           .base $c000
0C000 D9 55 1E 78 79 80 E9 E2.. .incbin "src/raw-data/dpcm7c.bin"
0E000                           .pad $e000, $00
0E000                           
0E000                           .base $c000
0C000 79 E5 C1 39 90 E3 89 FE.. .incbin "src/raw-data/dpcm7d.bin"
0E000                           .pad $e000, $00
0E000                           
0E000                           .base $c000
0C000 AA 5A 54 54 54 54 54 54.. .incbin "src/raw-data/dpcm7e.bin"
0D580 0D 0A 0D 0A 56 75 6C 70.. .incbin "docs/dmc-set-meta.txt"
0D834 00 00 00 00 00 00 00 00.. .pad $e000, $00
0E000                           
0E000                           IFNDEF NSF_FILE
0E000                           	.base $e000
0E000                           	.include "src/home.asm"
0E000                           .include "src/home/misc.asm"
0E000                           ; general purpose code:
0E000                           ;  NMI typically only has access to PRG related subs, and not even all of them
0E000                           
0E000                           ClearWindowData:
0E000 A9 B0                     	LDA #<cWindowStackPointer
0E002 A0 5E                     	LDY #>cWindowStackPointer
0E004 20 3C E0                  	JSR @bytefill
0E007 A9 E0                     	LDA #<cMenuHeader
0E009 A0 5E                     	LDY #>cMenuHeader
0E00B 20 3C E0                  	JSR @bytefill
0E00E A9 D0                     	LDA #<cMenuDataFlags
0E010 A0 5E                     	LDY #>cMenuDataFlags
0E012 20 3C E0                  	JSR @bytefill
0E015 A9 C0                     	LDA #<c2DMenuCursorInitY
0E017 A0 5E                     	LDY #>c2DMenuCursorInitY
0E019 20 3C E0                  	JSR @bytefill
0E01C                           
0E01C A9 00                     	LDA #RAM_Scratch
0E01E 85 2B                     	STA zRAMBank
0E020 8D 13 51                  	STA MMC5_PRGBankSwitch1
0E023                           
0E023 48                        	PHA
0E024 A9 FF                     	LDA #<sWindowStackTop
0E026 A0 7F                     	LDY #>sWindowStackTop
0E028 85 3E                     	STA zAuxAddresses + 6
0E02A 84 3F                     	STY zAuxAddresses + 7
0E02C 68                        	PLA
0E02D                           	STD zAuxAddresses + 6
0E02D 85 3E                     	STA zAuxAddresses + 6
0E02F C6 3E                     	DEC zAuxAddresses + 6
0E031 A5 3E                     	LDA zAuxAddresses + 6
0E033 8D B0 5E                  	STA cWindowStackPointer
0E036 A5 3F                     	LDA zAuxAddresses + 7
0E038 8D B1 5E                  	STA cWindowStackPointer + 1
0E03B 60                        	RTS
0E03C                           
0E03C                           @bytefill:
0E03C 85 3E                     	STA zAuxAddresses + 6
0E03E 84 3F                     	STY zAuxAddresses + 7
0E040 A9 00                     	LDA #0
0E042 A0 10                     	LDY #$10
0E044 4C E6 E0                  	JMP ByteFill
0E047                           
0E047                           UnreferencedFarJump:
0E047                           ; jump to a subroutine according to A:YX
0E047 8D 12 5C                  	STA cCurrentROMBank
0E04A 86 27                     	STX zBackupX
0E04C                           	PHX
0E04C 8A                        	TXA
0E04D 48                        	PHA
0E04E 84 28                     	STY zBackupY
0E050                           	PHY
0E050 98                        	TYA
0E051 48                        	PHA
0E052 20 CC E0                  	JSR GetWindowIndex
0E055 AD 12 5C                  	LDA cCurrentROMBank
0E058 95 2C                     	STA zWindow1, X
0E05A 95 2E                     	STA zCurrentWindow, X
0E05C 4C 93 E3                  	JMP UpdatePRG
0E05F                           
0E05F                           FarCallJump:
0E05F                           ; access a subroutine according to A:YX
0E05F                           	; save PRG # for later
0E05F 8D 12 5C                  	STA cCurrentROMBank
0E062 20 68 E0                  	JSR @Store
0E065                           	; we're typically not in an NMI here
0E065 4C 19 E4                  	JMP SyncToCurrentWindow
0E068                           
0E068                           @Store:
0E068                           	; push address to stack
0E068 84 28                     	STY zBackupY
0E06A                           	PHY
0E06A 98                        	TYA
0E06B 48                        	PHA
0E06C 86 27                     	STX zBackupX
0E06E                           	PHX
0E06E 8A                        	TXA
0E06F 48                        	PHA
0E070                           	; index based on Y
0E070 98                        	TYA
0E071 20 CC E0                  	JSR GetWindowIndex
0E074                           	; grab/store PRG #
0E074 AD 12 5C                  	LDA cCurrentROMBank
0E077 9D 14 51                  	STA MMC5_PRGBankSwitch2, X
0E07A 95 2E                     	STA zCurrentWindow, X
0E07C 60                        	RTS
0E07D                           
0E07D                           FourBytePointers:
0E07D                           ; entry  - y
0E07D                           ; offset - zTableOffset
0E07D A9 00                     	LDA #0
0E07F 85 2A                     	STA zTableOffset + 1
0E081 98                        	TYA
0E082 0A                        	ASL A
0E083 26 2A                     	ROL zTableOffset + 1
0E085 0A                        	ASL A
0E086 26 2A                     	ROL zTableOffset + 1
0E088 85 29                     	STA zTableOffset
0E08A 60                        	RTS
0E08B                           
0E08B                           ThreeBytePointers:
0E08B                           ; entry  - y
0E08B                           ; offset - zTableOffset
0E08B A9 00                     	LDA #0
0E08D 85 2A                     	STA zTableOffset + 1
0E08F 98                        	TYA
0E090 0A                        	ASL A
0E091 85 29                     	STA zTableOffset
0E093 26 2A                     	ROL zTableOffset + 1
0E095 98                        	TYA
0E096 65 29                     	ADC zTableOffset
0E098 85 29                     	STA zTableOffset
0E09A 90 02                     	BCC @Done
0E09C E6 2A                     	INC zTableOffset + 1
0E09E                           @Done:
0E09E 60                        	RTS
0E09F                           
0E09F                           JumpTable:
0E09F                           ; general purpose jumptable
0E09F                           ; jumps to addres AY
0E09F 84 28                     	STY zBackupY
0E0A1 A4 28                     	LDY zBackupY
0E0A3 D0 03                     	BNE @Normal
0E0A5 E9 00                     	SBC #0
0E0A7 18                        	CLC
0E0A8                           @Normal:
0E0A8 88                        	DEY
0E0A9 65 29                     	ADC zTableOffset
0E0AB 48                        	PHA
0E0AC 98                        	TYA
0E0AD 65 2A                     	ADC zTableOffset + 1
0E0AF 48                        	PHA
0E0B0 60                        	RTS
0E0B1                           
0E0B1                           HideSprites:
0E0B1 38                        	SEC
0E0B2 A0 F8                     	LDY #$f8
0E0B4 A2 00                     	LDX #0
0E0B6                           @Loop:
0E0B6 8A                        	TXA
0E0B7 E9 04                     	SBC #4
0E0B9 AA                        	TAX
0E0BA 98                        	TYA
0E0BB 9D 00 07                  	STA iVirtualOAM, X
0E0BE 8A                        	TXA
0E0BF D0 F5                     	BNE @Loop
0E0C1 60                        	RTS
0E0C2                           
0E0C2                           ClearOAM:
0E0C2 A9 00                     	LDA #0
0E0C4 AA                        	TAX
0E0C5                           @Loop:
0E0C5 CA                        	DEX
0E0C6 9D 00 07                  	STA iVirtualOAM, X
0E0C9 D0 FA                     	BNE @Loop
0E0CB 60                        	RTS
0E0CC                           
0E0CC                           GetWindowIndex:
0E0CC                           ; input -  A - $80-$bf
0E0CC                           ; output - X - PRG window X
0E0CC A2 00                     	LDX #0
0E0CE 29 60                     	AND #>WINDOW_MASK
0E0D0 F0 01                     	BEQ @Quit
0E0D2 E8                        	INX
0E0D3                           @Quit:
0E0D3 60                        	RTS
0E0D4                           
0E0D4                           StoreIndexedBank:
0E0D4                           ; store bank A into bank window X
0E0D4                           ; we only come here if we aren't already home
0E0D4 9D 14 51                  	STA MMC5_PRGBankSwitch2, X
0E0D7 95 2E                     	STA zCurrentWindow, X
0E0D9 60                        	RTS
0E0DA                           
0E0DA                           CopyBytes:
0E0DA                           ; copy Y bytes from (zAuxAddresses + 6) to (zAuxAddresses + 2)
0E0DA C8                        	INY ; we bail the moment y = 0
0E0DB 88                        	DEY
0E0DC F0 07                     	BEQ @Quit
0E0DE                           @Loop:
0E0DE B1 3E                     	LDA (zAuxAddresses + 6), Y
0E0E0 91 3A                     	STA (zAuxAddresses + 2), Y
0E0E2 88                        	DEY
0E0E3 D0 F9                     	BNE @Loop
0E0E5                           @Quit:
0E0E5 60                        	RTS
0E0E6                           
0E0E6                           ByteFill:
0E0E6                           ; fill Y bytes at (zAuxAddresses + 6)
0E0E6 C8                        	INY ; we bail the moment y = 0
0E0E7                           @Loop:
0E0E7 88                        	DEY
0E0E8 F0 04                     	BEQ @Quit
0E0EA 91 3E                     	STA (zAuxAddresses + 6), Y
0E0EC D0 F9                     	BNE @Loop
0E0EE                           @Quit:
0E0EE 60                        	RTS
0E0EF                           
0E0EF                           DelayFrame_s_:
0E0EF                           ; stop for A frames
0E0EF 85 23                     	STA zNMITimer
0E0F1                           @Halt:
0E0F1 A5 23                     	LDA zNMITimer
0E0F3 D0 FC                     	BNE @Halt
0E0F5 60                        	RTS
0E0F6                           .include "src/home/gfx.asm"
0E0F6                           FadePalettes:
0E0F6                           ; fade in and fade out the palettes on screen
0E0F6                           	; zPals initial byte contains two bitwise commands
0E0F6                           	; 6 (o) = fade direction, 7 (s) = fade power
0E0F6 A5 E0                     	LDA zPals
0E0F8 24 E0                     	BIT zPals
0E0FA 30 01                     	BMI @Fading ; only branch if power is on
0E0FC 60                        	RTS
0E0FD                           
0E0FD                           @Fading:
0E0FD 50 5C                     	BVC @In
0E0FF                           	; zPalFade timer is 4-bit (0-15)
0E0FF A5 5C                     	LDA zPalFade
0E101 29 0F                     	AND #PALETTE_FADE_SPEED_MASK
0E103 F0 03                     	BEQ @Act
0E105                           	; dec timer if we got here
0E105 C6 5C                     	DEC zPalFade
0E107 60                        	RTS
0E108                           @Act:
0E108                           	; zPalFadePlacement is 2-bit (0-3)
0E108 A5 5F                     	LDA zPalFadePlacement
0E10A F0 2B                     	BEQ @Final
0E10C A8                        	TAY
0E10D                           @AppLoop:
0E10D 20 1C E1                  	JSR @Apply
0E110 C8                        	INY
0E111 C0 03                     	CPY #3
0E113 90 F8                     	BCC @AppLoop
0E115                           	; cleanup
0E115 C6 5F                     	DEC zPalFadePlacement
0E117 A5 5E                     	LDA zPalFadeSpeed
0E119 85 5C                     	STA zPalFade
0E11B 60                        	RTS
0E11C                           
0E11C                           @Apply:
0E11C B9 E0 00                  	LDA zPals, Y
0E11F 29 3F                     	AND #COLOR_INDEX
0E121 99 E1 00                  	STA zPals + 1, Y
0E124 B9 E4 00                  	LDA zPals + 4, Y
0E127 99 E5 00                  	STA zPals + 5, Y
0E12A B9 E8 00                  	LDA zPals + 8, Y
0E12D 99 E9 00                  	STA zPals + 9, Y
0E130 B9 EC 00                  	LDA zPals + 12, Y
0E133 99 ED 00                  	STA zPals + 13, Y
0E136 60                        	RTS
0E137                           
0E137                           @Final:
0E137                           	; clear fade direction flag (we're fading in now)
0E137 A5 5E                     	LDA zPalFadeSpeed
0E139 85 5C                     	STA zPalFade
0E13B A5 E0                     	LDA zPals
0E13D                           	RSB PAL_FADE_DIR_F
0E13D 29 BF                     	AND #$ff ^ (1 << PAL_FADE_DIR_F)
0E13F 48                        	PHA ; save this for later
0E140 29 3F                     	AND #COLOR_INDEX
0E142 A2 04                     	LDX #NUM_BG_PALETTES
0E144                           @FinalLoop:
0E144                           	; clear palettes
0E144 CA                        	DEX
0E145 95 EC                     	STA zPals + 12, X
0E147 95 E8                     	STA zPals + 8, X
0E149 95 E4                     	STA zPals + 4, X
0E14B 95 E0                     	STA zPals, X
0E14D D0 F5                     	BNE @FinalLoop
0E14F                           	; apply the flags
0E14F 68                        	PLA
0E150 29 C0                     	AND #$c0
0E152 05 E0                     	ORA zPals
0E154 85 E0                     	STA zPals
0E156                           	; reset placement byte
0E156 A9 03                     	LDA #PALETTE_FADE_PLACEMENT_MASK
0E158 85 5F                     	STA zPalFadePlacement
0E15A 60                        	RTS
0E15B                           
0E15B                           @In:
0E15B                           	; check timer
0E15B A5 5C                     	LDA zPalFade
0E15D 29 0F                     	AND #PALETTE_FADE_SPEED_MASK
0E15F F0 03                     	BEQ @InAct
0E161                           	; dec timer if we got here
0E161 C6 5C                     	DEC zPalFade
0E163 60                        	RTS
0E164                           @InAct:
0E164                           	; reset counter
0E164 A5 5E                     	LDA zPalFadeSpeed
0E166 85 5C                     	STA zPalFade
0E168                           	; choose what to do
0E168 A5 5F                     	LDA zPalFadePlacement
0E16A 29 03                     	AND #PALETTE_FADE_PLACEMENT_MASK
0E16C A8                        	TAY
0E16D F0 11                     	BEQ @Zero
0E16F 88                        	DEY
0E170 F0 42                     	BEQ @One
0E172 88                        	DEY
0E173 F0 68                     	BEQ @Two
0E175                           	; we're done
0E175                           	; do cleanup
0E175                           	; reset placement byte
0E175 A9 03                     	LDA #PALETTE_FADE_PLACEMENT_MASK
0E177 85 5F                     	STA zPalFadePlacement
0E179 A5 E0                     	LDA zPals
0E17B                           	RSB PAL_FADE_F
0E17B 29 7F                     	AND #$ff ^ (1 << PAL_FADE_F)
0E17D 85 E0                     	STA zPals
0E17F 60                        	RTS
0E180                           
0E180                           @Zero:
0E180 E6 5F                     	INC zPalFadePlacement
0E182 C8                        	INY
0E183 B9 D0 04                  	LDA iCurrentPals, Y
0E186 99 E0 00                  	STA zPals, Y
0E189 99 E1 00                  	STA zPals + 1, Y
0E18C 99 E2 00                  	STA zPals + 2, Y
0E18F B9 D4 04                  	LDA iCurrentPals + 4, Y
0E192 99 E4 00                  	STA zPals + 4, Y
0E195 99 E5 00                  	STA zPals + 5, Y
0E198 99 E6 00                  	STA zPals + 6, Y
0E19B B9 D8 04                  	LDA iCurrentPals + 8, Y
0E19E 99 E8 00                  	STA zPals + 8, Y
0E1A1 99 E9 00                  	STA zPals + 9, Y
0E1A4 99 EA 00                  	STA zPals + 10, Y
0E1A7 B9 DC 04                  	LDA iCurrentPals + 12, Y
0E1AA 99 EC 00                  	STA zPals + 12, Y
0E1AD 99 ED 00                  	STA zPals + 13, Y
0E1B0 99 EE 00                  	STA zPals + 14, Y
0E1B3 60                        	RTS
0E1B4                           
0E1B4                           @One:
0E1B4 E6 5F                     	INC zPalFadePlacement
0E1B6 A4 5F                     	LDY zPalFadePlacement
0E1B8 B9 D0 04                  	LDA iCurrentPals, Y
0E1BB 99 E0 00                  	STA zPals, Y
0E1BE 99 E1 00                  	STA zPals + 1, Y
0E1C1 B9 D4 04                  	LDA iCurrentPals + 4, Y
0E1C4 99 E4 00                  	STA zPals + 4, Y
0E1C7 99 E5 00                  	STA zPals + 5, Y
0E1CA B9 D8 04                  	LDA iCurrentPals + 8, Y
0E1CD 99 E8 00                  	STA zPals + 8, Y
0E1D0 99 E9 00                  	STA zPals + 9, Y
0E1D3 B9 DC 04                  	LDA iCurrentPals + 12, Y
0E1D6 99 EC 00                  	STA zPals + 12, Y
0E1D9 99 ED 00                  	STA zPals + 13, Y
0E1DC 60                        	RTS
0E1DD                           
0E1DD                           @Two:
0E1DD E6 5F                     	INC zPalFadePlacement
0E1DF A4 5F                     	LDY zPalFadePlacement
0E1E1 B9 D0 04                  	LDA iCurrentPals, Y
0E1E4 99 E0 00                  	STA zPals, Y
0E1E7 B9 D4 04                  	LDA iCurrentPals + 4, Y
0E1EA 99 E4 00                  	STA zPals + 4, Y
0E1ED B9 D8 04                  	LDA iCurrentPals + 8, Y
0E1F0 99 E8 00                  	STA zPals + 8, Y
0E1F3 B9 DC 04                  	LDA iCurrentPals + 12, Y
0E1F6 99 EC 00                  	STA zPals + 12, Y
0E1F9 60                        	RTS
0E1FA                           
0E1FA                           InitPals:
0E1FA                           ; despite not being in an NMI, conventional PRG updates apparently work here
0E1FA                           ; initialize palettes
0E1FA                           	JSH PRG_GFXEngine, _InitPals
0E1FA A9 80                     	LDA #>_InitPals
0E1FC 20 CC E0                  	JSR GetWindowIndex
0E1FF A9 86                     	LDA #PRG_GFXEngine
0E201 9D 14 51                  	STA MMC5_PRGBankSwitch2, X
0E204 95 2E                     	STA zCurrentWindow, X
0E206 20 00 80                  	JSR _InitPals
0E209 4C 93 E3                  	JMP UpdatePRG
0E20C                           
0E20C                           InitNameTable:
0E20C                           ; initialize nametables + attributes
0E20C                           	JSH PRG_GFXEngine, _InitNameTable
0E20C A9 80                     	LDA #>_InitNameTable
0E20E 20 CC E0                  	JSR GetWindowIndex
0E211 A9 86                     	LDA #PRG_GFXEngine
0E213 9D 14 51                  	STA MMC5_PRGBankSwitch2, X
0E216 95 2E                     	STA zCurrentWindow, X
0E218 20 0B 80                  	JSR _InitNameTable
0E21B 4C 93 E3                  	JMP UpdatePRG
0E21E                           
0E21E                           GetTextByte:
0E21E                           ; snatch a byte from zCurrentTextAddress in zTextBank
0E21E A5 65                     	LDA zCurrentTextAddress + 1
0E220 20 CC E0                  	JSR GetWindowIndex
0E223 A5 63                     	LDA zTextBank
0E225 9D 14 51                  	STA MMC5_PRGBankSwitch2, X
0E228 95 2E                     	STA zCurrentWindow, X
0E22A B1 64                     	LDA (zCurrentTextAddress), Y
0E22C 85 62                     	STA zCurrentTextByte
0E22E A9 86                     	LDA #PRG_GFXEngine
0E230 85 2C                     	STA zWindow1
0E232 20 93 E3                  	JSR UpdatePRG ; restore old bank
0E235 A5 62                     	LDA zCurrentTextByte
0E237 60                        	RTS
0E238                           
0E238                           ReadPPUData:
0E238                           ; copy 
0E238 A2 1C                     	LDX #TEXT_BOX_WIDTH
0E23A 86 27                     	STX zBackupX
0E23C                           @Loop:
0E23C CA                        	DEX
0E23D C6 27                     	DEC zBackupX
0E23F AD 07 20                  	LDA PPUDATA
0E242 9D 60 06                  	STA iStringBuffer + $60, X
0E245 A6 27                     	LDX zBackupX
0E247 D0 F3                     	BNE @Loop
0E249 60                        	RTS
0E24A                           
0E24A                           GetName:
0E24A                           ; Return name cCurrentIndex from name list cObjectType in iStringBuffer.
0E24A                           	; preserve registers
0E24A 08                        	PHP
0E24B 48                        	PHA
0E24C                           	PHX
0E24C 8A                        	TXA
0E24D 48                        	PHA
0E24E                           	PHY
0E24E 98                        	TYA
0E24F 48                        	PHA
0E250                           	JSH PRG_GFXEngine, GetNamePointer
0E250 A9 80                     	LDA #>GetNamePointer
0E252 20 CC E0                  	JSR GetWindowIndex
0E255 A9 86                     	LDA #PRG_GFXEngine
0E257 9D 14 51                  	STA MMC5_PRGBankSwitch2, X
0E25A 95 2E                     	STA zCurrentWindow, X
0E25C 20 23 80                  	JSR GetNamePointer
0E25F F0 03                     	BEQ @NoName
0E261                           	; only bank switch if we have an address to pull from
0E261 9D 14 51                  	STA MMC5_PRGBankSwitch2, X
0E264                           
0E264                           @NoName:
0E264                           	JSH PRG_GFXEngine, CopyCurrentIndex
0E264 A9 80                     	LDA #>CopyCurrentIndex
0E266 20 CC E0                  	JSR GetWindowIndex
0E269 A9 86                     	LDA #PRG_GFXEngine
0E26B 9D 14 51                  	STA MMC5_PRGBankSwitch2, X
0E26E 95 2E                     	STA zCurrentWindow, X
0E270 20 54 80                  	JSR CopyCurrentIndex
0E273                           
0E273                           	; restore all registers
0E273                           	PLY
0E273 68                        	PLA
0E274 A8                        	TAY
0E275                           	PLX
0E275 68                        	PLA
0E276 AA                        	TAX
0E277 68                        	PLA
0E278 28                        	PLP
0E279                           	; bank switch
0E279 4C 19 E4                  	JMP SyncToCurrentWindow
0E27C                           
0E27C                           NamesPointers:
0E27C                           	dba PRG_Names0, ItemNames
0E27C 87 00 A0                  	.db PRG_Names0, <ItemNames, >ItemNames
0E27F                           	dba PRG_Names0, CharacterFullNames
0E27F 87 24 A0                  	.db PRG_Names0, <CharacterFullNames, >CharacterFullNames
0E282                           	dba PRG_Names0, CharacterNames
0E282 87 D8 A0                  	.db PRG_Names0, <CharacterNames, >CharacterNames
0E285                           	dba PRG_Names0, LocationNames
0E285 87 37 A1                  	.db PRG_Names0, <LocationNames, >LocationNames
0E288                           	dba PRG_Names0, EpisodeNames ; do not use
0E288 87 A2 A1                  	.db PRG_Names0, <EpisodeNames, >EpisodeNames
0E28B                           
0E28B                           GetNthString:
0E28B                           ; Return the address of the Ath string starting from (zAuxAddresses + 6)
0E28B                           	; return if A - 1 = 0
0E28B F0 23                     	BEQ @Quit
0E28D 48                        	PHA
0E28E AD 0B 5C                  	LDA cObjectType
0E291 C9 04                     	CMP #EPISODE_NAMES
0E293 F0 1C                     	BEQ @Episode
0E295 68                        	PLA
0E296                           	; preserve X and Y
0E296 84 28                     	STY zBackupY
0E298 86 27                     	STX zBackupX
0E29A                           	; Y has to be 0 to read 
0E29A A0 00                     	LDY #0
0E29C                           	; X = (cCurrentIndex - 1)
0E29C AA                        	TAX
0E29D                           @Loop:
0E29D                           	; loop if not terminator
0E29D B1 3E                     	LDA (zAuxAddresses + 6), Y
0E29F E6 3E                     	INC zAuxAddresses + 6
0E2A1 F0 02                     	BEQ @Next
0E2A3 E6 3F                     	INC zAuxAddresses + 7
0E2A5                           @Next:
0E2A5 C9 00                     	CMP #text_end_cmd
0E2A7 D0 F4                     	BNE @Loop
0E2A9                           	; loop if Y dec doesn't set z
0E2A9 88                        	DEY
0E2AA D0 F1                     	BNE @Loop
0E2AC                           	; restore X and Y
0E2AC A6 27                     	LDX zBackupX
0E2AE A4 28                     	LDY zBackupY
0E2B0                           @Quit:
0E2B0 60                        	RTS
0E2B1                           
0E2B1                           @Episode:
0E2B1 68                        	PLA
0E2B2 4C 71 80                  	JMP GetEpisodeName
0E2B5                           
0E2B5                           
0E2B5                           ;
0E2B5                           ; This reads from $F0/$F1 to determine where a "buffer" is.
0E2B5                           ; Basically, a buffer is like this:
0E2B5                           ;
0E2B5                           ; PPUADDR  LEN DATA ......
0E2B5                           ; $20 $04  $03 $E9 $F0 $FB
0E2B5                           ; $25 $5F  $4F $FB
0E2B5                           ; $21 $82  $84 $00 $01 $02 $03
0E2B5                           ; $00
0E2B5                           ;
0E2B5                           ; PPUADDR is two bytes (hi,lo) for the address to send to PPUADDR.
0E2B5                           ; LEN is the length, with the following two bitmasks:
0E2B5                           ;
0E2B5                           ;  - $80: Set the "draw vertically" option
0E2B5                           ;  - $40: Use ONE tile instead of a string
0E2B5                           ;
0E2B5                           ; DATA is either (LEN) bytes or one byte.
0E2B5                           ;
0E2B5                           ; After (LEN) bytes have been written, the buffer pointer
0E2B5                           ; is incremented to (LEN+2) and the function restarts.
0E2B5                           ; A byte of $00 terminates execution and returns.
0E2B5                           ;
0E2B5                           ; There is a similar function, `UpdatePPUFromBufferNMI`,
0E2B5                           ; that is called during NMI, but unlike this one,
0E2B5                           ; that one does NOT use bitmasks, nor increment the pointer.
0E2B5                           ;
0E2B5                           UpdatePPUFromBufferWithOptions:
0E2B5                           	; First, check if we have anything to send to the PPU
0E2B5 A0 00                     	LDY #$00
0E2B7 B1 32                     	LDA (zPPUDataBufferPointer), Y
0E2B9                           	; If the first byte at the buffer address is #$00, we have nothing. We're done here!
0E2B9 F0 41                     	BEQ @Quit
0E2BB                           
0E2BB                           	; Clear address latch
0E2BB AE 02 20                  	LDX PPUSTATUS
0E2BE                           	; Set the PPU address to the
0E2BE                           	; address from the PPU buffer
0E2BE 8D 06 20                  	STA PPUADDR
0E2C1 C8                        	INY
0E2C2 B1 32                     	LDA (zPPUDataBufferPointer), Y
0E2C4 8D 06 20                  	STA PPUADDR
0E2C7 C8                        	INY
0E2C8 B1 32                     	LDA (zPPUDataBufferPointer), Y ; Data segment length byte...
0E2CA 0A                        	ASL A
0E2CB 48                        	PHA
0E2CC                           	; Enable NMI + Vertical increment + whatever else was already set...
0E2CC A5 54                     	LDA zPPUCtrlMirror
0E2CE 09 84                     	ORA #PPUCtrl_Base2000 | PPUCtrl_WriteVertical | PPUCtrl_Sprite0000 | PPUCtrl_Background0000 | PPUCtrl_SpriteSize8x8 | PPUCtrl_NMIEnabled
0E2D0                           	; ...but only if $80 was set in the length byte. Otherwise, turn vertical incrementing back off.
0E2D0 B0 02                     	BCS @EnableVerticalIncrement
0E2D2                           
0E2D2 29 FB                     	AND #PPUCtrl_Base2C00 | PPUCtrl_WriteHorizontal | PPUCtrl_Sprite1000 | PPUCtrl_Background1000 | PPUCtrl_SpriteSize8x16 | PPUCtrl_NMIEnabled | $40
0E2D4                           
0E2D4                           @EnableVerticalIncrement:
0E2D4 8D 00 20                  	STA PPUCTRL
0E2D7 68                        	PLA
0E2D8                           	; Check if the second bit ($40) in the length has been set
0E2D8 0A                        	ASL A
0E2D9                           	; If not, we are copying a string of data
0E2D9 90 03                     	BCC @CopyStringOfTiles
0E2DB                           
0E2DB                           	; Length (A) is now (A << 2).
0E2DB                           	; OR in #$02 now if we are copying a single tile;
0E2DB                           	; This will be rotated out into register C momentarily
0E2DB 09 02                     	ORA #$02
0E2DD C8                        	INY
0E2DE                           
0E2DE                           @CopyStringOfTiles:
0E2DE                           	; Restore the data length.
0E2DE                           	; A = (Length & #$3F)
0E2DE 4A                        	LSR A
0E2DF                           
0E2DF                           	; This moves the second bit (used above to signal
0E2DF                           	; "one tile mode") into the Carry register
0E2DF 4A                        	LSR A
0E2E0 AA                        	TAX ; Copy the length into register X
0E2E1                           
0E2E1                           @CopyLoop:
0E2E1                           	; If Carry is set (from above), we're only copying one tile.
0E2E1                           	; Do not increment Y to advance copying index
0E2E1 B0 01                     	BCS @CopySingleTileSkip
0E2E3                           
0E2E3 C8                        	INY
0E2E4                           
0E2E4                           @CopySingleTileSkip:
0E2E4 B1 32                     	LDA (zPPUDataBufferPointer), Y ; Load data from buffer...
0E2E6 8D 07 20                  	STA PPUDATA ; ...store it to the PPU.
0E2E9 CA                        	DEX ; Decrease remaining length.
0E2EA D0 F5                     	BNE @CopyLoop ; Are we done? If no, copy more stuff
0E2EC                           
0E2EC C8                        	INY ; Y contains the amount of copied data now
0E2ED 98                        	TYA ; ...and now A does
0E2EE 18                        	CLC ; Clear carry bit (from earlier)
0E2EF 65 32                     	ADC zPPUDataBufferPointer ; Add the length to the PPU data buffer
0E2F1 85 32                     	STA zPPUDataBufferPointer
0E2F3 A5 33                     	LDA zPPUDataBufferPointer + 1
0E2F5                           	; If the length overflowed (carry set),
0E2F5                           	; add that to the hi byte of the pointer
0E2F5 69 00                     	ADC #$00
0E2F7 85 33                     	STA zPPUDataBufferPointer + 1
0E2F9                           	; Start the cycle over again.
0E2F9                           	; (If the PPU buffer points to a 0, it will terminate after this jump)
0E2F9 4C B5 E2                  	JMP UpdatePPUFromBufferWithOptions
0E2FC                           
0E2FC                           @Quit:
0E2FC 60                        	RTS
0E2FD                           
0E2FD                           .include "src/home/math.asm"
0E2FD                           SimpleMultiply:
0E2FD                           ; multiply zFactorBuffer * a
0E2FD                           	TAB
0E2FD 29 FF                     	AND #$ff
0E2FF F0 07                     	BEQ @Quit
0E301                           @Loop:
0E301 18                        	CLC
0E302 65 40                     	ADC zFactorBuffer
0E304 C6 41                     	DEC zFactorBuffer + 1
0E306 D0 F9                     	BNE @Loop
0E308                           @Quit:
0E308 60                        	RTS
0E309                           
0E309                           MMC5Multiply:
0E309                           ; multiplies two 8-bit numbers
0E309                           ; returns number XA
0E309 A5 40                     	LDA zFactorBuffer
0E30B A6 41                     	LDX zFactorBuffer + 1
0E30D 8D 05 52                  	STA MMC5_Multiplier1
0E310 8E 06 52                  	STX MMC5_Multiplier2
0E313 AD 05 52                  	LDA MMC5_Multiplier1
0E316 AE 06 52                  	LDX MMC5_Multiplier2
0E319 60                        	RTS
0E31A                           
0E31A                           SimpleDivide:
0E31A A2 00                     	LDX #0
0E31C 86 45                     	STX zDividerBuffer + 1
0E31E                           @Loop:
0E31E 38                        	SEC
0E31F E6 45                     	INC zDividerBuffer + 1
0E321 E5 44                     	SBC zDividerBuffer
0E323 B0 F9                     	BCS @Loop
0E325 C6 45                     	DEC zDividerBuffer + 1
0E327 65 44                     	ADC zDividerBuffer
0E329 60                        	RTS
0E32A                           
0E32A                           Purchase:
0E32A 60                        	RTS
0E32B                           .include "src/sound/interfaces.asm"
0E32B                           UpdateSound:
0E32B 08                        	PHP
0E32C 48                        	PHA
0E32D                           	PHX
0E32D 8A                        	TXA
0E32E 48                        	PHA
0E32F                           	PHY
0E32F 98                        	TYA
0E330 48                        	PHA
0E331 A9 83                     	LDA #PRG_Audio
0E333 8D 14 51                  	STA MMC5_PRGBankSwitch2
0E336 85 2E                     	STA zCurrentWindow
0E338 A5 20                     	LDA zMusicBank
0E33A 8D 15 51                  	STA MMC5_PRGBankSwitch3
0E33D 85 2F                     	STA zCurrentWindow + 1
0E33F 20 00 80                  	JSR StartProcessingSoundQueue
0E342 20 93 E3                  	JSR UpdatePRG
0E345                           	PLY
0E345 68                        	PLA
0E346 A8                        	TAY
0E347                           	PLX
0E347 68                        	PLA
0E348 AA                        	TAX
0E349 68                        	PLA
0E34A 28                        	PLP
0E34B 60                        	RTS
0E34C                           
0E34C                           PlaySFX:
0E34C 08                        	PHP
0E34D 48                        	PHA
0E34E                           	PHX
0E34E 8A                        	TXA
0E34F 48                        	PHA
0E350                           	PHY
0E350 98                        	TYA
0E351 48                        	PHA
0E352 AA                        	TAX
0E353 88                        	DEY
0E354 A9 83                     	LDA #PRG_Audio
0E356 8D 14 51                  	STA MMC5_PRGBankSwitch2
0E359 B9 B5 86                  	LDA SoundEffectDestinations, Y
0E35C 85 00                     	STA zCurrentMusicPointer
0E35E A0 00                     	LDY #0
0E360 84 01                     	STY zCurrentMusicPointer + 1
0E362 8A                        	TXA
0E363 91 00                     	STA (zCurrentMusicPointer), Y
0E365 20 93 E3                  	JSR UpdatePRG
0E368                           	PLY
0E368 68                        	PLA
0E369 A8                        	TAY
0E36A                           	PLX
0E36A 68                        	PLA
0E36B AA                        	TAX
0E36C 68                        	PLA
0E36D 28                        	PLP
0E36E 60                        	RTS
0E36F                           
0E36F                           WaitPlaySFX:
0E36F 20 75 E3                  	JSR WaitSFX
0E372 4C 4C E3                  	JMP PlaySFX
0E375                           
0E375                           WaitSFX:
0E375 A5 15                     	LDA zCurrentDPCMSFX
0E377 05 16                     	ORA zCurrentNoiseSFX
0E379 D0 FA                     	BNE WaitSFX
0E37B 60                        	RTS
0E37C                           
0E37C                           SkipMusic:
0E37C                           	TAB
0E37C 29 FF                     	AND #$ff
0E37E D0 01                     	BNE @Update
0E380 60                        	RTS
0E381                           @Update:
0E381 E9 01                     	SBC #1
0E383 20 2B E3                  	JSR UpdateSound
0E386 4C 7C E3                  	JMP SkipMusic
0E389                           
0E389                           CheckSFX:
0E389 A5 15                     	LDA zCurrentDPCMSFX
0E38B 05 16                     	ORA zCurrentNoiseSFX
0E38D D0 02                     	BNE @On
0E38F 18                        	CLC
0E390 60                        	RTS
0E391                           
0E391                           @On:
0E391 38                        	SEC
0E392 60                        	RTS
0E393                           .include "src/home/start.asm" ; needs to be at the end0E393                           UpdatePRG:
0E393                           ; update the two available windows
0E393                           ; window 3 uses DPCM, and window 4 is Home ROM
0E393 A5 2C                     	LDA zWindow1
0E395 8D 14 51                  	STA MMC5_PRGBankSwitch2
0E398 A5 2D                     	LDA zWindow2
0E39A 8D 15 51                  	STA MMC5_PRGBankSwitch3
0E39D 60                        	RTS
0E39E                           
0E39E                           UpdateCHR:
0E39E                           ; This updates all the needed registers.
0E39E                           ; we're in mode 1, so we can switch tilesets in as needed
0E39E                           ; 4K is the perfect balance between speed and flexibility
0E39E A5 24                     	LDA zCHRWindow0
0E3A0 8D 23 51                  	STA MMC5_CHRBankSwitch4 ; 0000-0fff
0E3A3                           
0E3A3 A5 25                     	LDA zCHRWindow1
0E3A5 8D 27 51                  	STA MMC5_CHRBankSwitch8  ; 1000-1fff
0E3A8 8D 2B 51                  	STA MMC5_CHRBankSwitch12 ; 1000-1fff, 0000-0fff
0E3AB                           
0E3AB 60                        	RTS
0E3AC                           
0E3AC                           ; this unreferenced subroutine was commonplace in 80's NES games
0E3AC                           ; it's a bit superfluous though
0E3AC                           ; just write the address to the PPU as you see here to the location you want
0E3AC                           ResetPPUAddress:
0E3AC AD 02 20                  	LDA PPUSTATUS
0E3AF A9 3F                     	LDA #>PALETTE_RAM ; hi then lo
0E3B1 8D 06 20                  	STA PPUADDR
0E3B4 A9 00                     	LDA #<PALETTE_RAM
0E3B6 8D 06 20                  	STA PPUADDR
0E3B9 8D 06 20                  	STA PPUADDR
0E3BC 8D 06 20                  	STA PPUADDR
0E3BF 60                        	RTS
0E3C0                           ;
0E3C0                           ; Updates joypad press/held values
0E3C0                           ;
0E3C0                           UpdateJoypads:
0E3C0 A2 00                     	LDX #0
0E3C2 20 EC E3                  	JSR ReadJoypads
0E3C5                           
0E3C5                           @DoubleCheckInput0:
0E3C5                           	; Work around DPCM sample bug,
0E3C5                           	; where some inputs get forged
0E3C5 B4 50                     	LDY zInputBottleNeck, X
0E3C7 20 EC E3                  	JSR ReadJoypads
0E3CA                           
0E3CA 98                        	TYA
0E3CB D5 50                     	CMP zInputBottleNeck, X
0E3CD D0 F6                     	BNE @DoubleCheckInput0
0E3CF                           
0E3CF E8                        	INX
0E3D0 20 EC E3                  	JSR ReadJoypads
0E3D3                           
0E3D3                           @DoubleCheckInput1:
0E3D3 B4 50                     	LDY zInputBottleNeck, X
0E3D5 20 EC E3                  	JSR ReadJoypads
0E3D8                           
0E3D8 98                        	TYA
0E3D9 D5 50                     	CMP zInputBottleNeck, X
0E3DB D0 F6                     	BNE @DoubleCheckInput1
0E3DD                           
0E3DD                           @Loop:
0E3DD B5 50                     	LDA zInputBottleNeck, X ; Update the press/held values
0E3DF A8                        	TAY
0E3E0 55 52                     	EOR zInputCurrentState, X
0E3E2 35 50                     	AND zInputBottleNeck, X
0E3E4 95 50                     	STA zInputBottleNeck, X
0E3E6 94 52                     	STY zInputCurrentState, X
0E3E8 CA                        	DEX
0E3E9 10 F2                     	BPL @Loop
0E3EB                           
0E3EB 60                        	RTS
0E3EC                           
0E3EC                           
0E3EC                           ;
0E3EC                           ; Reads joypad pressed input
0E3EC                           ;
0E3EC                           ReadJoypads:
0E3EC                           	; send a jolt to the controller
0E3EC A9 01                     	LDA #1
0E3EE 8D 16 40                  	STA JOY1
0E3F1                           	; send the same jolt to the bottleneck to set C at the end
0E3F1 95 50                     	STA zInputBottleNeck, X
0E3F3                           	; 1 >> 1 = 0, C is not needed right now
0E3F3 4A                        	LSR A
0E3F4 8D 16 40                  	STA JOY1
0E3F7                           @Loop:
0E3F7                           	; Read standard controller data
0E3F7 BD 16 40                  	LDA JOY1, X
0E3FA 4A                        	LSR A
0E3FB                           	; are we done?
0E3FB 36 50                     	ROL zInputBottleNeck, X
0E3FD 90 F8                     	BCC @Loop
0E3FF                           	; we're done
0E3FF 60                        	RTS
0E400                           
0E400                           Start:
0E400                           	; our game's configuration is now initialized
0E400                           	; make sure track 0 is playing
0E400 A9 00                     	LDA #0
0E402 8D 01 20                  	STA PPUMASK
0E405 85 55                     	STA zPPUMaskMirror
0E407                           	; music 0
0E407 A8                        	TAY ; MUSIC_NONE
0E408 84 18                     	STY zMusicQueue
0E40A                           ; PPUCtrl_Base2000
0E40A                           ; PPUCtrl_WriteHorizontal
0E40A                           ; PPUCtrl_Sprite1000
0E40A                           ; PPUCtrl_Background0000
0E40A                           ; PPUCtrl_SpriteSize8x8
0E40A                           ; PPUCtrl_NMIEnabled
0E40A 09 88                     	ORA #PPU_NMI | PPU_OBJECT_TABLE
0E40C 85 54                     	STA zPPUCtrlMirror
0E40E 8D 00 20                  	STA PPUCTRL
0E411                           	; wait one vblank to init main loop
0E411 A9 01                     	LDA #1
0E413 20 EF E0                  	JSR DelayFrame_s_
0E416 4C 4A 80                  	JMP GameInit
0E419                           
0E419                           SyncToCurrentWindow:
0E419 A5 2F                     	LDA zCurrentWindow + 1
0E41B 85 2D                     	STA zWindow2
0E41D 8D 15 51                  	STA MMC5_PRGBankSwitch3
0E420 A5 2E                     	LDA zCurrentWindow
0E422 85 2C                     	STA zWindow1
0E424 8D 14 51                  	STA MMC5_PRGBankSwitch2 
0E427 60                        	RTS
0E428                           
0E428                           ;
0E428                           ; NMI - this is the first of three labels that need constant accessibility
0E428                           ;	RESET is the starting point of the ROM, and IRQ runs mid-frame
0E428                           ;
0E428                           ; The NMI runs every frame during vertical blanking and is responsible for
0E428                           ; tasks that should occur on each frame of gameplay, such as drawing tiles and
0E428                           ; sprites, scrolling, and reading input.
0E428                           ;
0E428                           ; It also runs the audio engine, allowing music to play continuously no matter
0E428                           ; how busy the rest of the game happens to be.
0E428                           ;
0E428                           NMI:
0E428 08                        	PHP
0E429 48                        	PHA
0E42A                           	PHX
0E42A 8A                        	TXA
0E42B 48                        	PHA
0E42C                           	PHY
0E42C 98                        	TYA
0E42D 48                        	PHA
0E42E                           	; save the PRG
0E42E                           	; heavy bank switching might take place
0E42E A5 2D                     	LDA zWindow2
0E430 85 31                     	STA zBackupWindow + 1
0E432 A5 2C                     	LDA zWindow1
0E434 85 30                     	STA zBackupWindow
0E436 A5 2F                     	LDA zCurrentWindow + 1
0E438 85 2D                     	STA zWindow2
0E43A A5 2E                     	LDA zCurrentWindow
0E43C 85 2C                     	STA zWindow1
0E43E                           	; palettes
0E43E 20 7F E4                  	JSR @ApplyPalette
0E441                           	; dma shortcut
0E441                           	; Map
0E441                           	; tiles
0E441 20 B5 E2                  	JSR UpdatePPUFromBufferWithOptions
0E444                           	; scroll
0E444 A6 54                     	LDX zPPUCtrlMirror
0E446 8E 00 20                  	STX PPUCTRL
0E449 A2 00                     	LDX #0
0E44B 8E 05 20                  	STX PPUSCROLL
0E44E 8E 05 20                  	STX PPUSCROLL
0E451 A6 55                     	LDX zPPUMaskMirror
0E453 8E 01 20                  	STX PPUMASK
0E456 20 F6 E0                  	JSR FadePalettes
0E459                           ;	JSR UpdateJoypads
0E459                           	; advance sound by one frame
0E459 20 2B E3                  	JSR UpdateSound
0E45C                           	; check for an NMI timer (4.25 seconds maximum)
0E45C A5 23                     	LDA zNMITimer
0E45E F0 02                     	BEQ @DoNotAdjust
0E460 C6 23                     	DEC zNMITimer
0E462                           @DoNotAdjust:
0E462                           	; cleanup
0E462 A5 2D                     	LDA zWindow2
0E464 85 2F                     	STA zCurrentWindow + 1
0E466 A5 2C                     	LDA zWindow1
0E468 85 2E                     	STA zCurrentWindow
0E46A A5 31                     	LDA zBackupWindow + 1
0E46C 85 2D                     	STA zWindow2
0E46E 8D 15 51                  	STA MMC5_PRGBankSwitch3
0E471 A5 30                     	LDA zBackupWindow
0E473 85 2C                     	STA zWindow1
0E475 8D 14 51                  	STA MMC5_PRGBankSwitch2
0E478                           	PLY
0E478 68                        	PLA
0E479 A8                        	TAY
0E47A                           	PLX
0E47A 68                        	PLA
0E47B AA                        	TAX
0E47C 68                        	PLA
0E47D 28                        	PLP
0E47E 40                        	RTI
0E47F                           
0E47F                           @ApplyPalette:
0E47F AE 02 20                  	LDX PPUSTATUS
0E482 A2 3F                     	LDX #>PALETTE_RAM
0E484 8E 06 20                  	STX PPUADDR
0E487 A2 00                     	LDX #<PALETTE_RAM
0E489 8E 06 20                  	STX PPUADDR
0E48C A5 E0                     	LDA zPals
0E48E 29 3F                     	AND #COLOR_INDEX
0E490 AA                        	TAX
0E491 8D 07 20                  	STA PPUDATA
0E494 A5 E1                     	LDA zPals + 1
0E496 8D 07 20                  	STA PPUDATA
0E499 A5 E2                     	LDA zPals + 2
0E49B 8D 07 20                  	STA PPUDATA
0E49E A5 E3                     	LDA zPals + 3
0E4A0 8D 07 20                  	STA PPUDATA
0E4A3 8E 07 20                  	STX PPUDATA
0E4A6 A5 E5                     	LDA zPals + 5
0E4A8 8D 07 20                  	STA PPUDATA
0E4AB A5 E6                     	LDA zPals + 6
0E4AD 8D 07 20                  	STA PPUDATA
0E4B0 A5 E7                     	LDA zPals + 7
0E4B2 8D 07 20                  	STA PPUDATA
0E4B5 8E 07 20                  	STX PPUDATA
0E4B8 A5 E9                     	LDA zPals + 9
0E4BA 8D 07 20                  	STA PPUDATA
0E4BD A5 EA                     	LDA zPals + 10
0E4BF 8D 07 20                  	STA PPUDATA
0E4C2 A5 EB                     	LDA zPals + 11
0E4C4 8D 07 20                  	STA PPUDATA
0E4C7 8E 07 20                  	STX PPUDATA
0E4CA A5 ED                     	LDA zPals + 13
0E4CC 8D 07 20                  	STA PPUDATA
0E4CF A5 EE                     	LDA zPals + 14
0E4D1 8D 07 20                  	STA PPUDATA
0E4D4 A5 EF                     	LDA zPals + 15
0E4D6 8D 07 20                  	STA PPUDATA
0E4D9 60                        	RTS
0E4DA                           
0E4DA                           ;
0E4DA                           ; Public RESET
0E4DA                           ;
0E4DA                           ; This code is called when the NES is reset and handles some boilerplate
0E4DA                           ; initialization before starting the game loop.
0E4DA                           ;
0E4DA                           ; The NMI handles frame rendering.
0E4DA                           ;
0E4DA                           RESET:
0E4DA A9 03                     	LDA #3 ; all 8K switchable
0E4DC 8D 00 51                  	STA MMC5_PRGMode
0E4DF A9 01                     	LDA #1 ; 4K mode (try not to use $5130)
0E4E1 8D 01 51                  	STA MMC5_CHRMode
0E4E4                           
0E4E4                           	; PRG RAM handshake
0E4E4                           	; Enable writable MMC5 exclusive RAM
0E4E4 A9 02                     	LDA #2
0E4E6 8D 02 51                  	STA MMC5_PRGRAMProtect1
0E4E9 8D 04 51                  	STA MMC5_ExtendedRAMMode
0E4EC A9 01                     	LDA #1
0E4EE 8D 03 51                  	STA MMC5_PRGRAMProtect2
0E4F1                           
0E4F1                           	; Set nametable mapping
0E4F1 A9 50                     	LDA #%01010000
0E4F3 8D 05 51                  	STA MMC5_NametableMapping
0E4F6                           
0E4F6                           	; setup RAM
0E4F6 A9 00                     	LDA #RAM_Scratch
0E4F8 85 2B                     	STA zRAMBank
0E4FA                           	; upper CHR bits go unused
0E4FA 8D 30 51                  	STA MMC5_CHRBankSwitchUpper
0E4FD                           
0E4FD                           	; MMC5 Pulse channels
0E4FD A9 0F                     	LDA #$0f
0E4FF 8D 15 50                  	STA MMC5_SND_CHN
0E502                           
0E502                           	; select the first two CHR banks
0E502 A9 00                     	LDA #CHR_TitleBG
0E504 8D 23 51                  	STA MMC5_CHRBankSwitch4
0E507 85 24                     	STA zCHRWindow0
0E509 A9 01                     	LDA #CHR_TitleOBJ
0E50B 8D 27 51                  	STA MMC5_CHRBankSwitch8
0E50E 8D 2B 51                  	STA MMC5_CHRBankSwitch12
0E511 85 25                     	STA zCHRWindow1
0E513                           
0E513                           	; select the starter PRG banks
0E513 A9 80                     	LDA #PRG_Start0
0E515 8D 14 51                  	STA MMC5_PRGBankSwitch2
0E518 85 2C                     	STA zWindow1
0E51A 85 2E                     	STA zCurrentWindow
0E51C A9 81                     	LDA #PRG_Start1
0E51E 8D 15 51                  	STA MMC5_PRGBankSwitch3
0E521 85 2D                     	STA zWindow2
0E523 85 2F                     	STA zCurrentWindow + 1
0E525                           	; PRG_Start2 needs to be empty due to DPCM
0E525 A9 82                     	LDA #PRG_Start2
0E527 8D 16 51                  	STA MMC5_PRGBankSwitch4
0E52A                           	; Home ROM
0E52A A9 FF                     	LDA #PRG_Home
0E52C 8D 17 51                  	STA MMC5_PRGBankSwitch5
0E52F                           
0E52F 78                        	SEI
0E530 D8                        	CLD
0E531                           ; Nametable base 0, Horizontal writing, OBJ base 0, BG base 0, 8x8 OBJs, no NMI
0E531 A9 00                     	LDA #0
0E533 8D 00 20                  	STA PPUCTRL
0E536 85 54                     	STA zPPUCtrlMirror
0E538 A2 FF                     	LDX #<iStackTop ; Reset stack pointer
0E53A 9A                        	TXS
0E53B                           
0E53B                           @VBlankLoop:
0E53B                           	; Wait for first VBlank
0E53B AD 02 20                  	LDA PPUSTATUS
0E53E 29 80                     	AND #PPUStatus_VBlankHit
0E540 F0 F9                     	BEQ @VBlankLoop
0E542                           
0E542                           @VBlank2Loop:
0E542                           	; Wait for second VBlank
0E542 AD 02 20                  	LDA PPUSTATUS
0E545 10 FB                     	BPL @VBlank2Loop
0E547                           
0E547 A9 44                     	LDA #MMC5_VMirror
0E549 8D 05 51                  	STA MMC5_NametableMapping
0E54C E8                        	INX
0E54D 8A                        	TXA
0E54E                           @Loop:
0E54E                           	; clear RAM
0E54E CA                        	DEX
0E54F 9D 00 04                  	STA $400, X
0E552 9D 00 05                  	STA $500, X
0E555 9D 00 06                  	STA $600, X
0E558 9D 00 07                  	STA $700, X
0E55B 9D 00 5C                  	STA $5c00, X ; mmc5 RAM
0E55E 9D 00 5D                  	STA $5d00, X
0E561 9D 00 5E                  	STA $5e00, X
0E564 9D 00 5F                  	STA $5f00, X
0E567 9D 00 60                  	STA $6000, X ; cart RAM
0E56A 9D 00 61                  	STA $6100, X
0E56D 9D 00 62                  	STA $6200, X
0E570 9D 00 63                  	STA $6300, X
0E573 9D 00 64                  	STA $6400, X
0E576 9D 00 65                  	STA $6500, X
0E579 9D 00 66                  	STA $6600, X
0E57C 9D 00 67                  	STA $6700, X
0E57F 9D 00 68                  	STA $6800, X
0E582 9D 00 69                  	STA $6900, X
0E585 9D 00 6A                  	STA $6a00, X
0E588 9D 00 6B                  	STA $6b00, X
0E58B 9D 00 6C                  	STA $6c00, X
0E58E 9D 00 6D                  	STA $6d00, X
0E591 9D 00 6E                  	STA $6e00, X
0E594 9D 00 6F                  	STA $6f00, X
0E597 9D 00 70                  	STA $7000, X
0E59A 9D 00 71                  	STA $7100, X
0E59D 9D 00 72                  	STA $7200, X
0E5A0 9D 00 73                  	STA $7300, X
0E5A3 9D 00 74                  	STA $7400, X
0E5A6 9D 00 75                  	STA $7500, X
0E5A9 9D 00 76                  	STA $7600, X
0E5AC 9D 00 77                  	STA $7700, X
0E5AF 9D 00 78                  	STA $7800, X
0E5B2 9D 00 79                  	STA $7900, X
0E5B5 9D 00 7A                  	STA $7a00, X
0E5B8 9D 00 7B                  	STA $7b00, X
0E5BB 9D 00 7C                  	STA $7c00, X
0E5BE 9D 00 7D                  	STA $7d00, X
0E5C1 9D 00 7E                  	STA $7e00, X
0E5C4 9D 00 7F                  	STA $7f00, X
0E5C7 D0 85                     	BNE @Loop
0E5C9 4C 00 E4                  	JMP Start
0E5CC                           
0E5CC                           IRQ:
0E5CC 40                        	RTI
0E5CD                           
0E5CD 00 00 00 00 00 00 00 00.. .pad $fff1, $00
0FFF1                           UnreferencedTitle:
0FFF1                           ; title of the game, fff1
0FFF1                           ; it was common practice in old games to write the name at the end of PRG ROM.
0FFF1 56 55 4C 50 52 45 49 43.. 	.db "VULPREICH"
0FFFA                           
0FFFA                           NESVectorTables:
0FFFA 28 E4                     	.dw NMI   ; runs every frame
0FFFC DA E4                     	.dw RESET ; boots up the game
0FFFE CC E5                     	.dw IRQ   ; dummied out
10000                           
10000                           	.include "src/chr.asm"
10000                           
10000 00 00 00 00 00 00 00 00.. .incbin "src/chr/title.chr"
11000 00 00 00 00 00 00 00 00.. .dsb ($ff * $1000), $00110000                           ENDIF
110000                           
